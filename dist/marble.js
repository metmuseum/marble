/*! For license information please see marble.js.LICENSE.txt */
(()=>{var e={"./node_modules/@vimeo/player/dist/player.es.js":(e,t,s)=>{"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){for(var s=0;s<t.length;s++){var n=t[s];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}s.r(t);var r=void 0!==s.g&&"[object global]"==={}.toString.call(s.g);function i(e,t){return 0===e.indexOf(t.toLowerCase())?e:"".concat(t.toLowerCase()).concat(e.substr(0,1).toUpperCase()).concat(e.substr(1))}function u(e){return Boolean(e&&1===e.nodeType&&"nodeName"in e&&e.ownerDocument&&e.ownerDocument.defaultView)}function d(e){return!isNaN(parseFloat(e))&&isFinite(e)&&Math.floor(e)==e}function l(e){return/^(https?:)?\/\/((player|www)\.)?vimeo\.com(?=$|\/)/.test(e)}function a(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.id,s=e.url,n=t||s;if(!n)throw new Error("An id or url must be passed, either in an options object or as a data-vimeo-id or data-vimeo-url attribute.");if(d(n))return"https://vimeo.com/".concat(n);if(l(n))return n.replace("http:","https:");if(t)throw new TypeError("“".concat(t,"” is not a valid video id."));throw new TypeError("“".concat(n,"” is not a vimeo.com url."))}var c=void 0!==Array.prototype.indexOf,f="undefined"!=typeof window&&void 0!==window.postMessage;if(!(r||c&&f))throw new Error("Sorry, the Vimeo Player API is not available in this browser.");var h="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==s.g?s.g:"undefined"!=typeof self?self:{};!function(e){if(!e.WeakMap){var t=Object.prototype.hasOwnProperty,s=Object.defineProperty&&function(){try{return 1===Object.defineProperty({},"x",{value:1}).x}catch(e){}}(),n=function(e,t,n){s?Object.defineProperty(e,t,{configurable:!0,writable:!0,value:n}):e[t]=n};e.WeakMap=function(){function e(){if(void 0===this)throw new TypeError("Constructor WeakMap requires 'new'");if(n(this,"_id",r("_WeakMap")),arguments.length>0)throw new TypeError("WeakMap iterable is not supported")}function s(e,s){if(!o(e)||!t.call(e,"_id"))throw new TypeError(s+" method called on incompatible receiver "+typeof e)}function r(e){return e+"_"+i()+"."+i()}function i(){return Math.random().toString().substring(2)}return n(e.prototype,"delete",(function(e){if(s(this,"delete"),!o(e))return!1;var t=e[this._id];return!(!t||t[0]!==e)&&(delete e[this._id],!0)})),n(e.prototype,"get",(function(e){if(s(this,"get"),o(e)){var t=e[this._id];return t&&t[0]===e?t[1]:void 0}})),n(e.prototype,"has",(function(e){if(s(this,"has"),!o(e))return!1;var t=e[this._id];return!(!t||t[0]!==e)})),n(e.prototype,"set",(function(e,t){if(s(this,"set"),!o(e))throw new TypeError("Invalid value used as weak map key");var r=e[this._id];return r&&r[0]===e?(r[1]=t,this):(n(e,this._id,[e,t]),this)})),n(e,"_polyfill",!0),e}()}function o(e){return Object(e)===e}}("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:h);var m,p,v=(m=function(e){var t,s,n;n=function(){var e,t,s,n=Object.prototype.toString,o="undefined"!=typeof setImmediate?function(e){return setImmediate(e)}:setTimeout;try{Object.defineProperty({},"x",{}),e=function(e,t,s,n){return Object.defineProperty(e,t,{value:s,writable:!0,configurable:!1!==n})}}catch(t){e=function(e,t,s){return e[t]=s,e}}function r(e,n){s.add(e,n),t||(t=o(s.drain))}function i(e){var t,s=typeof e;return null==e||"object"!=s&&"function"!=s||(t=e.then),"function"==typeof t&&t}function u(){for(var e=0;e<this.chain.length;e++)d(this,1===this.state?this.chain[e].success:this.chain[e].failure,this.chain[e]);this.chain.length=0}function d(e,t,s){var n,o;try{!1===t?s.reject(e.msg):(n=!0===t?e.msg:t.call(void 0,e.msg))===s.promise?s.reject(TypeError("Promise-chain cycle")):(o=i(n))?o.call(n,s.resolve,s.reject):s.resolve(n)}catch(e){s.reject(e)}}function l(e){var t,s=this;if(!s.triggered){s.triggered=!0,s.def&&(s=s.def);try{(t=i(e))?r((function(){var n=new f(s);try{t.call(e,(function(){l.apply(n,arguments)}),(function(){a.apply(n,arguments)}))}catch(e){a.call(n,e)}})):(s.msg=e,s.state=1,s.chain.length>0&&r(u,s))}catch(e){a.call(new f(s),e)}}}function a(e){var t=this;t.triggered||(t.triggered=!0,t.def&&(t=t.def),t.msg=e,t.state=2,t.chain.length>0&&r(u,t))}function c(e,t,s,n){for(var o=0;o<t.length;o++)!function(o){e.resolve(t[o]).then((function(e){s(o,e)}),n)}(o)}function f(e){this.def=e,this.triggered=!1}function h(e){this.promise=e,this.state=0,this.triggered=!1,this.chain=[],this.msg=void 0}function m(e){if("function"!=typeof e)throw TypeError("Not a function");if(0!==this.__NPO__)throw TypeError("Not a promise");this.__NPO__=1;var t=new h(this);this.then=function(e,s){var n={success:"function"!=typeof e||e,failure:"function"==typeof s&&s};return n.promise=new this.constructor((function(e,t){if("function"!=typeof e||"function"!=typeof t)throw TypeError("Not a function");n.resolve=e,n.reject=t})),t.chain.push(n),0!==t.state&&r(u,t),n.promise},this.catch=function(e){return this.then(void 0,e)};try{e.call(void 0,(function(e){l.call(t,e)}),(function(e){a.call(t,e)}))}catch(e){a.call(t,e)}}s=function(){var e,s,n;function o(e,t){this.fn=e,this.self=t,this.next=void 0}return{add:function(t,r){n=new o(t,r),s?s.next=n:e=n,s=n,n=void 0},drain:function(){var n=e;for(e=s=t=void 0;n;)n.fn.call(n.self),n=n.next}}}();var p=e({},"constructor",m,!1);return m.prototype=p,e(p,"__NPO__",0,!1),e(m,"resolve",(function(e){return e&&"object"==typeof e&&1===e.__NPO__?e:new this((function(t,s){if("function"!=typeof t||"function"!=typeof s)throw TypeError("Not a function");t(e)}))})),e(m,"reject",(function(e){return new this((function(t,s){if("function"!=typeof t||"function"!=typeof s)throw TypeError("Not a function");s(e)}))})),e(m,"all",(function(e){var t=this;return"[object Array]"!=n.call(e)?t.reject(TypeError("Not an array")):0===e.length?t.resolve([]):new t((function(s,n){if("function"!=typeof s||"function"!=typeof n)throw TypeError("Not a function");var o=e.length,r=Array(o),i=0;c(t,e,(function(e,t){r[e]=t,++i===o&&s(r)}),n)}))})),e(m,"race",(function(e){var t=this;return"[object Array]"!=n.call(e)?t.reject(TypeError("Not an array")):new t((function(s,n){if("function"!=typeof s||"function"!=typeof n)throw TypeError("Not a function");c(t,e,(function(e,t){s(t)}),n)}))})),m},(s=h)[t="Promise"]=s[t]||n(),e.exports&&(e.exports=s[t])},m(p={exports:{}},p.exports),p.exports),g=new WeakMap;function _(e,t,s){var n=g.get(e.element)||{};t in n||(n[t]=[]),n[t].push(s),g.set(e.element,n)}function y(e,t){return(g.get(e.element)||{})[t]||[]}function j(e,t,s){var n=g.get(e.element)||{};if(!n[t])return!0;if(!s)return n[t]=[],g.set(e.element,n),!0;var o=n[t].indexOf(s);return-1!==o&&n[t].splice(o,1),g.set(e.element,n),n[t]&&0===n[t].length}function b(e,t){var s=g.get(e);g.set(t,s),g.delete(e)}var w=["autopause","autoplay","background","byline","color","controls","dnt","height","id","keyboard","loop","maxheight","maxwidth","muted","playsinline","portrait","responsive","speed","texttrack","title","transparent","url","width"];function E(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return w.reduce((function(t,s){var n=e.getAttribute("data-vimeo-".concat(s));return(n||""===n)&&(t[s]=""===n?1:n),t}),t)}function k(e,t){var s=e.html;if(!t)throw new TypeError("An element must be provided");if(null!==t.getAttribute("data-vimeo-initialized"))return t.querySelector("iframe");var n=document.createElement("div");return n.innerHTML=s,t.appendChild(n.firstChild),t.setAttribute("data-vimeo-initialized","true"),t.querySelector("iframe")}function S(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},s=arguments.length>2?arguments[2]:void 0;return new Promise((function(n,o){if(!l(e))throw new TypeError("“".concat(e,"” is not a vimeo.com url."));var r="https://vimeo.com/api/oembed.json?url=".concat(encodeURIComponent(e));for(var i in t)t.hasOwnProperty(i)&&(r+="&".concat(i,"=").concat(encodeURIComponent(t[i])));var u="XDomainRequest"in window?new XDomainRequest:new XMLHttpRequest;u.open("GET",r,!0),u.onload=function(){if(404!==u.status)if(403!==u.status)try{var t=JSON.parse(u.responseText);if(403===t.domain_status_code)return k(t,s),void o(new Error("“".concat(e,"” is not embeddable.")));n(t)}catch(e){o(e)}else o(new Error("“".concat(e,"” is not embeddable.")));else o(new Error("“".concat(e,"” was not found.")))},u.onerror=function(){var e=u.status?" (".concat(u.status,")"):"";o(new Error("There was an error fetching the embed code from Vimeo".concat(e,".")))},u.send()}))}function x(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){return console.warn(e),{}}return e}function A(e,t,s){if(e.element.contentWindow&&e.element.contentWindow.postMessage){var n={method:t};void 0!==s&&(n.value=s);var o=parseFloat(navigator.userAgent.toLowerCase().replace(/^.*msie (\d+).*$/,"$1"));o>=8&&o<10&&(n=JSON.stringify(n)),e.element.contentWindow.postMessage(n,e.origin)}}function T(e,t){var s,n=[];if((t=x(t)).event){if("error"===t.event)y(e,t.data.method).forEach((function(s){var n=new Error(t.data.message);n.name=t.data.name,s.reject(n),j(e,t.data.method,s)}));n=y(e,"event:".concat(t.event)),s=t.data}else if(t.method){var o=function(e,t){var s=y(e,t);if(s.length<1)return!1;var n=s.shift();return j(e,t,n),n}(e,t.method);o&&(n.push(o),s=t.value)}n.forEach((function(t){try{if("function"==typeof t)return void t.call(e,s);t.resolve(s)}catch(e){}}))}var L=new WeakMap,C=new WeakMap,I={},P=function(){function e(t){var s=this,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(n(this,e),window.jQuery&&t instanceof jQuery&&(t.length>1&&window.console&&console.warn&&console.warn("A jQuery object with multiple elements was passed, using the first element."),t=t[0]),"undefined"!=typeof document&&"string"==typeof t&&(t=document.getElementById(t)),!u(t))throw new TypeError("You must pass either a valid element or a valid id.");if("IFRAME"!==t.nodeName){var r=t.querySelector("iframe");r&&(t=r)}if("IFRAME"===t.nodeName&&!l(t.getAttribute("src")||""))throw new Error("The player element passed isn’t a Vimeo embed.");if(L.has(t))return L.get(t);this._window=t.ownerDocument.defaultView,this.element=t,this.origin="*";var i=new v((function(e,n){if(s._onMessage=function(t){if(l(t.origin)&&s.element.contentWindow===t.source){"*"===s.origin&&(s.origin=t.origin);var o=x(t.data);if(o&&"error"===o.event&&o.data&&"ready"===o.data.method){var r=new Error(o.data.message);return r.name=o.data.name,void n(r)}var i=o&&"ready"===o.event,u=o&&"ping"===o.method;if(i||u)return s.element.setAttribute("data-ready","true"),void e();T(s,o)}},s._window.addEventListener("message",s._onMessage),"IFRAME"!==s.element.nodeName){var r=E(t,o);S(a(r),r,t).then((function(e){var n=k(e,t);return s.element=n,s._originalElement=t,b(t,n),L.set(s.element,s),e})).catch(n)}}));if(C.set(this,i),L.set(this.element,this),"IFRAME"===this.element.nodeName&&A(this,"ping"),I.isEnabled){var d=function(){return I.exit()};this.fullscreenchangeHandler=function(){I.isFullscreen?_(s,"event:exitFullscreen",d):j(s,"event:exitFullscreen",d),s.ready().then((function(){A(s,"fullscreenchange",I.isFullscreen)}))},I.on("fullscreenchange",this.fullscreenchangeHandler)}return this}var t,s,r;return t=e,s=[{key:"callMethod",value:function(e){var t=this,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new v((function(n,o){return t.ready().then((function(){_(t,e,{resolve:n,reject:o}),A(t,e,s)})).catch(o)}))}},{key:"get",value:function(e){var t=this;return new v((function(s,n){return e=i(e,"get"),t.ready().then((function(){_(t,e,{resolve:s,reject:n}),A(t,e)})).catch(n)}))}},{key:"set",value:function(e,t){var s=this;return new v((function(n,o){if(e=i(e,"set"),null==t)throw new TypeError("There must be a value to set.");return s.ready().then((function(){_(s,e,{resolve:n,reject:o}),A(s,e,t)})).catch(o)}))}},{key:"on",value:function(e,t){if(!e)throw new TypeError("You must pass an event name.");if(!t)throw new TypeError("You must pass a callback function.");if("function"!=typeof t)throw new TypeError("The callback must be a function.");0===y(this,"event:".concat(e)).length&&this.callMethod("addEventListener",e).catch((function(){})),_(this,"event:".concat(e),t)}},{key:"off",value:function(e,t){if(!e)throw new TypeError("You must pass an event name.");if(t&&"function"!=typeof t)throw new TypeError("The callback must be a function.");j(this,"event:".concat(e),t)&&this.callMethod("removeEventListener",e).catch((function(e){}))}},{key:"loadVideo",value:function(e){return this.callMethod("loadVideo",e)}},{key:"ready",value:function(){var e=C.get(this)||new v((function(e,t){t(new Error("Unknown player. Probably unloaded."))}));return v.resolve(e)}},{key:"addCuePoint",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.callMethod("addCuePoint",{time:e,data:t})}},{key:"removeCuePoint",value:function(e){return this.callMethod("removeCuePoint",e)}},{key:"enableTextTrack",value:function(e,t){if(!e)throw new TypeError("You must pass a language.");return this.callMethod("enableTextTrack",{language:e,kind:t})}},{key:"disableTextTrack",value:function(){return this.callMethod("disableTextTrack")}},{key:"pause",value:function(){return this.callMethod("pause")}},{key:"play",value:function(){return this.callMethod("play")}},{key:"requestFullscreen",value:function(){return I.isEnabled?I.request(this.element):this.callMethod("requestFullscreen")}},{key:"exitFullscreen",value:function(){return I.isEnabled?I.exit():this.callMethod("exitFullscreen")}},{key:"getFullscreen",value:function(){return I.isEnabled?v.resolve(I.isFullscreen):this.get("fullscreen")}},{key:"requestPictureInPicture",value:function(){return this.callMethod("requestPictureInPicture")}},{key:"exitPictureInPicture",value:function(){return this.callMethod("exitPictureInPicture")}},{key:"getPictureInPicture",value:function(){return this.get("pictureInPicture")}},{key:"unload",value:function(){return this.callMethod("unload")}},{key:"destroy",value:function(){var e=this;return new v((function(t){if(C.delete(e),L.delete(e.element),e._originalElement&&(L.delete(e._originalElement),e._originalElement.removeAttribute("data-vimeo-initialized")),e.element&&"IFRAME"===e.element.nodeName&&e.element.parentNode&&(e.element.parentNode.parentNode&&e._originalElement&&e._originalElement!==e.element.parentNode?e.element.parentNode.parentNode.removeChild(e.element.parentNode):e.element.parentNode.removeChild(e.element)),e.element&&"DIV"===e.element.nodeName&&e.element.parentNode){e.element.removeAttribute("data-vimeo-initialized");var s=e.element.querySelector("iframe");s&&s.parentNode&&(s.parentNode.parentNode&&e._originalElement&&e._originalElement!==s.parentNode?s.parentNode.parentNode.removeChild(s.parentNode):s.parentNode.removeChild(s))}e._window.removeEventListener("message",e._onMessage),I.isEnabled&&I.off("fullscreenchange",e.fullscreenchangeHandler),t()}))}},{key:"getAutopause",value:function(){return this.get("autopause")}},{key:"setAutopause",value:function(e){return this.set("autopause",e)}},{key:"getBuffered",value:function(){return this.get("buffered")}},{key:"getCameraProps",value:function(){return this.get("cameraProps")}},{key:"setCameraProps",value:function(e){return this.set("cameraProps",e)}},{key:"getChapters",value:function(){return this.get("chapters")}},{key:"getCurrentChapter",value:function(){return this.get("currentChapter")}},{key:"getColor",value:function(){return this.get("color")}},{key:"setColor",value:function(e){return this.set("color",e)}},{key:"getCuePoints",value:function(){return this.get("cuePoints")}},{key:"getCurrentTime",value:function(){return this.get("currentTime")}},{key:"setCurrentTime",value:function(e){return this.set("currentTime",e)}},{key:"getDuration",value:function(){return this.get("duration")}},{key:"getEnded",value:function(){return this.get("ended")}},{key:"getLoop",value:function(){return this.get("loop")}},{key:"setLoop",value:function(e){return this.set("loop",e)}},{key:"setMuted",value:function(e){return this.set("muted",e)}},{key:"getMuted",value:function(){return this.get("muted")}},{key:"getPaused",value:function(){return this.get("paused")}},{key:"getPlaybackRate",value:function(){return this.get("playbackRate")}},{key:"setPlaybackRate",value:function(e){return this.set("playbackRate",e)}},{key:"getPlayed",value:function(){return this.get("played")}},{key:"getQualities",value:function(){return this.get("qualities")}},{key:"getQuality",value:function(){return this.get("quality")}},{key:"setQuality",value:function(e){return this.set("quality",e)}},{key:"getSeekable",value:function(){return this.get("seekable")}},{key:"getSeeking",value:function(){return this.get("seeking")}},{key:"getTextTracks",value:function(){return this.get("textTracks")}},{key:"getVideoEmbedCode",value:function(){return this.get("videoEmbedCode")}},{key:"getVideoId",value:function(){return this.get("videoId")}},{key:"getVideoTitle",value:function(){return this.get("videoTitle")}},{key:"getVideoWidth",value:function(){return this.get("videoWidth")}},{key:"getVideoHeight",value:function(){return this.get("videoHeight")}},{key:"getVideoUrl",value:function(){return this.get("videoUrl")}},{key:"getVolume",value:function(){return this.get("volume")}},{key:"setVolume",value:function(e){return this.set("volume",e)}}],s&&o(t.prototype,s),r&&o(t,r),e}();r||(I=function(){var e=function(){for(var e,t=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],s=0,n=t.length,o={};s<n;s++)if((e=t[s])&&e[1]in document){for(s=0;s<e.length;s++)o[t[0][s]]=e[s];return o}return!1}(),t={fullscreenchange:e.fullscreenchange,fullscreenerror:e.fullscreenerror},s={request:function(t){return new Promise((function(n,o){var r=function e(){s.off("fullscreenchange",e),n()};s.on("fullscreenchange",r);var i=(t=t||document.documentElement)[e.requestFullscreen]();i instanceof Promise&&i.then(r).catch(o)}))},exit:function(){return new Promise((function(t,n){if(s.isFullscreen){var o=function e(){s.off("fullscreenchange",e),t()};s.on("fullscreenchange",o);var r=document[e.exitFullscreen]();r instanceof Promise&&r.then(o).catch(n)}else t()}))},on:function(e,s){var n=t[e];n&&document.addEventListener(n,s)},off:function(e,s){var n=t[e];n&&document.removeEventListener(n,s)}};return Object.defineProperties(s,{isFullscreen:{get:function(){return Boolean(document[e.fullscreenElement])}},element:{enumerable:!0,get:function(){return document[e.fullscreenElement]}},isEnabled:{enumerable:!0,get:function(){return Boolean(document[e.fullscreenEnabled])}}}),s}(),function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document,t=[].slice.call(e.querySelectorAll("[data-vimeo-id], [data-vimeo-url]")),s=function(e){"console"in window&&console.error&&console.error("There was an error creating an embed: ".concat(e))};t.forEach((function(e){try{if(null!==e.getAttribute("data-vimeo-defer"))return;var t=E(e);S(a(t),t,e).then((function(t){return k(t,e)})).catch(s)}catch(e){s(e)}}))}(),function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document;if(!window.VimeoPlayerResizeEmbeds_){window.VimeoPlayerResizeEmbeds_=!0;var t=function(t){if(l(t.origin)&&t.data&&"spacechange"===t.data.event)for(var s=e.querySelectorAll("iframe"),n=0;n<s.length;n++)if(s[n].contentWindow===t.source){s[n].parentElement.style.paddingBottom="".concat(t.data.data[0].bottom,"px");break}};window.addEventListener("message",t)}}()),t.default=P},"./src/components/analytics-logger/index.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});class n{constructor(){console.trace("New analytics logger instantiated")}sendCustomEvent(e){try{console.log("Analytics event: ",e)}catch(e){console.error(e)}}}},"./src/components/audio-player/audio-player.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/index-all.js"),o=s("./src/components/audio-player/time-formatter.js"),r=s("./src/components/audio-player/cover-image-template.js"),i=s("./src/components/analytics-logger/index.js");const u={darkMode:!1,seekHelperDuration:10};t.default=class{constructor(e){var t,s,n,o;let{wrapperEl:r,options:d={}}=e;this.wrapperEl=r,this.audioEl=r.querySelector(".js-audio-player__audio"),this.coverImageWrapperEl=r.querySelector(".js-audio-player__image-wrapper"),this.darkModeQuery=window.matchMedia("(prefers-color-scheme: dark)"),this.progressBarCanvasEl=r.querySelector(".js-audio-player__progress-bar"),this.progressBarCanvas=this.progressBarCanvasEl.getContext("2d"),this.playButtonEl=r.querySelector(".js-audio-player__play"),this.playlistTracks=r.querySelectorAll(".js-audio-player__playlist-track"),this.currentTimeEl=r.querySelector(".js-audio-player__current-time"),this.timeRemainingEl=r.querySelector(".js-audio-player__remaining"),this.seekBackHelperEl=r.querySelector(".js-audio-player__seek-back-helper"),this.seekForwardHelperEl=r.querySelector(".js-audio-player__seek-forward-helper"),this.scrubStartAreaEl=r.querySelector(".js-audio-player__scrubbing-start-area"),this.scrubbableAreaEl=r.querySelector(".js-audio-player__scrubbable-area"),this.subtitleEl=r.querySelector(".js-audio-player__subtitle"),this.titleEl=r.querySelector(".js-audio-player__title"),this.transcriptEl=r.querySelector(".js-audio-player__transcript"),this.transcriptSection=r.querySelector(".js-audio-player__transcript-section"),this.transcriptToggle=null===(t=this.transcriptSection)||void 0===t?void 0:t.querySelector(".js-audio-player__transcript-toggle"),this.transcriptToggleText=null===(s=this.transcriptSection)||void 0===s?void 0:s.querySelector(".js-transcript__toggle-text"),this.transcriptWrapper=null===(n=this.transcriptSection)||void 0===n?void 0:n.querySelector(".js-audio-player__transcript-wrapper"),this.quoteExpanderDefaultText=null==this||null===(o=this.transcriptToggleText)||void 0===o?void 0:o.innerHTML,this.options={...u,...d},this.isDarkMode=this.options.darkMode||this.wrapperEl.classList.contains("inverted-colors")||this.darkModeQuery.matches,this.seekHelperDuration=this.options.seekHelperDuration,this.analyticsSender=this.options.analyticsSender||new i.default,this.isScrubbing=!1,this.currentTrack=JSON.parse(this.audioEl.dataset.track),this.amountPlayed=0,this.beforeTrackChange=new Event("beforeTrackChange"),this.afterTrackChange=new Event("afterTrackChange"),["_handleTimeChange","beginScrubbing","endScrubbing","formatTranscript","handleTrackChange","handleEnd","handleTimeChange","handleTranscriptToggle","hasTranscript","quickSeekBack","quickSeekForward","scrub","setMetaData","setTranscript","togglePlaying"].forEach((e=>{this[e]=this[e].bind(this)})),this.applyListeners(),this.setTranscript(),this.analyticsSender.sendCustomEvent({event:"UniversalAudioPlayer:playerLoaded",playerId:this.wrapperEl.id})}applyListeners(){var e,t;this.audioEl.addEventListener("loadedmetadata",this.setMetaData),this.playButtonEl.addEventListener("touchstart",this.togglePlaying,{passive:!1}),this.playButtonEl.addEventListener("click",this.togglePlaying),this.audioEl.addEventListener("timeupdate",this.handleTimeChange),this.audioEl.addEventListener("ended",this.handleEnd),this.audioEl.addEventListener("play",(()=>this.handlePlay())),this.audioEl.addEventListener("pause",(()=>this.handlePause())),this.playlistTracks.forEach((e=>{e.addEventListener("click",this.handleTrackChange)})),null===(e=this.playlistTracks[0])||void 0===e||e.classList.add("is-active-track"),this.seekBackHelperEl.addEventListener("click",this.quickSeekBack),this.seekForwardHelperEl.addEventListener("click",this.quickSeekForward),this.scrubStartAreaEl.addEventListener("touchstart",this.beginScrubbing,{passive:!1}),this.scrubStartAreaEl.addEventListener("mousedown",this.beginScrubbing),null===(t=this.transcriptToggle)||void 0===t||t.addEventListener("click",this.handleTranscriptToggle),"function"==typeof this.darkModeQuery.addEventListener&&this.darkModeQuery.addEventListener("change",(e=>this.isDarkMode=e.matches))}handleTrackChange(e){const t=e.currentTarget;if(t.classList.contains("is-active-track"))return!1;this.wrapperEl.dispatchEvent(this.beforeTrackChange),this.wrapperEl.querySelector(".is-active-track").classList.remove("is-active-track"),t.classList.add("is-active-track");let s=JSON.parse(t.dataset.track);this.setTrack(s),this.setTranscript(),this.audioEl.play(),this.wrapperEl.dispatchEvent(this.afterTrackChange)}setTrack(e){this.currentTrack=e,this.audioEl.dataset.track=e,this.audioEl.querySelector("source").src=e.audio,this.titleEl.innerHTML=(0,n.escape)(e.title),this.subtitleEl.innerHTML=(0,n.escape)(e.description),this.coverImageWrapperEl.innerHTML=(0,r.default)(e.image),this.amountPlayed=0,this.audioEl.load()}hasTranscript(){var e,t;return!(null===(e=this.currentTrack)||void 0===e||null===(t=e.transcript)||void 0===t||!t.length)}setTranscript(){this.transcriptSection.classList.remove(`audio-player__transcript-section--transcript-${!this.hasTranscript()}`),this.transcriptSection.classList.add(`audio-player__transcript-section--transcript-${this.hasTranscript()}`),this.transcriptEl.innerHTML=this.hasTranscript()?this.formatTranscript(this.currentTrack.transcript):""}formatTranscript(e){return e.replace(/\n|\r\n/gim,"<br />")}handleTimeChange(){requestAnimationFrame(this._handleTimeChange)}_handleTimeChange(){const e=this.audioEl.duration||0,t=this.audioEl.currentTime||0;this.setDisplayTime(t,e),this.drawProgress(t,e),this.calculatePlayAnalytics(t,e)}calculatePlayAnalytics(e,t){if(e&&t){let s=Math.round(e/t*10)/10;this.amountPlayed<s&&(this.amountPlayed=s,this.analyticsSender.sendCustomEvent({event:"UniversalAudioPlayer:playProgress:",trackId:this.currentTrack.id,trackTitle:this.currentTrack.title,progress:this.amountPlayed}))}}handleEnd(){this.handleTimeChange(),this.audioEl.pause()}setDisplayTime(e,t){this.currentTimeEl.innerHTML=(0,o.default)(e),this.timeRemainingEl.innerHTML=(0,o.default)(t-e)}canUpdateAuotmatically(){return!this.isScrubbing}drawProgress(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1e4;this.progressBarCanvas.save(),this.progressBarCanvas.clearRect(0,0,s,6),this.progressBarCanvas.fillStyle="transparent",this.progressBarCanvas.fillRect(0,0,s,6),this.progressBarCanvas.fillStyle=this.isDarkMode?"#ffffff":"#333333",this.progressBarCanvas.fillRect(0,0,e/t*s,6),this.progressBarCanvas.restore()}beginScrubbing(e){e.preventDefault(),this.isScrubbing=!0,this.initializeScrubbingListeners(),this.scrub(e)}initializeScrubbingListeners(){this.scrubbableAreaEl.addEventListener("touchmove",this.scrub,{passive:!1}),this.scrubbableAreaEl.addEventListener("touchend",this.endScrubbing,{passive:!1}),this.scrubbableAreaEl.addEventListener("touchcancel",this.endScrubbing,{passive:!1}),this.scrubbableAreaEl.addEventListener("mousemove",this.scrub),this.scrubbableAreaEl.addEventListener("mouseup",this.endScrubbing),this.scrubbableAreaEl.addEventListener("mouseleave",this.endScrubbing)}scrub(e){if(e.preventDefault(),this.isScrubbing){let t,s=this.progressBarCanvasEl.getBoundingClientRect();t=["touchstart","touchmove"].includes(e.type)?e.touches[0].clientX-s.left:e.offsetX;let n=t/s.width*this.audioEl.duration;this.audioEl.currentTime=n}}endScrubbing(e){e.preventDefault(),this.isScrubbing=!1,this.cleanUpScrubListeners()}cleanUpScrubListeners(){this.scrubbableAreaEl.removeEventListener("touchmove",this.scrub,{passive:!1}),this.scrubbableAreaEl.removeEventListener("touchend",this.endScrubbing,{passive:!1}),this.scrubbableAreaEl.removeEventListener("touchcancel",this.endScrubbing,{passive:!1}),this.scrubbableAreaEl.removeEventListener("mousemove",this.scrub),this.scrubbableAreaEl.removeEventListener("mouseup",this.endScrubbing),this.scrubbableAreaEl.removeEventListener("mouseleave",this.endScrubbing)}setMetaData(){var e,t;if(!("mediaSession"in navigator))return!1;let s=[],n=null===(e=this.currentTrack)||void 0===e||null===(t=e.image)||void 0===t?void 0:t.w560;n&&s.push({src:n}),navigator.mediaSession.metadata=new MediaMetadata({title:this.currentTrack.title,artist:this.currentTrack.description,artwork:s})}togglePlaying(e){e.preventDefault(),this.audioEl.paused?this.audioEl.play():this.audioEl.pause()}handlePlay(){this.wrapperEl.classList.add("is-playing"),this.analyticsSender.sendCustomEvent({event:"UniversalAudioPlayer:trackPlayed",trackId:this.currentTrack.id,trackTitle:this.currentTrack.title})}handlePause(){this.wrapperEl.classList.remove("is-playing")}quickSeekBack(e){e.preventDefault();const t=Math.max(0,this.audioEl.currentTime-this.seekHelperDuration);this.audioEl.currentTime=t}quickSeekForward(e){e.preventDefault();const t=Math.min(this.audioEl.duration,this.audioEl.currentTime+this.seekHelperDuration);this.audioEl.currentTime=t}handleTranscriptToggle(e){e.preventDefault(),this.transcriptSection.classList.contains("transcript-is-open")?(this.transcriptToggleText.innerHTML=this.quoteExpanderDefaultText,this.transcriptSection.classList.remove("transcript-is-open")):(this.transcriptSection.classList.add("transcript-is-open"),this.transcriptToggleText.innerHTML="Hide Transcript",this.analyticsSender.sendCustomEvent({event:"UniversalAudioPlayer:transcriptOpened",trackId:this.currentTrack.id,trackTitle:this.currentTrack.title}))}}},"./src/components/audio-player/cover-image-template.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/index-all.js");t.default=e=>{let t=String.raw;return e?t`<img
		class="audio-player__cover-image"
		alt="${(0,n.escape)(e.alt)}"
		width="${e.width}"
		height="${e.height}"
		src="${e.w560}"
		srcset="
			${e.w2400} 2400w,
			${e.w1600} 1600w,
			${e.w1200} 1200w,
			${e.w840} 840w,
			${e.w560} 560w,
			${e.w280} 280w"
		sizes="(max-width: 600px) 100vw, 200px"
	/>`:""}},"./src/components/audio-player/time-formatter.js":(e,t,s)=>{"use strict";s.r(t),t.default=e=>new Date(1e3*e).toISOString().substr(11,8).replace(/^00:0/i,"")},"./src/components/carousel/arrowShape.js":(e,t,s)=>{"use strict";s.r(t),t.default={x0:15,x1:65,y1:45,x2:70,y2:40,x3:27}},"./src/components/carousel/carousel.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{flickityDefaults:()=>i});var n=s("./src/global/settings.js"),o=s("./node_modules/flickity-imagesloaded/flickity-imagesloaded.js"),r=s.n(o);const i={accessibility:!0,autoPlay:!1,cellAlign:"left",prevNextButtons:!0,pageDots:!1,friction:.4,contain:!0,resize:!0,wrapAround:!1,imagesLoaded:!1,arrowShape:s("./src/components/carousel/arrowShape.js").default};t.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{selectorString:t}=e;t=t||".js-carousel",t=`${t}:not(.${n.default.initializedClassName})`;let s={...i,...e};const o=document.querySelectorAll(t);o.forEach((e=>{const t=new(r())(e,s).on("change",(function(){this.cells.forEach((e=>{const t=e.element.querySelector("video");null!==t&&t.pause()}));const e=this.selectedElements[0].querySelector("video");null!==e&&e.play()})),o=()=>{e.classList.add("is-loading");!e.querySelector(".loading")&&(t.resize(),e.classList.remove("is-loading"))};e.addEventListener("image-loaded",o,!1),e.addEventListener("image-errored",o,!1),e.classList.add(n.default.initializedClassName),e.setAttribute("role","region"),e.setAttribute("aria-label","Interactive slide carousel. Use left and right arrows to change slides.")}))}},"./src/components/carousel/slide/video-slide.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./src/global/settings.js");function o(){const e=`.js-carousel-slide__video:not(.${n.default.initializedClassName})`,t=[...document.querySelectorAll(e)].map((e=>"VIDEO"===e.nodeName?e:e.querySelector("video")));t.forEach((e=>{e.onplay=()=>{return(s=e).dispatchEvent(new CustomEvent("video-playing",{bubbles:!0})),void t.forEach((e=>{s!==e&&e.pause()}));var s},e.addEventListener("click",(()=>{e.play()})),e.classList.add(n.default.initializedClassName)}))}},"./src/components/jumplink-banner/jumplink-banner.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./src/global/settings.js"),o=s("./node_modules/smoothscroll-polyfill/dist/smoothscroll.js"),r=s.n(o);t.default=function(){r().polyfill(),document.querySelectorAll(`.js-jump-link:not(.${n.default.initializedClassName})`).forEach((e=>{e.addEventListener("click",(t=>{t.preventDefault(),document.querySelector(e.getAttribute("href")).scrollIntoView({behavior:"smooth"})})),e.classList.add(n.default.initializedClassName)}))}},"./src/components/musette/musette.js":(e,t,s)=>{"use strict";function n(){document.querySelectorAll(".js-la-musette").forEach((e=>{const t=e=>{e.preventDefault(),e.stopImmediatePropagation()};let s=!1;var n=!1;let o,r;var i=document.createElement("div");i.classList.add("musette-wrapper");var u=document.createElement("button");u.classList.add("musette-move-left");var d=document.createElement("button");d.classList.add("musette-move-right"),e.parentNode.insertBefore(i,e),i.appendChild(e),i.appendChild(u),i.appendChild(d);const l=e=>{var t=e.offsetWidth,s=e.scrollWidth,n=e.scrollLeft,o=s-(n+t);return{viewportWidth:t,trackWidth:s,positionLeft:n,remainingRight:o,moreLeft:n>0,moreRight:o>0}},a=e=>{var t=l(e);t.moreLeft?i.classList.add("musette-has-left-button"):i.classList.remove("musette-has-left-button"),t.moreRight?i.classList.add("musette-has-right-button"):i.classList.remove("musette-has-right-button")};a(e);var c;e.addEventListener("scroll",(()=>{window.clearTimeout(c),c=setTimeout((function(){a(e)}),66)}),!1),u.addEventListener("click",(t=>{t.preventDefault(),(e=>{var t=l(e),s=t.positionLeft-t.viewportWidth;e.scrollTo({left:s,behavior:"smooth"}),a(e)})(e)})),d.addEventListener("click",(t=>{t.preventDefault(),(e=>{var t=l(e),s=t.positionLeft+t.viewportWidth;e.scrollTo({left:s,behavior:"smooth"}),a(e)})(e)})),e.addEventListener("mousedown",(t=>{t.preventDefault(),s=!0,o=t.pageX-e.offsetLeft,r=e.scrollLeft})),e.addEventListener("mouseleave",(()=>{s=!1})),e.addEventListener("mouseup",(o=>{const r=e.querySelectorAll("a");if(n)for(let e=0;e<r.length;e++)r[e].addEventListener("click",t);else for(let e=0;e<r.length;e++)r[e].removeEventListener("click",t);s=!1,n=!1})),e.addEventListener("mousemove",(t=>{if(!s)return;n=!0,t.preventDefault();const i=2*(t.pageX-e.offsetLeft-o);e.scrollLeft=r-i}))}))}s.r(t),s.d(t,{default:()=>n})},"./src/components/vimeo-player/vimeo-controls.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./src/global/settings.js"),o=s("./node_modules/@vimeo/player/dist/player.es.js");t.default=function(){const e=`.js-vimeo-container:not(.${n.default.initializedClassName})`;document.querySelectorAll(e).forEach((e=>{const t=new o.default(e),s=e.querySelector(".js-vimeo-play");s.addEventListener("click",(function(e){e.preventDefault(),e.stopPropagation(),t.getPaused().then((function(e){e?((e,t)=>{e.play(),t.querySelector(".js-vimeo-play__play-icon").classList.add("is-hidden"),t.querySelector(".js-vimeo-play__pause-icon").classList.remove("is-hidden")})(t,s):((e,t)=>{e.pause(),t.querySelector(".js-vimeo-play__play-icon").classList.remove("is-hidden"),t.querySelector(".js-vimeo-play__pause-icon").classList.add("is-hidden")})(t,s)}))})),e.classList.add(n.default.initializedClassName)}))}},"./src/global/lazyload/lazyload.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/vanilla-lazyload/dist/lazyload.min.js"),o=s.n(n);s("./node_modules/intersection-observer/intersection-observer.js");const r=new CustomEvent("image-loaded",{bubbles:!0}),i=new CustomEvent("image-errored",{bubbles:!0}),u=()=>{window.marbleLazyLoadObj.loadAll(),window.removeEventListener("scroll",u,!0)};t.default=()=>{window.marbleLazyLoadObj?window.marbleLazyLoadObj.update():(window.marbleLazyLoadObj=new(o())({elements_selector:".lazy",callback_loaded:e=>{e.dispatchEvent(r)},callback_error:e=>{e.dispatchEvent(i)}}),window.addEventListener("scroll",u,{once:!0,passive:!0,capture:!0}))}},"./src/global/settings.js":(e,t,s)=>{"use strict";s.r(t);const n=function e(t){const s=Object.getOwnPropertyNames(t);for(const n of s){const s=t[n];s&&"object"==typeof s&&e(s)}return Object.freeze(t)}({initializedClassName:"js-marble-initialized"});t.default=n},"./node_modules/desandro-matches-selector/matches-selector.js":(e,t,s)=>{var n,o;!function(r,i){"use strict";void 0===(o="function"==typeof(n=i)?n.call(t,s,t,e):n)||(e.exports=o)}(window,(function(){"use strict";var e=function(){var e=window.Element.prototype;if(e.matches)return"matches";if(e.matchesSelector)return"matchesSelector";for(var t=["webkit","moz","ms","o"],s=0;s<t.length;s++){var n=t[s]+"MatchesSelector";if(e[n])return n}}();return function(t,s){return t[e](s)}}))},"./node_modules/ev-emitter/ev-emitter.js":function(e,t,s){var n,o;"undefined"!=typeof window&&window,void 0===(o="function"==typeof(n=function(){"use strict";function e(){}var t=e.prototype;return t.on=function(e,t){if(e&&t){var s=this._events=this._events||{},n=s[e]=s[e]||[];return-1==n.indexOf(t)&&n.push(t),this}},t.once=function(e,t){if(e&&t){this.on(e,t);var s=this._onceEvents=this._onceEvents||{};return(s[e]=s[e]||{})[t]=!0,this}},t.off=function(e,t){var s=this._events&&this._events[e];if(s&&s.length){var n=s.indexOf(t);return-1!=n&&s.splice(n,1),this}},t.emitEvent=function(e,t){var s=this._events&&this._events[e];if(s&&s.length){s=s.slice(0),t=t||[];for(var n=this._onceEvents&&this._onceEvents[e],o=0;o<s.length;o++){var r=s[o];n&&n[r]&&(this.off(e,r),delete n[r]),r.apply(this,t)}return this}},t.allOff=function(){delete this._events,delete this._onceEvents},e})?n.call(t,s,t,e):n)||(e.exports=o)},"./node_modules/fizzy-ui-utils/utils.js":(e,t,s)=>{var n,o;!function(r,i){n=[s("./node_modules/desandro-matches-selector/matches-selector.js")],o=function(e){return function(e,t){"use strict";var s={extend:function(e,t){for(var s in t)e[s]=t[s];return e},modulo:function(e,t){return(e%t+t)%t}},n=Array.prototype.slice;s.makeArray=function(e){return Array.isArray(e)?e:null==e?[]:"object"==typeof e&&"number"==typeof e.length?n.call(e):[e]},s.removeFrom=function(e,t){var s=e.indexOf(t);-1!=s&&e.splice(s,1)},s.getParent=function(e,s){for(;e.parentNode&&e!=document.body;)if(e=e.parentNode,t(e,s))return e},s.getQueryElement=function(e){return"string"==typeof e?document.querySelector(e):e},s.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},s.filterFindElements=function(e,n){e=s.makeArray(e);var o=[];return e.forEach((function(e){if(e instanceof HTMLElement)if(n){t(e,n)&&o.push(e);for(var s=e.querySelectorAll(n),r=0;r<s.length;r++)o.push(s[r])}else o.push(e)})),o},s.debounceMethod=function(e,t,s){s=s||100;var n=e.prototype[t],o=t+"Timeout";e.prototype[t]=function(){var e=this[o];clearTimeout(e);var t=arguments,r=this;this[o]=setTimeout((function(){n.apply(r,t),delete r[o]}),s)}},s.docReady=function(e){var t=document.readyState;"complete"==t||"interactive"==t?setTimeout(e):document.addEventListener("DOMContentLoaded",e)},s.toDashed=function(e){return e.replace(/(.)([A-Z])/g,(function(e,t,s){return t+"-"+s})).toLowerCase()};var o=e.console;return s.htmlInit=function(t,n){s.docReady((function(){var r=s.toDashed(n),i="data-"+r,u=document.querySelectorAll("["+i+"]"),d=document.querySelectorAll(".js-"+r),l=s.makeArray(u).concat(s.makeArray(d)),a=i+"-options",c=e.jQuery;l.forEach((function(e){var s,r=e.getAttribute(i)||e.getAttribute(a);try{s=r&&JSON.parse(r)}catch(t){return void(o&&o.error("Error parsing "+i+" on "+e.className+": "+t))}var u=new t(e,s);c&&c.data(e,n,u)}))}))},s}(r,e)}.apply(t,n),void 0===o||(e.exports=o)}(window)},"./node_modules/flickity-imagesloaded/flickity-imagesloaded.js":(e,t,s)=>{var n,o;window,n=[s("./node_modules/flickity/js/index.js"),s("./node_modules/imagesloaded/imagesloaded.js")],void 0===(o=function(e,t){return function(e,t,s){"use strict";t.createMethods.push("_createImagesLoaded");var n=t.prototype;return n._createImagesLoaded=function(){this.on("activate",this.imagesLoaded)},n.imagesLoaded=function(){if(this.options.imagesLoaded){var e=this;s(this.slider).on("progress",t)}function t(t,s){var n=e.getParentCell(s.img);e.cellSizeChange(n&&n.element),e.options.freeScroll||e.positionSliderAtSelected()}},t}(0,e,t)}.apply(t,n))||(e.exports=o)},"./node_modules/flickity/js/add-remove-cell.js":(e,t,s)=>{var n,o;window,n=[s("./node_modules/flickity/js/flickity.js"),s("./node_modules/fizzy-ui-utils/utils.js")],void 0===(o=function(e,t){return function(e,t,s){"use strict";function n(e){var t=document.createDocumentFragment();return e.forEach((function(e){t.appendChild(e.element)})),t}var o=t.prototype;return o.insert=function(e,t){var s=this._makeCells(e);if(s&&s.length){var o=this.cells.length;t=void 0===t?o:t;var r=n(s),i=t==o;if(i)this.slider.appendChild(r);else{var u=this.cells[t].element;this.slider.insertBefore(r,u)}if(0===t)this.cells=s.concat(this.cells);else if(i)this.cells=this.cells.concat(s);else{var d=this.cells.splice(t,o-t);this.cells=this.cells.concat(s).concat(d)}this._sizeCells(s),this.cellChange(t,!0)}},o.append=function(e){this.insert(e,this.cells.length)},o.prepend=function(e){this.insert(e,0)},o.remove=function(e){var t=this.getCells(e);if(t&&t.length){var n=this.cells.length-1;t.forEach((function(e){e.remove();var t=this.cells.indexOf(e);n=Math.min(t,n),s.removeFrom(this.cells,e)}),this),this.cellChange(n,!0)}},o.cellSizeChange=function(e){var t=this.getCell(e);if(t){t.getSize();var s=this.cells.indexOf(t);this.cellChange(s)}},o.cellChange=function(e,t){var s=this.selectedElement;this._positionCells(e),this._getWrapShiftCells(),this.setGallerySize();var n=this.getCell(s);n&&(this.selectedIndex=this.getCellSlideIndex(n)),this.selectedIndex=Math.min(this.slides.length-1,this.selectedIndex),this.emitEvent("cellChange",[e]),this.select(this.selectedIndex),t&&this.positionSliderAtSelected()},t}(0,e,t)}.apply(t,n))||(e.exports=o)},"./node_modules/flickity/js/animate.js":(e,t,s)=>{var n,o;window,n=[s("./node_modules/fizzy-ui-utils/utils.js")],void 0===(o=function(e){return function(e,t){"use strict";var s={startAnimation:function(){this.isAnimating||(this.isAnimating=!0,this.restingFrames=0,this.animate())},animate:function(){this.applyDragForce(),this.applySelectedAttraction();var e=this.x;if(this.integratePhysics(),this.positionSlider(),this.settle(e),this.isAnimating){var t=this;requestAnimationFrame((function(){t.animate()}))}},positionSlider:function(){var e=this.x;this.options.wrapAround&&this.cells.length>1&&(e=t.modulo(e,this.slideableWidth),e-=this.slideableWidth,this.shiftWrapCells(e)),this.setTranslateX(e,this.isAnimating),this.dispatchScrollEvent()},setTranslateX:function(e,t){e+=this.cursorPosition,e=this.options.rightToLeft?-e:e;var s=this.getPositionValue(e);this.slider.style.transform=t?"translate3d("+s+",0,0)":"translateX("+s+")"},dispatchScrollEvent:function(){var e=this.slides[0];if(e){var t=-this.x-e.target,s=t/this.slidesWidth;this.dispatchEvent("scroll",null,[s,t])}},positionSliderAtSelected:function(){this.cells.length&&(this.x=-this.selectedSlide.target,this.velocity=0,this.positionSlider())},getPositionValue:function(e){return this.options.percentPosition?.01*Math.round(e/this.size.innerWidth*1e4)+"%":Math.round(e)+"px"},settle:function(e){!this.isPointerDown&&Math.round(100*this.x)==Math.round(100*e)&&this.restingFrames++,this.restingFrames>2&&(this.isAnimating=!1,delete this.isFreeScrolling,this.positionSlider(),this.dispatchEvent("settle",null,[this.selectedIndex]))},shiftWrapCells:function(e){var t=this.cursorPosition+e;this._shiftCells(this.beforeShiftCells,t,-1);var s=this.size.innerWidth-(e+this.slideableWidth+this.cursorPosition);this._shiftCells(this.afterShiftCells,s,1)},_shiftCells:function(e,t,s){for(var n=0;n<e.length;n++){var o=e[n],r=t>0?s:0;o.wrapShift(r),t-=o.size.outerWidth}},_unshiftCells:function(e){if(e&&e.length)for(var t=0;t<e.length;t++)e[t].wrapShift(0)},integratePhysics:function(){this.x+=this.velocity,this.velocity*=this.getFrictionFactor()},applyForce:function(e){this.velocity+=e},getFrictionFactor:function(){return 1-this.options[this.isFreeScrolling?"freeScrollFriction":"friction"]},getRestingPosition:function(){return this.x+this.velocity/(1-this.getFrictionFactor())},applyDragForce:function(){if(this.isDraggable&&this.isPointerDown){var e=this.dragX-this.x-this.velocity;this.applyForce(e)}},applySelectedAttraction:function(){if((!this.isDraggable||!this.isPointerDown)&&!this.isFreeScrolling&&this.slides.length){var e=(-1*this.selectedSlide.target-this.x)*this.options.selectedAttraction;this.applyForce(e)}}};return s}(0,e)}.apply(t,n))||(e.exports=o)},"./node_modules/flickity/js/cell.js":(e,t,s)=>{var n,o;window,n=[s("./node_modules/get-size/get-size.js")],void 0===(o=function(e){return function(e,t){"use strict";var s="a[href]:not(.invisible-redundant-link), button, input, textarea, select, details, [tabindex]:not(.invisible-redundant-link)";function n(e,t){this.element=e,this.parent=t,this.create()}var o=n.prototype;function r(e){e.querySelectorAll(s).forEach((function(e){e.removeAttribute("aria-hidden"),e.setAttribute("tabindex","0")}))}function i(e){e.querySelectorAll(s).forEach((function(e){e.setAttribute("aria-hidden","true"),e.setAttribute("tabindex","-1")}))}return o.create=function(){this.element.style.position="absolute",this.element.setAttribute("aria-hidden","true"),i(this.element),this.x=0,this.shift=0,this.element.style[this.parent.originSide]=0},o.destroy=function(){this.unselect(),this.element.style.position="";var e=this.parent.originSide;this.element.style[e]="",this.element.style.transform="",this.element.removeAttribute("aria-hidden")},o.getSize=function(){this.size=t(this.element)},o.setPosition=function(e){this.x=e,this.updateTarget(),this.renderPosition(e)},o.updateTarget=o.setDefaultTarget=function(){var e="left"==this.parent.originSide?"marginLeft":"marginRight";this.target=this.x+this.size[e]+this.size.width*this.parent.cellAlign},o.renderPosition=function(e){var t="left"===this.parent.originSide?1:-1,s=this.parent.options.percentPosition?e*t*(this.parent.size.innerWidth/this.size.width):e*t;this.element.style.transform="translateX("+this.parent.getPositionValue(s)+")"},o.select=function(){this.element.classList.add("is-selected"),r(this.element),this.element.removeAttribute("aria-hidden")},o.unselect=function(){this.element.classList.remove("is-selected"),i(this.element),this.element.setAttribute("aria-hidden","true")},o.wrapShift=function(e){this.shift=e,this.renderPosition(this.x+this.parent.slideableWidth*e)},o.remove=function(){this.element.parentNode.removeChild(this.element)},n}(0,e)}.apply(t,n))||(e.exports=o)},"./node_modules/flickity/js/drag.js":(e,t,s)=>{var n,o;!function(r,i){n=[s("./node_modules/flickity/js/flickity.js"),s("./node_modules/unidragger/unidragger.js"),s("./node_modules/fizzy-ui-utils/utils.js")],o=function(e,t,s){return function(e,t,s,n){"use strict";n.extend(t.defaults,{draggable:">1",dragThreshold:3}),t.createMethods.push("_createDrag");var o=t.prototype;n.extend(o,s.prototype),o._touchActionValue="pan-y",o._createDrag=function(){this.on("activate",this.onActivateDrag),this.on("uiChange",this._uiChangeDrag),this.on("deactivate",this.onDeactivateDrag),this.on("cellChange",this.updateDraggable)},o.onActivateDrag=function(){this.handles=[this.viewport],this.bindHandles(),this.updateDraggable()},o.onDeactivateDrag=function(){this.unbindHandles(),this.element.classList.remove("is-draggable")},o.updateDraggable=function(){">1"==this.options.draggable?this.isDraggable=this.slides.length>1:this.isDraggable=this.options.draggable,this.isDraggable?this.element.classList.add("is-draggable"):this.element.classList.remove("is-draggable")},o.bindDrag=function(){this.options.draggable=!0,this.updateDraggable()},o.unbindDrag=function(){this.options.draggable=!1,this.updateDraggable()},o._uiChangeDrag=function(){delete this.isFreeScrolling},o.pointerDown=function(t,s){this.isDraggable?this.okayPointerDown(t)&&(this._pointerDownPreventDefault(t),this.pointerDownFocus(t),document.activeElement!=this.element&&this.pointerDownBlur(),this.dragX=this.x,this.viewport.classList.add("is-pointer-down"),this.pointerDownScroll=i(),e.addEventListener("scroll",this),this._pointerDownDefault(t,s)):this._pointerDownDefault(t,s)},o._pointerDownDefault=function(e,t){this.pointerDownPointer={pageX:t.pageX,pageY:t.pageY},this._bindPostStartEvents(e),this.dispatchEvent("pointerDown",e,[t])};var r={INPUT:!0,TEXTAREA:!0,SELECT:!0};function i(){return{x:e.pageXOffset,y:e.pageYOffset}}return o.pointerDownFocus=function(e){r[e.target.nodeName]||this.focus()},o._pointerDownPreventDefault=function(e){var t="touchstart"==e.type,s="touch"==e.pointerType,n=r[e.target.nodeName];t||s||n||e.preventDefault()},o.hasDragStarted=function(e){return Math.abs(e.x)>this.options.dragThreshold},o.pointerUp=function(e,t){delete this.isTouchScrolling,this.viewport.classList.remove("is-pointer-down"),this.dispatchEvent("pointerUp",e,[t]),this._dragPointerUp(e,t)},o.pointerDone=function(){e.removeEventListener("scroll",this),delete this.pointerDownScroll},o.dragStart=function(t,s){this.isDraggable&&(this.dragStartPosition=this.x,this.startAnimation(),e.removeEventListener("scroll",this),this.dispatchEvent("dragStart",t,[s]))},o.pointerMove=function(e,t){var s=this._dragPointerMove(e,t);this.dispatchEvent("pointerMove",e,[t,s]),this._dragMove(e,t,s)},o.dragMove=function(e,t,s){if(this.isDraggable){e.preventDefault(),this.previousDragX=this.dragX;var n=this.options.rightToLeft?-1:1;this.options.wrapAround&&(s.x%=this.slideableWidth);var o=this.dragStartPosition+s.x*n;if(!this.options.wrapAround&&this.slides.length){var r=Math.max(-this.slides[0].target,this.dragStartPosition);o=o>r?.5*(o+r):o;var i=Math.min(-this.getLastSlide().target,this.dragStartPosition);o=o<i?.5*(o+i):o}this.dragX=o,this.dragMoveTime=new Date,this.dispatchEvent("dragMove",e,[t,s])}},o.dragEnd=function(e,t){if(this.isDraggable){this.options.freeScroll&&(this.isFreeScrolling=!0);var s=this.dragEndRestingSelect();if(this.options.freeScroll&&!this.options.wrapAround){var n=this.getRestingPosition();this.isFreeScrolling=-n>this.slides[0].target&&-n<this.getLastSlide().target}else this.options.freeScroll||s!=this.selectedIndex||(s+=this.dragEndBoostSelect());delete this.previousDragX,this.isDragSelect=this.options.wrapAround,this.select(s),delete this.isDragSelect,this.dispatchEvent("dragEnd",e,[t])}},o.dragEndRestingSelect=function(){var e=this.getRestingPosition(),t=Math.abs(this.getSlideDistance(-e,this.selectedIndex)),s=this._getClosestResting(e,t,1),n=this._getClosestResting(e,t,-1);return s.distance<n.distance?s.index:n.index},o._getClosestResting=function(e,t,s){for(var n=this.selectedIndex,o=1/0,r=this.options.contain&&!this.options.wrapAround?function(e,t){return e<=t}:function(e,t){return e<t};r(t,o)&&(n+=s,o=t,null!==(t=this.getSlideDistance(-e,n)));)t=Math.abs(t);return{distance:o,index:n-s}},o.getSlideDistance=function(e,t){var s=this.slides.length,o=this.options.wrapAround&&s>1,r=o?n.modulo(t,s):t,i=this.slides[r];if(!i)return null;var u=o?this.slideableWidth*Math.floor(t/s):0;return e-(i.target+u)},o.dragEndBoostSelect=function(){if(void 0===this.previousDragX||!this.dragMoveTime||new Date-this.dragMoveTime>100)return 0;var e=this.getSlideDistance(-this.dragX,this.selectedIndex),t=this.previousDragX-this.dragX;return e>0&&t>0?1:e<0&&t<0?-1:0},o.staticClick=function(e,t){var s=this.getParentCell(e.target),n=s&&s.element,o=s&&this.cells.indexOf(s);this.dispatchEvent("staticClick",e,[t,n,o])},o.onscroll=function(){var e=i(),t=this.pointerDownScroll.x-e.x,s=this.pointerDownScroll.y-e.y;(Math.abs(t)>3||Math.abs(s)>3)&&this._pointerDone()},t}(r,e,t,s)}.apply(t,n),void 0===o||(e.exports=o)}(window)},"./node_modules/flickity/js/flickity.js":(e,t,s)=>{var n,o;!function(r,i){n=[s("./node_modules/ev-emitter/ev-emitter.js"),s("./node_modules/get-size/get-size.js"),s("./node_modules/fizzy-ui-utils/utils.js"),s("./node_modules/flickity/js/cell.js"),s("./node_modules/flickity/js/slide.js"),s("./node_modules/flickity/js/animate.js")],o=function(e,t,s,n,o,i){return function(e,t,s,n,o,r,i){"use strict";var u=e.jQuery,d=e.getComputedStyle,l=e.console;function a(e,t){for(e=n.makeArray(e);e.length;)t.appendChild(e.shift())}var c=0,f={};function h(e,t){var s=n.getQueryElement(e);if(s){if(this.element=s,this.element.flickityGUID){var o=f[this.element.flickityGUID];return o&&o.option(t),o}u&&(this.$element=u(this.element)),this.options=n.extend({},this.constructor.defaults),this.option(t),this._create()}else l&&l.error("Bad element for Flickity: "+(s||e))}h.defaults={accessibility:!0,cellAlign:"center",freeScrollFriction:.075,friction:.28,namespaceJQueryEvents:!0,percentPosition:!0,resize:!0,selectedAttraction:.025,setGallerySize:!0},h.createMethods=[];var m=h.prototype;n.extend(m,t.prototype),m._create=function(){var t=this.guid=++c;for(var s in this.element.flickityGUID=t,f[t]=this,this.selectedIndex=0,this.restingFrames=0,this.x=0,this.velocity=0,this.originSide=this.options.rightToLeft?"right":"left",this.viewport=document.createElement("div"),this.viewport.className="flickity-viewport",this._createSlider(),(this.options.resize||this.options.watchCSS)&&e.addEventListener("resize",this),this.options.on){var n=this.options.on[s];this.on(s,n)}h.createMethods.forEach((function(e){this[e]()}),this),this.options.watchCSS?this.watchCSS():this.activate()},m.option=function(e){n.extend(this.options,e)},m.activate=function(){this.isActive||(this.isActive=!0,this.element.classList.add("flickity-enabled"),this.options.rightToLeft&&this.element.classList.add("flickity-rtl"),this.getSize(),a(this._filterFindCellElements(this.element.children),this.slider),this.viewport.appendChild(this.slider),this.element.appendChild(this.viewport),this.reloadCells(),this.options.accessibility&&(this.element.tabIndex=0,this.element.addEventListener("keydown",this),this.options.autoPlay?this.element.setAttribute("aria-live","off"):this.element.setAttribute("aria-live","assertive")),this.emitEvent("activate"),this.selectInitialIndex(),this.isInitActivated=!0,this.dispatchEvent("ready"))},m._createSlider=function(){var e=document.createElement("div");e.className="flickity-slider",e.style[this.originSide]=0,this.slider=e},m._filterFindCellElements=function(e){return n.filterFindElements(e,this.options.cellSelector)},m.reloadCells=function(){this.cells=this._makeCells(this.slider.children),this.positionCells(),this._getWrapShiftCells(),this.setGallerySize()},m._makeCells=function(e){return this._filterFindCellElements(e).map((function(e){return new o(e,this)}),this)},m.getLastCell=function(){return this.cells[this.cells.length-1]},m.getLastSlide=function(){return this.slides[this.slides.length-1]},m.positionCells=function(){this._sizeCells(this.cells),this._positionCells(0)},m._positionCells=function(e){e=e||0,this.maxCellHeight=e&&this.maxCellHeight||0;var t=0;if(e>0){var s=this.cells[e-1];t=s.x+s.size.outerWidth}for(var n=this.cells.length,o=e;o<n;o++){var r=this.cells[o];r.setPosition(t),t+=r.size.outerWidth,this.maxCellHeight=Math.max(r.size.outerHeight,this.maxCellHeight)}this.slideableWidth=t,this.updateSlides(),this._containSlides(),this.slidesWidth=n?this.getLastSlide().target-this.slides[0].target:0},m._sizeCells=function(e){e.forEach((function(e){e.getSize()}))},m.updateSlides=function(){if(this.slides=[],this.cells.length){var e=new r(this);this.slides.push(e);var t="left"==this.originSide?"marginRight":"marginLeft",s=this._getCanCellFit();this.cells.forEach((function(n,o){if(e.cells.length){var i=e.outerWidth-e.firstMargin+(n.size.outerWidth-n.size[t]);s.call(this,o,i)||(e.updateTarget(),e=new r(this),this.slides.push(e)),e.addCell(n)}else e.addCell(n)}),this),e.updateTarget(),this.updateSelectedSlide()}},m._getCanCellFit=function(){var e=this.options.groupCells;if(!e)return function(){return!1};if("number"==typeof e){var t=parseInt(e,10);return function(e){return e%t!=0}}var s="string"==typeof e&&e.match(/^(\d+)%$/),n=s?parseInt(s[1],10)/100:1;return function(e,t){return t<=(this.size.innerWidth+1)*n}},m._init=m.reposition=function(){this.positionCells(),this.positionSliderAtSelected()},m.getSize=function(){this.size=s(this.element),this.setCellAlign(),this.cursorPosition=this.size.innerWidth*this.cellAlign};var p={center:{left:.5,right:.5},left:{left:0,right:1},right:{right:0,left:1}};m.setCellAlign=function(){var e=p[this.options.cellAlign];this.cellAlign=e?e[this.originSide]:this.options.cellAlign},m.setGallerySize=function(){if(this.options.setGallerySize){var e=this.options.adaptiveHeight&&this.selectedSlide?this.selectedSlide.height:this.maxCellHeight;this.viewport.style.height=e+"px"}},m._getWrapShiftCells=function(){if(this.options.wrapAround){this._unshiftCells(this.beforeShiftCells),this._unshiftCells(this.afterShiftCells);var e=this.cursorPosition,t=this.cells.length-1;this.beforeShiftCells=this._getGapCells(e,t,-1),e=this.size.innerWidth-this.cursorPosition,this.afterShiftCells=this._getGapCells(e,0,1)}},m._getGapCells=function(e,t,s){for(var n=[];e>0;){var o=this.cells[t];if(!o)break;n.push(o),t+=s,e-=o.size.outerWidth}return n},m._containSlides=function(){if(this.options.contain&&!this.options.wrapAround&&this.cells.length){var e=this.options.rightToLeft,t=e?"marginRight":"marginLeft",s=e?"marginLeft":"marginRight",n=this.slideableWidth-this.getLastCell().size[s],o=n<this.size.innerWidth,r=this.cursorPosition+this.cells[0].size[t],i=n-this.size.innerWidth*(1-this.cellAlign);this.slides.forEach((function(e){o?e.target=n*this.cellAlign:(e.target=Math.max(e.target,r),e.target=Math.min(e.target,i))}),this)}},m.dispatchEvent=function(e,t,s){var n=t?[t].concat(s):s;if(this.emitEvent(e,n),u&&this.$element){var o=e+=this.options.namespaceJQueryEvents?".flickity":"";if(t){var r=new u.Event(t);r.type=e,o=r}this.$element.trigger(o,s)}},m.select=function(e,t,s){if(this.isActive&&(e=parseInt(e,10),this._wrapSelect(e),(this.options.wrapAround||t)&&(e=n.modulo(e,this.slides.length)),this.slides[e])){var o=this.selectedIndex;this.selectedIndex=e,this.updateSelectedSlide(),s?this.positionSliderAtSelected():this.startAnimation(),this.options.adaptiveHeight&&this.setGallerySize(),this.dispatchEvent("select",null,[e]),e!=o&&this.dispatchEvent("change",null,[e]),this.dispatchEvent("cellSelect")}},m._wrapSelect=function(e){var t=this.slides.length;if(!(this.options.wrapAround&&t>1))return e;var s=n.modulo(e,t),o=Math.abs(s-this.selectedIndex),r=Math.abs(s+t-this.selectedIndex),i=Math.abs(s-t-this.selectedIndex);!this.isDragSelect&&r<o?e+=t:!this.isDragSelect&&i<o&&(e-=t),e<0?this.x-=this.slideableWidth:e>=t&&(this.x+=this.slideableWidth)},m.previous=function(e,t){this.select(this.selectedIndex-1,e,t)},m.next=function(e,t){this.select(this.selectedIndex+1,e,t)},m.updateSelectedSlide=function(){var e=this.slides[this.selectedIndex];e&&(this.unselectSelectedSlide(),this.selectedSlide=e,e.select(),this.selectedCells=e.cells,this.selectedElements=e.getCellElements(),this.selectedCell=e.cells[0],this.selectedElement=this.selectedElements[0])},m.unselectSelectedSlide=function(){this.selectedSlide&&this.selectedSlide.unselect()},m.selectInitialIndex=function(){var e=this.options.initialIndex;if(this.isInitActivated)this.select(this.selectedIndex,!1,!0);else{if(e&&"string"==typeof e)if(this.queryCell(e))return void this.selectCell(e,!1,!0);var t=0;e&&this.slides[e]&&(t=e),this.select(t,!1,!0)}},m.selectCell=function(e,t,s){var n=this.queryCell(e);if(n){var o=this.getCellSlideIndex(n);this.select(o,t,s)}},m.getCellSlideIndex=function(e){for(var t=0;t<this.slides.length;t++){if(-1!=this.slides[t].cells.indexOf(e))return t}},m.getCell=function(e){for(var t=0;t<this.cells.length;t++){var s=this.cells[t];if(s.element==e)return s}},m.getCells=function(e){e=n.makeArray(e);var t=[];return e.forEach((function(e){var s=this.getCell(e);s&&t.push(s)}),this),t},m.getCellElements=function(){return this.cells.map((function(e){return e.element}))},m.getParentCell=function(e){var t=this.getCell(e);return t||(e=n.getParent(e,".flickity-slider > *"),this.getCell(e))},m.getAdjacentCellElements=function(e,t){if(!e)return this.selectedSlide.getCellElements();t=void 0===t?this.selectedIndex:t;var s=this.slides.length;if(1+2*e>=s)return this.getCellElements();for(var o=[],r=t-e;r<=t+e;r++){var i=this.options.wrapAround?n.modulo(r,s):r,u=this.slides[i];u&&(o=o.concat(u.getCellElements()))}return o},m.queryCell=function(e){if("number"==typeof e)return this.cells[e];if("string"==typeof e){if(e.match(/^[#.]?[\d/]/))return;e=this.element.querySelector(e)}return this.getCell(e)},m.uiChange=function(){this.emitEvent("uiChange")},m.childUIPointerDown=function(e){"touchstart"!=e.type&&e.preventDefault(),this.focus()},m.onresize=function(){this.watchCSS(),this.resize()},n.debounceMethod(h,"onresize",150),m.resize=function(){if(this.isActive&&!this.isAnimating&&!this.isDragging){this.getSize(),this.options.wrapAround&&(this.x=n.modulo(this.x,this.slideableWidth)),this.positionCells(),this._getWrapShiftCells(),this.setGallerySize(),this.emitEvent("resize");var e=this.selectedElements&&this.selectedElements[0];this.selectCell(e,!1,!0)}},m.watchCSS=function(){this.options.watchCSS&&(-1!=d(this.element,":after").content.indexOf("flickity")?this.activate():this.deactivate())},m.onkeydown=function(e){var t=document.activeElement&&document.activeElement!=this.element;if(this.options.accessibility||!t){var s=h.keyboardHandlers[e.keyCode];s&&s.call(this)}},h.keyboardHandlers={37:function(){var e=this.options.rightToLeft?"next":"previous";this.uiChange(),this[e]()},39:function(){var e=this.options.rightToLeft?"previous":"next";this.uiChange(),this[e]()}},m.focus=function(){var t=e.pageYOffset;this.element.focus({preventScroll:!0}),e.pageYOffset!=t&&e.scrollTo(e.pageXOffset,t)},m.deactivate=function(){this.isActive&&(this.element.classList.remove("flickity-enabled"),this.element.classList.remove("flickity-rtl"),this.unselectSelectedSlide(),this.cells.forEach((function(e){e.destroy()})),this.element.removeChild(this.viewport),a(this.slider.children,this.element),this.options.accessibility&&(this.element.removeAttribute("tabIndex"),this.element.removeEventListener("keydown",this)),this.isActive=!1,this.emitEvent("deactivate"))},m.destroy=function(){this.deactivate(),e.removeEventListener("resize",this),this.allOff(),this.emitEvent("destroy"),u&&this.$element&&u.removeData(this.element,"flickity"),delete this.element.flickityGUID,delete f[this.guid]},n.extend(m,i),h.data=function(e){var t=(e=n.getQueryElement(e))&&e.flickityGUID;return t&&f[t]},n.htmlInit(h,"flickity"),u&&u.bridget&&u.bridget("flickity",h);return h.setJQuery=function(e){u=e},h.Cell=o,h.Slide=r,h}(r,e,t,s,n,o,i)}.apply(t,n),void 0===o||(e.exports=o)}(window)},"./node_modules/flickity/js/index.js":(e,t,s)=>{var n,o,r;window,o=[s("./node_modules/flickity/js/flickity.js"),s("./node_modules/flickity/js/drag.js"),s("./node_modules/flickity/js/prev-next-button.js"),s("./node_modules/flickity/js/page-dots.js"),s("./node_modules/flickity/js/player.js"),s("./node_modules/flickity/js/add-remove-cell.js"),s("./node_modules/flickity/js/lazyload.js")],void 0===(r="function"==typeof(n=function(e){return e})?n.apply(t,o):n)||(e.exports=r)},"./node_modules/flickity/js/lazyload.js":(e,t,s)=>{var n,o;window,n=[s("./node_modules/flickity/js/flickity.js"),s("./node_modules/fizzy-ui-utils/utils.js")],void 0===(o=function(e,t){return function(e,t,s){"use strict";t.createMethods.push("_createLazyload");var n=t.prototype;function o(e){if("IMG"==e.nodeName){var t=e.getAttribute("data-flickity-lazyload"),n=e.getAttribute("data-flickity-lazyload-src"),o=e.getAttribute("data-flickity-lazyload-srcset");if(t||n||o)return[e]}var r="img[data-flickity-lazyload], img[data-flickity-lazyload-src], img[data-flickity-lazyload-srcset]",i=e.querySelectorAll(r);return s.makeArray(i)}function r(e,t){this.img=e,this.flickity=t,this.load()}return n._createLazyload=function(){this.on("select",this.lazyLoad)},n.lazyLoad=function(){var e=this.options.lazyLoad;if(e){var t="number"==typeof e?e:0,s=this.getAdjacentCellElements(t),n=[];s.forEach((function(e){var t=o(e);n=n.concat(t)})),n.forEach((function(e){new r(e,this)}),this)}},r.prototype.handleEvent=s.handleEvent,r.prototype.load=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this);var e=this.img.getAttribute("data-flickity-lazyload")||this.img.getAttribute("data-flickity-lazyload-src"),t=this.img.getAttribute("data-flickity-lazyload-srcset");this.img.src=e,t&&this.img.setAttribute("srcset",t),this.img.removeAttribute("data-flickity-lazyload"),this.img.removeAttribute("data-flickity-lazyload-src"),this.img.removeAttribute("data-flickity-lazyload-srcset")},r.prototype.onload=function(e){this.complete(e,"flickity-lazyloaded")},r.prototype.onerror=function(e){this.complete(e,"flickity-lazyerror")},r.prototype.complete=function(e,t){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this);var s=this.flickity.getParentCell(this.img),n=s&&s.element;this.flickity.cellSizeChange(n),this.img.classList.add(t),this.flickity.dispatchEvent("lazyLoad",e,n)},t.LazyLoader=r,t}(0,e,t)}.apply(t,n))||(e.exports=o)},"./node_modules/flickity/js/page-dots.js":(e,t,s)=>{var n,o;window,n=[s("./node_modules/flickity/js/flickity.js"),s("./node_modules/unipointer/unipointer.js"),s("./node_modules/fizzy-ui-utils/utils.js")],void 0===(o=function(e,t,s){return function(e,t,s,n){"use strict";function o(e){this.parent=e,this._create()}o.prototype=Object.create(s.prototype),o.prototype._create=function(){this.holder=document.createElement("ol"),this.holder.className="flickity-page-dots",this.dots=[],this.handleClick=this.onClick.bind(this),this.on("pointerDown",this.parent.childUIPointerDown.bind(this.parent))},o.prototype.activate=function(){this.setDots(),this.holder.addEventListener("click",this.handleClick),this.bindStartEvent(this.holder),this.parent.element.appendChild(this.holder)},o.prototype.deactivate=function(){this.holder.removeEventListener("click",this.handleClick),this.unbindStartEvent(this.holder),this.parent.element.removeChild(this.holder)},o.prototype.setDots=function(){var e=this.parent.slides.length-this.dots.length;e>0?this.addDots(e):e<0&&this.removeDots(-e)},o.prototype.addDots=function(e){for(var t=document.createDocumentFragment(),s=[],n=this.dots.length,o=n+e,r=n;r<o;r++){var i=document.createElement("li");i.className="dot",i.setAttribute("aria-label","Page dot "+(r+1)),t.appendChild(i),s.push(i)}this.holder.appendChild(t),this.dots=this.dots.concat(s)},o.prototype.removeDots=function(e){this.dots.splice(this.dots.length-e,e).forEach((function(e){this.holder.removeChild(e)}),this)},o.prototype.updateSelected=function(){this.selectedDot&&(this.selectedDot.className="dot",this.selectedDot.removeAttribute("aria-current")),this.dots.length&&(this.selectedDot=this.dots[this.parent.selectedIndex],this.selectedDot.className="dot is-selected",this.selectedDot.setAttribute("aria-current","step"))},o.prototype.onTap=o.prototype.onClick=function(e){var t=e.target;if("LI"==t.nodeName){this.parent.uiChange();var s=this.dots.indexOf(t);this.parent.select(s)}},o.prototype.destroy=function(){this.deactivate(),this.allOff()},t.PageDots=o,n.extend(t.defaults,{pageDots:!0}),t.createMethods.push("_createPageDots");var r=t.prototype;return r._createPageDots=function(){this.options.pageDots&&(this.pageDots=new o(this),this.on("activate",this.activatePageDots),this.on("select",this.updateSelectedPageDots),this.on("cellChange",this.updatePageDots),this.on("resize",this.updatePageDots),this.on("deactivate",this.deactivatePageDots))},r.activatePageDots=function(){this.pageDots.activate()},r.updateSelectedPageDots=function(){this.pageDots.updateSelected()},r.updatePageDots=function(){this.pageDots.setDots()},r.deactivatePageDots=function(){this.pageDots.deactivate()},t.PageDots=o,t}(0,e,t,s)}.apply(t,n))||(e.exports=o)},"./node_modules/flickity/js/player.js":(e,t,s)=>{var n,o;window,n=[s("./node_modules/ev-emitter/ev-emitter.js"),s("./node_modules/fizzy-ui-utils/utils.js"),s("./node_modules/flickity/js/flickity.js")],void 0===(o=function(e,t,s){return function(e,t,s){"use strict";function n(e){this.parent=e,this.state="stopped",this.onVisibilityChange=this.visibilityChange.bind(this),this.onVisibilityPlay=this.visibilityPlay.bind(this)}n.prototype=Object.create(e.prototype),n.prototype.play=function(){"playing"!=this.state&&(document.hidden?document.addEventListener("visibilitychange",this.onVisibilityPlay):(this.state="playing",document.addEventListener("visibilitychange",this.onVisibilityChange),this.tick()))},n.prototype.tick=function(){if("playing"==this.state){var e=this.parent.options.autoPlay;e="number"==typeof e?e:3e3;var t=this;this.clear(),this.timeout=setTimeout((function(){t.parent.next(!0),t.tick()}),e)}},n.prototype.stop=function(){this.state="stopped",this.clear(),document.removeEventListener("visibilitychange",this.onVisibilityChange)},n.prototype.clear=function(){clearTimeout(this.timeout)},n.prototype.pause=function(){"playing"==this.state&&(this.state="paused",this.clear())},n.prototype.unpause=function(){"paused"==this.state&&this.play()},n.prototype.visibilityChange=function(){this[document.hidden?"pause":"unpause"]()},n.prototype.visibilityPlay=function(){this.play(),document.removeEventListener("visibilitychange",this.onVisibilityPlay)},t.extend(s.defaults,{pauseAutoPlayOnHover:!0}),s.createMethods.push("_createPlayer");var o=s.prototype;return o._createPlayer=function(){this.player=new n(this),this.on("activate",this.activatePlayer),this.on("uiChange",this.stopPlayer),this.on("pointerDown",this.stopPlayer),this.on("deactivate",this.deactivatePlayer)},o.activatePlayer=function(){this.options.autoPlay&&(this.player.play(),this.element.addEventListener("mouseenter",this))},o.playPlayer=function(){this.player.play()},o.stopPlayer=function(){this.player.stop()},o.pausePlayer=function(){this.player.pause()},o.unpausePlayer=function(){this.player.unpause()},o.deactivatePlayer=function(){this.player.stop(),this.element.removeEventListener("mouseenter",this)},o.onmouseenter=function(){this.options.pauseAutoPlayOnHover&&(this.player.pause(),this.element.addEventListener("mouseleave",this))},o.onmouseleave=function(){this.player.unpause(),this.element.removeEventListener("mouseleave",this)},s.Player=n,s}(e,t,s)}.apply(t,n))||(e.exports=o)},"./node_modules/flickity/js/prev-next-button.js":(e,t,s)=>{var n,o;window,n=[s("./node_modules/flickity/js/flickity.js"),s("./node_modules/unipointer/unipointer.js"),s("./node_modules/fizzy-ui-utils/utils.js")],void 0===(o=function(e,t,s){return function(e,t,s,n){"use strict";var o="http://www.w3.org/2000/svg";function r(e,t){this.direction=e,this.parent=t,this._create()}function i(e){return"string"==typeof e?e:"M "+e.x0+",50 L "+e.x1+","+(e.y1+50)+" L "+e.x2+","+(e.y2+50)+" L "+e.x3+",50  L "+e.x2+","+(50-e.y2)+" L "+e.x1+","+(50-e.y1)+" Z"}r.prototype=Object.create(s.prototype),r.prototype._create=function(){this.isEnabled=!0,this.isPrevious=-1==this.direction;var e=this.parent.options.rightToLeft?1:-1;this.isLeft=this.direction==e;var t=this.element=document.createElement("button");t.className="flickity-button flickity-prev-next-button",t.className+=this.isPrevious?" previous":" next",t.setAttribute("type","button"),this.disable(),t.setAttribute("aria-label",this.isPrevious?"Previous Slide":"Next Slide");var s=this.createSVG();t.appendChild(s),this.parent.on("select",this.update.bind(this)),this.on("pointerDown",this.parent.childUIPointerDown.bind(this.parent))},r.prototype.activate=function(){this.bindStartEvent(this.element),this.element.addEventListener("click",this),this.parent.element.appendChild(this.element)},r.prototype.deactivate=function(){this.parent.element.removeChild(this.element),this.unbindStartEvent(this.element),this.element.removeEventListener("click",this)},r.prototype.createSVG=function(){var e=document.createElementNS(o,"svg");e.setAttribute("class","flickity-button-icon"),e.setAttribute("viewBox","0 0 100 100");var t=document.createElementNS(o,"path"),s=i(this.parent.options.arrowShape);return t.setAttribute("d",s),t.setAttribute("class","arrow"),this.isLeft||t.setAttribute("transform","translate(100, 100) rotate(180) "),e.appendChild(t),e},r.prototype.handleEvent=n.handleEvent,r.prototype.onclick=function(){if(this.isEnabled){this.parent.uiChange();var e=this.isPrevious?"previous":"next";this.parent[e]()}},r.prototype.enable=function(){this.isEnabled||(this.element.disabled=!1,this.isEnabled=!0)},r.prototype.disable=function(){this.isEnabled&&(this.element.disabled=!0,this.isEnabled=!1)},r.prototype.update=function(){var e=this.parent.slides;if(this.parent.options.wrapAround&&e.length>1)this.enable();else{var t=e.length?e.length-1:0,s=this.isPrevious?0:t;this[this.parent.selectedIndex==s?"disable":"enable"]()}},r.prototype.destroy=function(){this.deactivate(),this.allOff()},n.extend(t.defaults,{prevNextButtons:!0,arrowShape:{x0:10,x1:60,y1:50,x2:70,y2:40,x3:30}}),t.createMethods.push("_createPrevNextButtons");var u=t.prototype;return u._createPrevNextButtons=function(){this.options.prevNextButtons&&(this.prevButton=new r(-1,this),this.nextButton=new r(1,this),this.on("activate",this.activatePrevNextButtons))},u.activatePrevNextButtons=function(){this.prevButton.activate(),this.nextButton.activate(),this.on("deactivate",this.deactivatePrevNextButtons)},u.deactivatePrevNextButtons=function(){this.prevButton.deactivate(),this.nextButton.deactivate(),this.off("deactivate",this.deactivatePrevNextButtons)},t.PrevNextButton=r,t}(0,e,t,s)}.apply(t,n))||(e.exports=o)},"./node_modules/flickity/js/slide.js":(e,t,s)=>{var n,o;window,void 0===(o="function"==typeof(n=function(){"use strict";function e(e){this.parent=e,this.isOriginLeft="left"==e.originSide,this.cells=[],this.outerWidth=0,this.height=0}var t=e.prototype;return t.addCell=function(e){if(this.cells.push(e),this.outerWidth+=e.size.outerWidth,this.height=Math.max(e.size.outerHeight,this.height),1==this.cells.length){this.x=e.x;var t=this.isOriginLeft?"marginLeft":"marginRight";this.firstMargin=e.size[t]}},t.updateTarget=function(){var e=this.isOriginLeft?"marginRight":"marginLeft",t=this.getLastCell(),s=t?t.size[e]:0,n=this.outerWidth-(this.firstMargin+s);this.target=this.x+this.firstMargin+n*this.parent.cellAlign},t.getLastCell=function(){return this.cells[this.cells.length-1]},t.select=function(){this.cells.forEach((function(e){e.select()}))},t.unselect=function(){this.cells.forEach((function(e){e.unselect()}))},t.getCellElements=function(){return this.cells.map((function(e){return e.element}))},e})?n.call(t,s,t,e):n)||(e.exports=o)},"./node_modules/get-size/get-size.js":(e,t,s)=>{var n,o;window,void 0===(o="function"==typeof(n=function(){"use strict";function e(e){var t=parseFloat(e);return-1==e.indexOf("%")&&!isNaN(t)&&t}function t(){}var s="undefined"==typeof console?t:function(e){console.error(e)},n=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],o=n.length;function r(){for(var e={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},t=0;t<o;t++)e[n[t]]=0;return e}function i(e){var t=getComputedStyle(e);return t||s("Style returned "+t+". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1"),t}var u,d=!1;function l(){if(!d){d=!0;var t=document.createElement("div");t.style.width="200px",t.style.padding="1px 2px 3px 4px",t.style.borderStyle="solid",t.style.borderWidth="1px 2px 3px 4px",t.style.boxSizing="border-box";var s=document.body||document.documentElement;s.appendChild(t);var n=i(t);u=200==Math.round(e(n.width)),a.isBoxSizeOuter=u,s.removeChild(t)}}function a(t){if(l(),"string"==typeof t&&(t=document.querySelector(t)),t&&"object"==typeof t&&t.nodeType){var s=i(t);if("none"==s.display)return r();var d={};d.width=t.offsetWidth,d.height=t.offsetHeight;for(var a=d.isBorderBox="border-box"==s.boxSizing,c=0;c<o;c++){var f=n[c],h=s[f],m=parseFloat(h);d[f]=isNaN(m)?0:m}var p=d.paddingLeft+d.paddingRight,v=d.paddingTop+d.paddingBottom,g=d.marginLeft+d.marginRight,_=d.marginTop+d.marginBottom,y=d.borderLeftWidth+d.borderRightWidth,j=d.borderTopWidth+d.borderBottomWidth,b=a&&u,w=e(s.width);!1!==w&&(d.width=w+(b?0:p+y));var E=e(s.height);return!1!==E&&(d.height=E+(b?0:v+j)),d.innerWidth=d.width-(p+y),d.innerHeight=d.height-(v+j),d.outerWidth=d.width+g,d.outerHeight=d.height+_,d}}return a})?n.call(t,s,t,e):n)||(e.exports=o)},"./node_modules/imagesloaded/imagesloaded.js":function(e,t,s){var n,o;!function(r,i){"use strict";n=[s("./node_modules/ev-emitter/ev-emitter.js")],o=function(e){return function(e,t){var s=e.jQuery,n=e.console;function o(e,t){for(var s in t)e[s]=t[s];return e}var r=Array.prototype.slice;function i(e){return Array.isArray(e)?e:"object"==typeof e&&"number"==typeof e.length?r.call(e):[e]}function u(e,t,r){if(!(this instanceof u))return new u(e,t,r);var d=e;"string"==typeof e&&(d=document.querySelectorAll(e)),d?(this.elements=i(d),this.options=o({},this.options),"function"==typeof t?r=t:o(this.options,t),r&&this.on("always",r),this.getImages(),s&&(this.jqDeferred=new s.Deferred),setTimeout(this.check.bind(this))):n.error("Bad element for imagesLoaded "+(d||e))}u.prototype=Object.create(t.prototype),u.prototype.options={},u.prototype.getImages=function(){this.images=[],this.elements.forEach(this.addElementImages,this)},u.prototype.addElementImages=function(e){"IMG"==e.nodeName&&this.addImage(e),!0===this.options.background&&this.addElementBackgroundImages(e);var t=e.nodeType;if(t&&d[t]){for(var s=e.querySelectorAll("img"),n=0;n<s.length;n++){var o=s[n];this.addImage(o)}if("string"==typeof this.options.background){var r=e.querySelectorAll(this.options.background);for(n=0;n<r.length;n++){var i=r[n];this.addElementBackgroundImages(i)}}}};var d={1:!0,9:!0,11:!0};function l(e){this.img=e}function a(e,t){this.url=e,this.element=t,this.img=new Image}return u.prototype.addElementBackgroundImages=function(e){var t=getComputedStyle(e);if(t)for(var s=/url\((['"])?(.*?)\1\)/gi,n=s.exec(t.backgroundImage);null!==n;){var o=n&&n[2];o&&this.addBackground(o,e),n=s.exec(t.backgroundImage)}},u.prototype.addImage=function(e){var t=new l(e);this.images.push(t)},u.prototype.addBackground=function(e,t){var s=new a(e,t);this.images.push(s)},u.prototype.check=function(){var e=this;function t(t,s,n){setTimeout((function(){e.progress(t,s,n)}))}this.progressedCount=0,this.hasAnyBroken=!1,this.images.length?this.images.forEach((function(e){e.once("progress",t),e.check()})):this.complete()},u.prototype.progress=function(e,t,s){this.progressedCount++,this.hasAnyBroken=this.hasAnyBroken||!e.isLoaded,this.emitEvent("progress",[this,e,t]),this.jqDeferred&&this.jqDeferred.notify&&this.jqDeferred.notify(this,e),this.progressedCount==this.images.length&&this.complete(),this.options.debug&&n&&n.log("progress: "+s,e,t)},u.prototype.complete=function(){var e=this.hasAnyBroken?"fail":"done";if(this.isComplete=!0,this.emitEvent(e,[this]),this.emitEvent("always",[this]),this.jqDeferred){var t=this.hasAnyBroken?"reject":"resolve";this.jqDeferred[t](this)}},l.prototype=Object.create(t.prototype),l.prototype.check=function(){this.getIsImageComplete()?this.confirm(0!==this.img.naturalWidth,"naturalWidth"):(this.proxyImage=new Image,this.proxyImage.addEventListener("load",this),this.proxyImage.addEventListener("error",this),this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.proxyImage.src=this.img.src)},l.prototype.getIsImageComplete=function(){return this.img.complete&&this.img.naturalWidth},l.prototype.confirm=function(e,t){this.isLoaded=e,this.emitEvent("progress",[this,this.img,t])},l.prototype.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},l.prototype.onload=function(){this.confirm(!0,"onload"),this.unbindEvents()},l.prototype.onerror=function(){this.confirm(!1,"onerror"),this.unbindEvents()},l.prototype.unbindEvents=function(){this.proxyImage.removeEventListener("load",this),this.proxyImage.removeEventListener("error",this),this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},a.prototype=Object.create(l.prototype),a.prototype.check=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.img.src=this.url,this.getIsImageComplete()&&(this.confirm(0!==this.img.naturalWidth,"naturalWidth"),this.unbindEvents())},a.prototype.unbindEvents=function(){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},a.prototype.confirm=function(e,t){this.isLoaded=e,this.emitEvent("progress",[this,this.element,t])},u.makeJQueryPlugin=function(t){(t=t||e.jQuery)&&((s=t).fn.imagesLoaded=function(e,t){return new u(this,e,t).jqDeferred.promise(s(this))})},u.makeJQueryPlugin(),u}(r,e)}.apply(t,n),void 0===o||(e.exports=o)}("undefined"!=typeof window?window:this)},"./node_modules/intersection-observer/intersection-observer.js":()=>{!function(){"use strict";if("object"==typeof window)if("IntersectionObserver"in window&&"IntersectionObserverEntry"in window&&"intersectionRatio"in window.IntersectionObserverEntry.prototype)"isIntersecting"in window.IntersectionObserverEntry.prototype||Object.defineProperty(window.IntersectionObserverEntry.prototype,"isIntersecting",{get:function(){return this.intersectionRatio>0}});else{var e=window.document,t=[];n.prototype.THROTTLE_TIMEOUT=100,n.prototype.POLL_INTERVAL=null,n.prototype.USE_MUTATION_OBSERVER=!0,n.prototype.observe=function(e){if(!this._observationTargets.some((function(t){return t.element==e}))){if(!e||1!=e.nodeType)throw new Error("target must be an Element");this._registerInstance(),this._observationTargets.push({element:e,entry:null}),this._monitorIntersections(),this._checkForIntersections()}},n.prototype.unobserve=function(e){this._observationTargets=this._observationTargets.filter((function(t){return t.element!=e})),this._observationTargets.length||(this._unmonitorIntersections(),this._unregisterInstance())},n.prototype.disconnect=function(){this._observationTargets=[],this._unmonitorIntersections(),this._unregisterInstance()},n.prototype.takeRecords=function(){var e=this._queuedEntries.slice();return this._queuedEntries=[],e},n.prototype._initThresholds=function(e){var t=e||[0];return Array.isArray(t)||(t=[t]),t.sort().filter((function(e,t,s){if("number"!=typeof e||isNaN(e)||e<0||e>1)throw new Error("threshold must be a number between 0 and 1 inclusively");return e!==s[t-1]}))},n.prototype._parseRootMargin=function(e){var t=(e||"0px").split(/\s+/).map((function(e){var t=/^(-?\d*\.?\d+)(px|%)$/.exec(e);if(!t)throw new Error("rootMargin must be specified in pixels or percent");return{value:parseFloat(t[1]),unit:t[2]}}));return t[1]=t[1]||t[0],t[2]=t[2]||t[0],t[3]=t[3]||t[1],t},n.prototype._monitorIntersections=function(){this._monitoringIntersections||(this._monitoringIntersections=!0,this.POLL_INTERVAL?this._monitoringInterval=setInterval(this._checkForIntersections,this.POLL_INTERVAL):(o(window,"resize",this._checkForIntersections,!0),o(e,"scroll",this._checkForIntersections,!0),this.USE_MUTATION_OBSERVER&&"MutationObserver"in window&&(this._domObserver=new MutationObserver(this._checkForIntersections),this._domObserver.observe(e,{attributes:!0,childList:!0,characterData:!0,subtree:!0}))))},n.prototype._unmonitorIntersections=function(){this._monitoringIntersections&&(this._monitoringIntersections=!1,clearInterval(this._monitoringInterval),this._monitoringInterval=null,r(window,"resize",this._checkForIntersections,!0),r(e,"scroll",this._checkForIntersections,!0),this._domObserver&&(this._domObserver.disconnect(),this._domObserver=null))},n.prototype._checkForIntersections=function(){var e=this._rootIsInDom(),t=e?this._getRootRect():{top:0,bottom:0,left:0,right:0,width:0,height:0};this._observationTargets.forEach((function(n){var o=n.element,r=i(o),u=this._rootContainsTarget(o),d=n.entry,l=e&&u&&this._computeTargetAndRootIntersection(o,t),a=n.entry=new s({time:window.performance&&performance.now&&performance.now(),target:o,boundingClientRect:r,rootBounds:t,intersectionRect:l});d?e&&u?this._hasCrossedThreshold(d,a)&&this._queuedEntries.push(a):d&&d.isIntersecting&&this._queuedEntries.push(a):this._queuedEntries.push(a)}),this),this._queuedEntries.length&&this._callback(this.takeRecords(),this)},n.prototype._computeTargetAndRootIntersection=function(t,s){if("none"!=window.getComputedStyle(t).display){for(var n,o,r,u,l,a,c,f,h=i(t),m=d(t),p=!1;!p;){var v=null,g=1==m.nodeType?window.getComputedStyle(m):{};if("none"==g.display)return;if(m==this.root||m==e?(p=!0,v=s):m!=e.body&&m!=e.documentElement&&"visible"!=g.overflow&&(v=i(m)),v&&(n=v,o=h,r=void 0,u=void 0,l=void 0,a=void 0,c=void 0,f=void 0,r=Math.max(n.top,o.top),u=Math.min(n.bottom,o.bottom),l=Math.max(n.left,o.left),a=Math.min(n.right,o.right),f=u-r,!(h=(c=a-l)>=0&&f>=0&&{top:r,bottom:u,left:l,right:a,width:c,height:f})))break;m=d(m)}return h}},n.prototype._getRootRect=function(){var t;if(this.root)t=i(this.root);else{var s=e.documentElement,n=e.body;t={top:0,left:0,right:s.clientWidth||n.clientWidth,width:s.clientWidth||n.clientWidth,bottom:s.clientHeight||n.clientHeight,height:s.clientHeight||n.clientHeight}}return this._expandRectByRootMargin(t)},n.prototype._expandRectByRootMargin=function(e){var t=this._rootMarginValues.map((function(t,s){return"px"==t.unit?t.value:t.value*(s%2?e.width:e.height)/100})),s={top:e.top-t[0],right:e.right+t[1],bottom:e.bottom+t[2],left:e.left-t[3]};return s.width=s.right-s.left,s.height=s.bottom-s.top,s},n.prototype._hasCrossedThreshold=function(e,t){var s=e&&e.isIntersecting?e.intersectionRatio||0:-1,n=t.isIntersecting?t.intersectionRatio||0:-1;if(s!==n)for(var o=0;o<this.thresholds.length;o++){var r=this.thresholds[o];if(r==s||r==n||r<s!=r<n)return!0}},n.prototype._rootIsInDom=function(){return!this.root||u(e,this.root)},n.prototype._rootContainsTarget=function(t){return u(this.root||e,t)},n.prototype._registerInstance=function(){t.indexOf(this)<0&&t.push(this)},n.prototype._unregisterInstance=function(){var e=t.indexOf(this);-1!=e&&t.splice(e,1)},window.IntersectionObserver=n,window.IntersectionObserverEntry=s}function s(e){this.time=e.time,this.target=e.target,this.rootBounds=e.rootBounds,this.boundingClientRect=e.boundingClientRect,this.intersectionRect=e.intersectionRect||{top:0,bottom:0,left:0,right:0,width:0,height:0},this.isIntersecting=!!e.intersectionRect;var t=this.boundingClientRect,s=t.width*t.height,n=this.intersectionRect,o=n.width*n.height;this.intersectionRatio=s?Number((o/s).toFixed(4)):this.isIntersecting?1:0}function n(e,t){var s,n,o,r=t||{};if("function"!=typeof e)throw new Error("callback must be a function");if(r.root&&1!=r.root.nodeType)throw new Error("root must be an Element");this._checkForIntersections=(s=this._checkForIntersections.bind(this),n=this.THROTTLE_TIMEOUT,o=null,function(){o||(o=setTimeout((function(){s(),o=null}),n))}),this._callback=e,this._observationTargets=[],this._queuedEntries=[],this._rootMarginValues=this._parseRootMargin(r.rootMargin),this.thresholds=this._initThresholds(r.threshold),this.root=r.root||null,this.rootMargin=this._rootMarginValues.map((function(e){return e.value+e.unit})).join(" ")}function o(e,t,s,n){"function"==typeof e.addEventListener?e.addEventListener(t,s,n||!1):"function"==typeof e.attachEvent&&e.attachEvent("on"+t,s)}function r(e,t,s,n){"function"==typeof e.removeEventListener?e.removeEventListener(t,s,n||!1):"function"==typeof e.detatchEvent&&e.detatchEvent("on"+t,s)}function i(e){var t;try{t=e.getBoundingClientRect()}catch(e){}return t?(t.width&&t.height||(t={top:t.top,right:t.right,bottom:t.bottom,left:t.left,width:t.right-t.left,height:t.bottom-t.top}),t):{top:0,bottom:0,left:0,right:0,width:0,height:0}}function u(e,t){for(var s=t;s;){if(s==e)return!0;s=d(s)}return!1}function d(e){var t=e.parentNode;return t&&11==t.nodeType&&t.host?t.host:t&&t.assignedSlot?t.assignedSlot.parentNode:t}}()},"./node_modules/smoothscroll-polyfill/dist/smoothscroll.js":e=>{!function(){"use strict";e.exports={polyfill:function(){var e=window,t=document;if(!("scrollBehavior"in t.documentElement.style)||!0===e.__forceSmoothScrollPolyfill__){var s,n=e.HTMLElement||e.Element,o={scroll:e.scroll||e.scrollTo,scrollBy:e.scrollBy,elementScroll:n.prototype.scroll||u,scrollIntoView:n.prototype.scrollIntoView},r=e.performance&&e.performance.now?e.performance.now.bind(e.performance):Date.now,i=(s=e.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(s)?1:0);e.scroll=e.scrollTo=function(){void 0!==arguments[0]&&(!0!==d(arguments[0])?m.call(e,t.body,void 0!==arguments[0].left?~~arguments[0].left:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:e.scrollY||e.pageYOffset):o.scroll.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:e.scrollY||e.pageYOffset))},e.scrollBy=function(){void 0!==arguments[0]&&(d(arguments[0])?o.scrollBy.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):m.call(e,t.body,~~arguments[0].left+(e.scrollX||e.pageXOffset),~~arguments[0].top+(e.scrollY||e.pageYOffset)))},n.prototype.scroll=n.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==d(arguments[0])){var e=arguments[0].left,t=arguments[0].top;m.call(this,this,void 0===e?this.scrollLeft:~~e,void 0===t?this.scrollTop:~~t)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");o.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},n.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==d(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):o.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},n.prototype.scrollIntoView=function(){if(!0!==d(arguments[0])){var s=f(this),n=s.getBoundingClientRect(),r=this.getBoundingClientRect();s!==t.body?(m.call(this,s,s.scrollLeft+r.left-n.left,s.scrollTop+r.top-n.top),"fixed"!==e.getComputedStyle(s).position&&e.scrollBy({left:n.left,top:n.top,behavior:"smooth"})):e.scrollBy({left:r.left,top:r.top,behavior:"smooth"})}else o.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function u(e,t){this.scrollLeft=e,this.scrollTop=t}function d(e){if(null===e||"object"!=typeof e||void 0===e.behavior||"auto"===e.behavior||"instant"===e.behavior)return!0;if("object"==typeof e&&"smooth"===e.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+e.behavior+" is not a valid value for enumeration ScrollBehavior.")}function l(e,t){return"Y"===t?e.clientHeight+i<e.scrollHeight:"X"===t?e.clientWidth+i<e.scrollWidth:void 0}function a(t,s){var n=e.getComputedStyle(t,null)["overflow"+s];return"auto"===n||"scroll"===n}function c(e){var t=l(e,"Y")&&a(e,"Y"),s=l(e,"X")&&a(e,"X");return t||s}function f(e){for(;e!==t.body&&!1===c(e);)e=e.parentNode||e.host;return e}function h(t){var s,n,o,i,u=(r()-t.startTime)/468;i=u=u>1?1:u,s=.5*(1-Math.cos(Math.PI*i)),n=t.startX+(t.x-t.startX)*s,o=t.startY+(t.y-t.startY)*s,t.method.call(t.scrollable,n,o),n===t.x&&o===t.y||e.requestAnimationFrame(h.bind(e,t))}function m(s,n,i){var d,l,a,c,f=r();s===t.body?(d=e,l=e.scrollX||e.pageXOffset,a=e.scrollY||e.pageYOffset,c=o.scroll):(d=s,l=s.scrollLeft,a=s.scrollTop,c=u),h({scrollable:d,method:c,startTime:f,startX:l,startY:a,x:n,y:i})}}}}()},"./node_modules/unidragger/unidragger.js":(e,t,s)=>{var n,o;!function(r,i){n=[s("./node_modules/unipointer/unipointer.js")],o=function(e){return function(e,t){"use strict";function s(){}var n=s.prototype=Object.create(t.prototype);n.bindHandles=function(){this._bindHandles(!0)},n.unbindHandles=function(){this._bindHandles(!1)},n._bindHandles=function(t){for(var s=(t=void 0===t||t)?"addEventListener":"removeEventListener",n=t?this._touchActionValue:"",o=0;o<this.handles.length;o++){var r=this.handles[o];this._bindStartEvent(r,t),r[s]("click",this),e.PointerEvent&&(r.style.touchAction=n)}},n._touchActionValue="none",n.pointerDown=function(e,t){this.okayPointerDown(e)&&(this.pointerDownPointer={pageX:t.pageX,pageY:t.pageY},e.preventDefault(),this.pointerDownBlur(),this._bindPostStartEvents(e),this.emitEvent("pointerDown",[e,t]))};var o={TEXTAREA:!0,INPUT:!0,SELECT:!0,OPTION:!0},r={radio:!0,checkbox:!0,button:!0,submit:!0,image:!0,file:!0};return n.okayPointerDown=function(e){var t=o[e.target.nodeName],s=r[e.target.type],n=!t||s;return n||this._pointerReset(),n},n.pointerDownBlur=function(){var e=document.activeElement;e&&e.blur&&e!=document.body&&e.blur()},n.pointerMove=function(e,t){var s=this._dragPointerMove(e,t);this.emitEvent("pointerMove",[e,t,s]),this._dragMove(e,t,s)},n._dragPointerMove=function(e,t){var s={x:t.pageX-this.pointerDownPointer.pageX,y:t.pageY-this.pointerDownPointer.pageY};return!this.isDragging&&this.hasDragStarted(s)&&this._dragStart(e,t),s},n.hasDragStarted=function(e){return Math.abs(e.x)>3||Math.abs(e.y)>3},n.pointerUp=function(e,t){this.emitEvent("pointerUp",[e,t]),this._dragPointerUp(e,t)},n._dragPointerUp=function(e,t){this.isDragging?this._dragEnd(e,t):this._staticClick(e,t)},n._dragStart=function(e,t){this.isDragging=!0,this.isPreventingClicks=!0,this.dragStart(e,t)},n.dragStart=function(e,t){this.emitEvent("dragStart",[e,t])},n._dragMove=function(e,t,s){this.isDragging&&this.dragMove(e,t,s)},n.dragMove=function(e,t,s){e.preventDefault(),this.emitEvent("dragMove",[e,t,s])},n._dragEnd=function(e,t){this.isDragging=!1,setTimeout(function(){delete this.isPreventingClicks}.bind(this)),this.dragEnd(e,t)},n.dragEnd=function(e,t){this.emitEvent("dragEnd",[e,t])},n.onclick=function(e){this.isPreventingClicks&&e.preventDefault()},n._staticClick=function(e,t){this.isIgnoringMouseUp&&"mouseup"==e.type||(this.staticClick(e,t),"mouseup"!=e.type&&(this.isIgnoringMouseUp=!0,setTimeout(function(){delete this.isIgnoringMouseUp}.bind(this),400)))},n.staticClick=function(e,t){this.emitEvent("staticClick",[e,t])},s.getPointerPoint=t.getPointerPoint,s}(r,e)}.apply(t,n),void 0===o||(e.exports=o)}(window)},"./node_modules/unipointer/unipointer.js":(e,t,s)=>{var n,o;!function(r,i){n=[s("./node_modules/ev-emitter/ev-emitter.js")],o=function(e){return function(e,t){"use strict";function s(){}function n(){}var o=n.prototype=Object.create(t.prototype);o.bindStartEvent=function(e){this._bindStartEvent(e,!0)},o.unbindStartEvent=function(e){this._bindStartEvent(e,!1)},o._bindStartEvent=function(t,s){var n=(s=void 0===s||s)?"addEventListener":"removeEventListener",o="mousedown";"ontouchstart"in e?o="touchstart":e.PointerEvent&&(o="pointerdown"),t[n](o,this)},o.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},o.getTouch=function(e){for(var t=0;t<e.length;t++){var s=e[t];if(s.identifier==this.pointerIdentifier)return s}},o.onmousedown=function(e){var t=e.button;t&&0!==t&&1!==t||this._pointerDown(e,e)},o.ontouchstart=function(e){this._pointerDown(e,e.changedTouches[0])},o.onpointerdown=function(e){this._pointerDown(e,e)},o._pointerDown=function(e,t){e.button||this.isPointerDown||(this.isPointerDown=!0,this.pointerIdentifier=void 0!==t.pointerId?t.pointerId:t.identifier,this.pointerDown(e,t))},o.pointerDown=function(e,t){this._bindPostStartEvents(e),this.emitEvent("pointerDown",[e,t])};var r={mousedown:["mousemove","mouseup"],touchstart:["touchmove","touchend","touchcancel"],pointerdown:["pointermove","pointerup","pointercancel"]};return o._bindPostStartEvents=function(t){if(t){var s=r[t.type];s.forEach((function(t){e.addEventListener(t,this)}),this),this._boundPointerEvents=s}},o._unbindPostStartEvents=function(){this._boundPointerEvents&&(this._boundPointerEvents.forEach((function(t){e.removeEventListener(t,this)}),this),delete this._boundPointerEvents)},o.onmousemove=function(e){this._pointerMove(e,e)},o.onpointermove=function(e){e.pointerId==this.pointerIdentifier&&this._pointerMove(e,e)},o.ontouchmove=function(e){var t=this.getTouch(e.changedTouches);t&&this._pointerMove(e,t)},o._pointerMove=function(e,t){this.pointerMove(e,t)},o.pointerMove=function(e,t){this.emitEvent("pointerMove",[e,t])},o.onmouseup=function(e){this._pointerUp(e,e)},o.onpointerup=function(e){e.pointerId==this.pointerIdentifier&&this._pointerUp(e,e)},o.ontouchend=function(e){var t=this.getTouch(e.changedTouches);t&&this._pointerUp(e,t)},o._pointerUp=function(e,t){this._pointerDone(),this.pointerUp(e,t)},o.pointerUp=function(e,t){this.emitEvent("pointerUp",[e,t])},o._pointerDone=function(){this._pointerReset(),this._unbindPostStartEvents(),this.pointerDone()},o._pointerReset=function(){this.isPointerDown=!1,delete this.pointerIdentifier},o.pointerDone=s,o.onpointercancel=function(e){e.pointerId==this.pointerIdentifier&&this._pointerCancel(e,e)},o.ontouchcancel=function(e){var t=this.getTouch(e.changedTouches);t&&this._pointerCancel(e,t)},o._pointerCancel=function(e,t){this._pointerDone(),this.pointerCancel(e,t)},o.pointerCancel=function(e,t){this.emitEvent("pointerCancel",[e,t])},n.getPointerPoint=function(e){return{x:e.pageX,y:e.pageY}},n}(r,e)}.apply(t,n),void 0===o||(e.exports=o)}(window)},"./node_modules/vanilla-lazyload/dist/lazyload.min.js":function(e,t,s){var n,o,r;function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var s=arguments[t];for(var n in s)Object.prototype.hasOwnProperty.call(s,n)&&(e[n]=s[n])}return e}).apply(this,arguments)}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}r=function(){"use strict";var e="undefined"!=typeof window,t=e&&!("onscroll"in window)||"undefined"!=typeof navigator&&/(gle|ing|ro)bot|crawl|spider/i.test(navigator.userAgent),s=e&&"IntersectionObserver"in window,n=e&&"classList"in document.createElement("p"),o={elements_selector:"img",container:t||e?document:null,threshold:300,thresholds:null,data_src:"src",data_srcset:"srcset",data_sizes:"sizes",data_bg:"bg",data_poster:"poster",class_loading:"loading",class_loaded:"loaded",class_error:"error",load_delay:0,auto_unobserve:!0,callback_enter:null,callback_exit:null,callback_reveal:null,callback_loaded:null,callback_error:null,callback_finish:null,use_native:!1},r=function(e,t){var s,n=new e(t);try{s=new CustomEvent("LazyLoad::Initialized",{detail:{instance:n}})}catch(e){(s=document.createEvent("CustomEvent")).initCustomEvent("LazyLoad::Initialized",!1,!1,{instance:n})}window.dispatchEvent(s)},u=function(e,t){return e.getAttribute("data-"+t)},d=function(e,t,s){var n="data-"+t;null!==s?e.setAttribute(n,s):e.removeAttribute(n)},l=function(e){return"true"===u(e,"was-processed")},a=function(e,t){return d(e,"ll-timeout",t)},c=function(e){return u(e,"ll-timeout")},f=function(e,t,s,n){e&&(void 0===n?void 0===s?e(t):e(t,s):e(t,s,n))},h=function(e,t){e.loadingCount+=t,0===e._elements.length&&0===e.loadingCount&&f(e._settings.callback_finish,e)},m=function(e){for(var t,s=[],n=0;t=e.children[n];n+=1)"SOURCE"===t.tagName&&s.push(t);return s},p=function(e,t,s){s&&e.setAttribute(t,s)},v=function(e,t){p(e,"sizes",u(e,t.data_sizes)),p(e,"srcset",u(e,t.data_srcset)),p(e,"src",u(e,t.data_src))},g={IMG:function(e,t){var s=e.parentNode;s&&"PICTURE"===s.tagName&&m(s).forEach((function(e){v(e,t)})),v(e,t)},IFRAME:function(e,t){p(e,"src",u(e,t.data_src))},VIDEO:function(e,t){m(e).forEach((function(e){p(e,"src",u(e,t.data_src))})),p(e,"poster",u(e,t.data_poster)),p(e,"src",u(e,t.data_src)),e.load()}},_=function(e,t){n?e.classList.add(t):e.className+=(e.className?" ":"")+t},y=function(e,t){n?e.classList.remove(t):e.className=e.className.replace(new RegExp("(^|\\s+)"+t+"(\\s+|$)")," ").replace(/^\s+/,"").replace(/\s+$/,"")},j=function(e,t,s){e.addEventListener(t,s)},b=function(e,t,s){e.removeEventListener(t,s)},w=function(e,t,s){b(e,"load",t),b(e,"loadeddata",t),b(e,"error",s)},E=function(e,t,s){var n=s._settings,o=t?n.class_loaded:n.class_error,r=t?n.callback_loaded:n.callback_error,i=e.target;y(i,n.class_loading),_(i,o),f(r,i,s),h(s,-1)},k=["IMG","IFRAME","VIDEO"],S=function(e,t){var s=t._observer;A(e,t),s&&t._settings.auto_unobserve&&s.unobserve(e)},x=function(e){var t=c(e);t&&(clearTimeout(t),a(e,null))},A=function(e,t,s){var n=t._settings;!s&&l(e)||(k.indexOf(e.tagName)>-1&&(function(e,t){var s=function s(o){E(o,!0,t),w(e,s,n)},n=function n(o){E(o,!1,t),w(e,s,n)};!function(e,t,s){j(e,"load",t),j(e,"loadeddata",t),j(e,"error",s)}(e,s,n)}(e,t),_(e,n.class_loading)),function(e,t){var s,n,o=t._settings,r=e.tagName,i=g[r];if(i)return i(e,o),h(t,1),void(t._elements=(s=t._elements,n=e,s.filter((function(e){return e!==n}))));!function(e,t){var s=u(e,t.data_src),n=u(e,t.data_bg);s&&(e.style.backgroundImage='url("'.concat(s,'")')),n&&(e.style.backgroundImage=n)}(e,o)}(e,t),function(e){d(e,"was-processed","true")}(e),f(n.callback_reveal,e,t),f(n.callback_set,e,t))},T=function(e){return!!s&&(e._observer=new IntersectionObserver((function(t){t.forEach((function(t){return function(e){return e.isIntersecting||e.intersectionRatio>0}(t)?function(e,t,s){var n=s._settings;f(n.callback_enter,e,t,s),n.load_delay?function(e,t){var s=t._settings.load_delay,n=c(e);n||(n=setTimeout((function(){S(e,t),x(e)}),s),a(e,n))}(e,s):S(e,s)}(t.target,t,e):function(e,t,s){var n=s._settings;f(n.callback_exit,e,t,s),n.load_delay&&x(e)}(t.target,t,e)}))}),{root:(t=e._settings).container===document?null:t.container,rootMargin:t.thresholds||t.threshold+"px"}),!0);var t},L=["IMG","IFRAME"],C=function(e,t){return function(e){return e.filter((function(e){return!l(e)}))}((s=e||function(e){return e.container.querySelectorAll(e.elements_selector)}(t),Array.prototype.slice.call(s)));var s},I=function(t,s){var n;this._settings=function(e){return i({},o,e)}(t),this.loadingCount=0,T(this),this.update(s),n=this,e&&window.addEventListener("online",(function(e){!function(e){var t=e._settings;t.container.querySelectorAll("."+t.class_error).forEach((function(e){y(e,t.class_error),function(e){d(e,"was-processed",null)}(e)})),e.update()}(n)}))};return I.prototype={update:function(e){var s,n=this,o=this._settings;this._elements=C(e,o),!t&&this._observer?(function(e){return e.use_native&&"loading"in HTMLImageElement.prototype}(o)&&((s=this)._elements.forEach((function(e){-1!==L.indexOf(e.tagName)&&(e.setAttribute("loading","lazy"),A(e,s))})),this._elements=C(e,o)),this._elements.forEach((function(e){n._observer.observe(e)}))):this.loadAll()},destroy:function(){var e=this;this._observer&&(this._elements.forEach((function(t){e._observer.unobserve(t)})),this._observer=null),this._elements=null,this._settings=null},load:function(e,t){A(e,this,t)},loadAll:function(){var e=this;this._elements.forEach((function(t){S(t,e)}))}},e&&function(e,t){if(t)if(t.length)for(var s,n=0;s=t[n];n+=1)r(e,s);else r(e,t)}(I,window.lazyLoadOptions),I},"object"===u(t)?e.exports=r():void 0===(o="function"==typeof(n=r)?n.call(t,s,t,e):n)||(e.exports=o)},"./node_modules/underscore/modules/_baseCreate.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/isObject.js"),o=s("./node_modules/underscore/modules/_setup.js");function r(e){if(!(0,n.default)(e))return{};if(o.nativeCreate)return(0,o.nativeCreate)(e);var t=function(){};t.prototype=e;var s=new t;return t.prototype=null,s}},"./node_modules/underscore/modules/_baseIteratee.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>a});var n=s("./node_modules/underscore/modules/identity.js"),o=s("./node_modules/underscore/modules/isFunction.js"),r=s("./node_modules/underscore/modules/isObject.js"),i=s("./node_modules/underscore/modules/isArray.js"),u=s("./node_modules/underscore/modules/matcher.js"),d=s("./node_modules/underscore/modules/property.js"),l=s("./node_modules/underscore/modules/_optimizeCb.js");function a(e,t,s){return null==e?n.default:(0,o.default)(e)?(0,l.default)(e,t,s):(0,r.default)(e)&&!(0,i.default)(e)?(0,u.default)(e):(0,d.default)(e)}},"./node_modules/underscore/modules/_cb.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var n=s("./node_modules/underscore/modules/underscore.js"),o=s("./node_modules/underscore/modules/_baseIteratee.js"),r=s("./node_modules/underscore/modules/iteratee.js");function i(e,t,s){return n.default.iteratee!==r.default?n.default.iteratee(e,t):(0,o.default)(e,t,s)}},"./node_modules/underscore/modules/_chainResult.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/underscore.js");function o(e,t){return e._chain?(0,n.default)(t).chain():t}},"./node_modules/underscore/modules/_collectNonEnumProps.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var n=s("./node_modules/underscore/modules/_setup.js"),o=s("./node_modules/underscore/modules/isFunction.js"),r=s("./node_modules/underscore/modules/_has.js");function i(e,t){t=function(e){for(var t={},s=e.length,n=0;n<s;++n)t[e[n]]=!0;return{contains:function(e){return!0===t[e]},push:function(s){return t[s]=!0,e.push(s)}}}(t);var s=n.nonEnumerableProps.length,i=e.constructor,u=(0,o.default)(i)&&i.prototype||n.ObjProto,d="constructor";for((0,r.default)(e,d)&&!t.contains(d)&&t.push(d);s--;)(d=n.nonEnumerableProps[s])in e&&e[d]!==u[d]&&!t.contains(d)&&t.push(d)}},"./node_modules/underscore/modules/_createAssigner.js":(e,t,s)=>{"use strict";function n(e,t){return function(s){var n=arguments.length;if(t&&(s=Object(s)),n<2||null==s)return s;for(var o=1;o<n;o++)for(var r=arguments[o],i=e(r),u=i.length,d=0;d<u;d++){var l=i[d];t&&void 0!==s[l]||(s[l]=r[l])}return s}}s.r(t),s.d(t,{default:()=>n})},"./node_modules/underscore/modules/_createEscaper.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/keys.js");function o(e){var t=function(t){return e[t]},s="(?:"+(0,n.default)(e).join("|")+")",o=RegExp(s),r=RegExp(s,"g");return function(e){return e=null==e?"":""+e,o.test(e)?e.replace(r,t):e}}},"./node_modules/underscore/modules/_createIndexFinder.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var n=s("./node_modules/underscore/modules/_getLength.js"),o=s("./node_modules/underscore/modules/_setup.js"),r=s("./node_modules/underscore/modules/isNaN.js");function i(e,t,s){return function(i,u,d){var l=0,a=(0,n.default)(i);if("number"==typeof d)e>0?l=d>=0?d:Math.max(d+a,l):a=d>=0?Math.min(d+1,a):d+a+1;else if(s&&d&&a)return i[d=s(i,u)]===u?d:-1;if(u!=u)return(d=t(o.slice.call(i,l,a),r.default))>=0?d+l:-1;for(d=e>0?l:a-1;d>=0&&d<a;d+=e)if(i[d]===u)return d;return-1}}},"./node_modules/underscore/modules/_createPredicateIndexFinder.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/_cb.js"),o=s("./node_modules/underscore/modules/_getLength.js");function r(e){return function(t,s,r){s=(0,n.default)(s,r);for(var i=(0,o.default)(t),u=e>0?0:i-1;u>=0&&u<i;u+=e)if(s(t[u],u,t))return u;return-1}}},"./node_modules/underscore/modules/_createReduce.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var n=s("./node_modules/underscore/modules/_isArrayLike.js"),o=s("./node_modules/underscore/modules/keys.js"),r=s("./node_modules/underscore/modules/_optimizeCb.js");function i(e){var t=function(t,s,r,i){var u=!(0,n.default)(t)&&(0,o.default)(t),d=(u||t).length,l=e>0?0:d-1;for(i||(r=t[u?u[l]:l],l+=e);l>=0&&l<d;l+=e){var a=u?u[l]:l;r=s(r,t[a],a,t)}return r};return function(e,s,n,o){var i=arguments.length>=3;return t(e,(0,r.default)(s,o,4),n,i)}}},"./node_modules/underscore/modules/_createSizePropertyCheck.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/_setup.js");function o(e){return function(t){var s=e(t);return"number"==typeof s&&s>=0&&s<=n.MAX_ARRAY_INDEX}}},"./node_modules/underscore/modules/_deepGet.js":(e,t,s)=>{"use strict";function n(e,t){for(var s=t.length,n=0;n<s;n++){if(null==e)return;e=e[t[n]]}return s?e:void 0}s.r(t),s.d(t,{default:()=>n})},"./node_modules/underscore/modules/_escapeMap.js":(e,t,s)=>{"use strict";s.r(t),t.default={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"}},"./node_modules/underscore/modules/_executeBound.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/_baseCreate.js"),o=s("./node_modules/underscore/modules/isObject.js");function r(e,t,s,r,i){if(!(r instanceof t))return e.apply(s,i);var u=(0,n.default)(e.prototype),d=e.apply(u,i);return(0,o.default)(d)?d:u}},"./node_modules/underscore/modules/_flatten.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>u});var n=s("./node_modules/underscore/modules/_getLength.js"),o=s("./node_modules/underscore/modules/_isArrayLike.js"),r=s("./node_modules/underscore/modules/isArray.js"),i=s("./node_modules/underscore/modules/isArguments.js");function u(e,t,s,d){if(d=d||[],t||0===t){if(t<=0)return d.concat(e)}else t=1/0;for(var l=d.length,a=0,c=(0,n.default)(e);a<c;a++){var f=e[a];if((0,o.default)(f)&&((0,r.default)(f)||(0,i.default)(f)))if(t>1)u(f,t-1,s,d),l=d.length;else for(var h=0,m=f.length;h<m;)d[l++]=f[h++];else s||(d[l++]=f)}return d}},"./node_modules/underscore/modules/_getByteLength.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_shallowProperty.js");t.default=(0,n.default)("byteLength")},"./node_modules/underscore/modules/_getLength.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_shallowProperty.js");t.default=(0,n.default)("length")},"./node_modules/underscore/modules/_group.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/_cb.js"),o=s("./node_modules/underscore/modules/each.js");function r(e,t){return function(s,r,i){var u=t?[[],[]]:{};return r=(0,n.default)(r,i),(0,o.default)(s,(function(t,n){var o=r(t,n,s);e(u,t,o)})),u}}},"./node_modules/underscore/modules/_has.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/_setup.js");function o(e,t){return null!=e&&n.hasOwnProperty.call(e,t)}},"./node_modules/underscore/modules/_hasObjectTag.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_tagTester.js");t.default=(0,n.default)("Object")},"./node_modules/underscore/modules/_isArrayLike.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_createSizePropertyCheck.js"),o=s("./node_modules/underscore/modules/_getLength.js");t.default=(0,n.default)(o.default)},"./node_modules/underscore/modules/_isBufferLike.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_createSizePropertyCheck.js"),o=s("./node_modules/underscore/modules/_getByteLength.js");t.default=(0,n.default)(o.default)},"./node_modules/underscore/modules/_keyInObj.js":(e,t,s)=>{"use strict";function n(e,t,s){return t in s}s.r(t),s.d(t,{default:()=>n})},"./node_modules/underscore/modules/_methodFingerprint.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{ie11fingerprint:()=>i,mapMethods:()=>a,weakMapMethods:()=>c,setMethods:()=>f});var n=s("./node_modules/underscore/modules/_getLength.js"),o=s("./node_modules/underscore/modules/isFunction.js"),r=s("./node_modules/underscore/modules/allKeys.js");function i(e){var t=(0,n.default)(e);return function(s){if(null==s)return!1;var i=(0,r.default)(s);if((0,n.default)(i))return!1;for(var d=0;d<t;d++)if(!(0,o.default)(s[e[d]]))return!1;return e!==c||!(0,o.default)(s[u])}}var u="forEach",d=["clear","delete"],l=["get","has","set"],a=d.concat(u,l),c=d.concat(l),f=["add"].concat(d,u,"has")},"./node_modules/underscore/modules/_optimizeCb.js":(e,t,s)=>{"use strict";function n(e,t,s){if(void 0===t)return e;switch(null==s?3:s){case 1:return function(s){return e.call(t,s)};case 3:return function(s,n,o){return e.call(t,s,n,o)};case 4:return function(s,n,o,r){return e.call(t,s,n,o,r)}}return function(){return e.apply(t,arguments)}}s.r(t),s.d(t,{default:()=>n})},"./node_modules/underscore/modules/_setup.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{VERSION:()=>n,root:()=>o,ArrayProto:()=>r,ObjProto:()=>i,SymbolProto:()=>u,push:()=>d,slice:()=>l,toString:()=>a,hasOwnProperty:()=>c,supportsArrayBuffer:()=>f,supportsDataView:()=>h,nativeIsArray:()=>m,nativeKeys:()=>p,nativeCreate:()=>v,nativeIsView:()=>g,_isNaN:()=>_,_isFinite:()=>y,hasEnumBug:()=>j,nonEnumerableProps:()=>b,MAX_ARRAY_INDEX:()=>w});var n="1.13.2",o="object"==typeof self&&self.self===self&&self||"object"==typeof global&&global.global===global&&global||Function("return this")()||{},r=Array.prototype,i=Object.prototype,u="undefined"!=typeof Symbol?Symbol.prototype:null,d=r.push,l=r.slice,a=i.toString,c=i.hasOwnProperty,f="undefined"!=typeof ArrayBuffer,h="undefined"!=typeof DataView,m=Array.isArray,p=Object.keys,v=Object.create,g=f&&ArrayBuffer.isView,_=isNaN,y=isFinite,j=!{toString:null}.propertyIsEnumerable("toString"),b=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],w=Math.pow(2,53)-1},"./node_modules/underscore/modules/_shallowProperty.js":(e,t,s)=>{"use strict";function n(e){return function(t){return null==t?void 0:t[e]}}s.r(t),s.d(t,{default:()=>n})},"./node_modules/underscore/modules/_stringTagBug.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{hasStringTagBug:()=>r,isIE11:()=>i});var n=s("./node_modules/underscore/modules/_setup.js"),o=s("./node_modules/underscore/modules/_hasObjectTag.js"),r=n.supportsDataView&&(0,o.default)(new DataView(new ArrayBuffer(8))),i="undefined"!=typeof Map&&(0,o.default)(new Map)},"./node_modules/underscore/modules/_tagTester.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/_setup.js");function o(e){var t="[object "+e+"]";return function(e){return n.toString.call(e)===t}}},"./node_modules/underscore/modules/_toBufferView.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/_getByteLength.js");function o(e){return new Uint8Array(e.buffer||e,e.byteOffset||0,(0,n.default)(e))}},"./node_modules/underscore/modules/_toPath.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/underscore.js");s("./node_modules/underscore/modules/toPath.js");function o(e){return n.default.toPath(e)}},"./node_modules/underscore/modules/_unescapeMap.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/invert.js"),o=s("./node_modules/underscore/modules/_escapeMap.js");t.default=(0,n.default)(o.default)},"./node_modules/underscore/modules/after.js":(e,t,s)=>{"use strict";function n(e,t){return function(){if(--e<1)return t.apply(this,arguments)}}s.r(t),s.d(t,{default:()=>n})},"./node_modules/underscore/modules/allKeys.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var n=s("./node_modules/underscore/modules/isObject.js"),o=s("./node_modules/underscore/modules/_setup.js"),r=s("./node_modules/underscore/modules/_collectNonEnumProps.js");function i(e){if(!(0,n.default)(e))return[];var t=[];for(var s in e)t.push(s);return o.hasEnumBug&&(0,r.default)(e,t),t}},"./node_modules/underscore/modules/before.js":(e,t,s)=>{"use strict";function n(e,t){var s;return function(){return--e>0&&(s=t.apply(this,arguments)),e<=1&&(t=null),s}}s.r(t),s.d(t,{default:()=>n})},"./node_modules/underscore/modules/bind.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/restArguments.js"),o=s("./node_modules/underscore/modules/isFunction.js"),r=s("./node_modules/underscore/modules/_executeBound.js");t.default=(0,n.default)((function(e,t,s){if(!(0,o.default)(e))throw new TypeError("Bind must be called on a function");var i=(0,n.default)((function(n){return(0,r.default)(e,i,t,this,s.concat(n))}));return i}))},"./node_modules/underscore/modules/bindAll.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/restArguments.js"),o=s("./node_modules/underscore/modules/_flatten.js"),r=s("./node_modules/underscore/modules/bind.js");t.default=(0,n.default)((function(e,t){var s=(t=(0,o.default)(t,!1,!1)).length;if(s<1)throw new Error("bindAll must be passed function names");for(;s--;){var n=t[s];e[n]=(0,r.default)(e[n],e)}return e}))},"./node_modules/underscore/modules/chain.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/underscore.js");function o(e){var t=(0,n.default)(e);return t._chain=!0,t}},"./node_modules/underscore/modules/chunk.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/_setup.js");function o(e,t){if(null==t||t<1)return[];for(var s=[],o=0,r=e.length;o<r;)s.push(n.slice.call(e,o,o+=t));return s}},"./node_modules/underscore/modules/clone.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var n=s("./node_modules/underscore/modules/isObject.js"),o=s("./node_modules/underscore/modules/isArray.js"),r=s("./node_modules/underscore/modules/extend.js");function i(e){return(0,n.default)(e)?(0,o.default)(e)?e.slice():(0,r.default)({},e):e}},"./node_modules/underscore/modules/compact.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/filter.js");function o(e){return(0,n.default)(e,Boolean)}},"./node_modules/underscore/modules/compose.js":(e,t,s)=>{"use strict";function n(){var e=arguments,t=e.length-1;return function(){for(var s=t,n=e[t].apply(this,arguments);s--;)n=e[s].call(this,n);return n}}s.r(t),s.d(t,{default:()=>n})},"./node_modules/underscore/modules/constant.js":(e,t,s)=>{"use strict";function n(e){return function(){return e}}s.r(t),s.d(t,{default:()=>n})},"./node_modules/underscore/modules/contains.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var n=s("./node_modules/underscore/modules/_isArrayLike.js"),o=s("./node_modules/underscore/modules/values.js"),r=s("./node_modules/underscore/modules/indexOf.js");function i(e,t,s,i){return(0,n.default)(e)||(e=(0,o.default)(e)),("number"!=typeof s||i)&&(s=0),(0,r.default)(e,t,s)>=0}},"./node_modules/underscore/modules/countBy.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_group.js"),o=s("./node_modules/underscore/modules/_has.js");t.default=(0,n.default)((function(e,t,s){(0,o.default)(e,s)?e[s]++:e[s]=1}))},"./node_modules/underscore/modules/create.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/_baseCreate.js"),o=s("./node_modules/underscore/modules/extendOwn.js");function r(e,t){var s=(0,n.default)(e);return t&&(0,o.default)(s,t),s}},"./node_modules/underscore/modules/debounce.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/restArguments.js"),o=s("./node_modules/underscore/modules/now.js");function r(e,t,s){var r,i,u,d,l,a=function(){var n=(0,o.default)()-i;t>n?r=setTimeout(a,t-n):(r=null,s||(d=e.apply(l,u)),r||(u=l=null))},c=(0,n.default)((function(n){return l=this,u=n,i=(0,o.default)(),r||(r=setTimeout(a,t),s&&(d=e.apply(l,u))),d}));return c.cancel=function(){clearTimeout(r),r=u=l=null},c}},"./node_modules/underscore/modules/defaults.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_createAssigner.js"),o=s("./node_modules/underscore/modules/allKeys.js");t.default=(0,n.default)(o.default,!0)},"./node_modules/underscore/modules/defer.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/partial.js"),o=s("./node_modules/underscore/modules/delay.js"),r=s("./node_modules/underscore/modules/underscore.js");t.default=(0,n.default)(o.default,r.default,1)},"./node_modules/underscore/modules/delay.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/restArguments.js");t.default=(0,n.default)((function(e,t,s){return setTimeout((function(){return e.apply(null,s)}),t)}))},"./node_modules/underscore/modules/difference.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/restArguments.js"),o=s("./node_modules/underscore/modules/_flatten.js"),r=s("./node_modules/underscore/modules/filter.js"),i=s("./node_modules/underscore/modules/contains.js");t.default=(0,n.default)((function(e,t){return t=(0,o.default)(t,!0,!0),(0,r.default)(e,(function(e){return!(0,i.default)(t,e)}))}))},"./node_modules/underscore/modules/each.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var n=s("./node_modules/underscore/modules/_optimizeCb.js"),o=s("./node_modules/underscore/modules/_isArrayLike.js"),r=s("./node_modules/underscore/modules/keys.js");function i(e,t,s){var i,u;if(t=(0,n.default)(t,s),(0,o.default)(e))for(i=0,u=e.length;i<u;i++)t(e[i],i,e);else{var d=(0,r.default)(e);for(i=0,u=d.length;i<u;i++)t(e[d[i]],d[i],e)}return e}},"./node_modules/underscore/modules/escape.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_createEscaper.js"),o=s("./node_modules/underscore/modules/_escapeMap.js");t.default=(0,n.default)(o.default)},"./node_modules/underscore/modules/every.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var n=s("./node_modules/underscore/modules/_cb.js"),o=s("./node_modules/underscore/modules/_isArrayLike.js"),r=s("./node_modules/underscore/modules/keys.js");function i(e,t,s){t=(0,n.default)(t,s);for(var i=!(0,o.default)(e)&&(0,r.default)(e),u=(i||e).length,d=0;d<u;d++){var l=i?i[d]:d;if(!t(e[l],l,e))return!1}return!0}},"./node_modules/underscore/modules/extend.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_createAssigner.js"),o=s("./node_modules/underscore/modules/allKeys.js");t.default=(0,n.default)(o.default)},"./node_modules/underscore/modules/extendOwn.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_createAssigner.js"),o=s("./node_modules/underscore/modules/keys.js");t.default=(0,n.default)(o.default)},"./node_modules/underscore/modules/filter.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/_cb.js"),o=s("./node_modules/underscore/modules/each.js");function r(e,t,s){var r=[];return t=(0,n.default)(t,s),(0,o.default)(e,(function(e,s,n){t(e,s,n)&&r.push(e)})),r}},"./node_modules/underscore/modules/find.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var n=s("./node_modules/underscore/modules/_isArrayLike.js"),o=s("./node_modules/underscore/modules/findIndex.js"),r=s("./node_modules/underscore/modules/findKey.js");function i(e,t,s){var i=((0,n.default)(e)?o.default:r.default)(e,t,s);if(void 0!==i&&-1!==i)return e[i]}},"./node_modules/underscore/modules/findIndex.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_createPredicateIndexFinder.js");t.default=(0,n.default)(1)},"./node_modules/underscore/modules/findKey.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/_cb.js"),o=s("./node_modules/underscore/modules/keys.js");function r(e,t,s){t=(0,n.default)(t,s);for(var r,i=(0,o.default)(e),u=0,d=i.length;u<d;u++)if(t(e[r=i[u]],r,e))return r}},"./node_modules/underscore/modules/findLastIndex.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_createPredicateIndexFinder.js");t.default=(0,n.default)(-1)},"./node_modules/underscore/modules/findWhere.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/find.js"),o=s("./node_modules/underscore/modules/matcher.js");function r(e,t){return(0,n.default)(e,(0,o.default)(t))}},"./node_modules/underscore/modules/first.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/initial.js");function o(e,t,s){return null==e||e.length<1?null==t||s?void 0:[]:null==t||s?e[0]:(0,n.default)(e,e.length-t)}},"./node_modules/underscore/modules/flatten.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/_flatten.js");function o(e,t){return(0,n.default)(e,t,!1)}},"./node_modules/underscore/modules/functions.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/isFunction.js");function o(e){var t=[];for(var s in e)(0,n.default)(e[s])&&t.push(s);return t.sort()}},"./node_modules/underscore/modules/get.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var n=s("./node_modules/underscore/modules/_toPath.js"),o=s("./node_modules/underscore/modules/_deepGet.js"),r=s("./node_modules/underscore/modules/isUndefined.js");function i(e,t,s){var i=(0,o.default)(e,(0,n.default)(t));return(0,r.default)(i)?s:i}},"./node_modules/underscore/modules/groupBy.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_group.js"),o=s("./node_modules/underscore/modules/_has.js");t.default=(0,n.default)((function(e,t,s){(0,o.default)(e,s)?e[s].push(t):e[s]=[t]}))},"./node_modules/underscore/modules/has.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/_has.js"),o=s("./node_modules/underscore/modules/_toPath.js");function r(e,t){for(var s=(t=(0,o.default)(t)).length,r=0;r<s;r++){var i=t[r];if(!(0,n.default)(e,i))return!1;e=e[i]}return!!s}},"./node_modules/underscore/modules/identity.js":(e,t,s)=>{"use strict";function n(e){return e}s.r(t),s.d(t,{default:()=>n})},"./node_modules/underscore/modules/index-all.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n.default,VERSION:()=>o.VERSION,after:()=>o.after,all:()=>o.all,allKeys:()=>o.allKeys,any:()=>o.any,assign:()=>o.assign,before:()=>o.before,bind:()=>o.bind,bindAll:()=>o.bindAll,chain:()=>o.chain,chunk:()=>o.chunk,clone:()=>o.clone,collect:()=>o.collect,compact:()=>o.compact,compose:()=>o.compose,constant:()=>o.constant,contains:()=>o.contains,countBy:()=>o.countBy,create:()=>o.create,debounce:()=>o.debounce,defaults:()=>o.defaults,defer:()=>o.defer,delay:()=>o.delay,detect:()=>o.detect,difference:()=>o.difference,drop:()=>o.drop,each:()=>o.each,escape:()=>o.escape,every:()=>o.every,extend:()=>o.extend,extendOwn:()=>o.extendOwn,filter:()=>o.filter,find:()=>o.find,findIndex:()=>o.findIndex,findKey:()=>o.findKey,findLastIndex:()=>o.findLastIndex,findWhere:()=>o.findWhere,first:()=>o.first,flatten:()=>o.flatten,foldl:()=>o.foldl,foldr:()=>o.foldr,forEach:()=>o.forEach,functions:()=>o.functions,get:()=>o.get,groupBy:()=>o.groupBy,has:()=>o.has,head:()=>o.head,identity:()=>o.identity,include:()=>o.include,includes:()=>o.includes,indexBy:()=>o.indexBy,indexOf:()=>o.indexOf,initial:()=>o.initial,inject:()=>o.inject,intersection:()=>o.intersection,invert:()=>o.invert,invoke:()=>o.invoke,isArguments:()=>o.isArguments,isArray:()=>o.isArray,isArrayBuffer:()=>o.isArrayBuffer,isBoolean:()=>o.isBoolean,isDataView:()=>o.isDataView,isDate:()=>o.isDate,isElement:()=>o.isElement,isEmpty:()=>o.isEmpty,isEqual:()=>o.isEqual,isError:()=>o.isError,isFinite:()=>o.isFinite,isFunction:()=>o.isFunction,isMap:()=>o.isMap,isMatch:()=>o.isMatch,isNaN:()=>o.isNaN,isNull:()=>o.isNull,isNumber:()=>o.isNumber,isObject:()=>o.isObject,isRegExp:()=>o.isRegExp,isSet:()=>o.isSet,isString:()=>o.isString,isSymbol:()=>o.isSymbol,isTypedArray:()=>o.isTypedArray,isUndefined:()=>o.isUndefined,isWeakMap:()=>o.isWeakMap,isWeakSet:()=>o.isWeakSet,iteratee:()=>o.iteratee,keys:()=>o.keys,last:()=>o.last,lastIndexOf:()=>o.lastIndexOf,map:()=>o.map,mapObject:()=>o.mapObject,matcher:()=>o.matcher,matches:()=>o.matches,max:()=>o.max,memoize:()=>o.memoize,methods:()=>o.methods,min:()=>o.min,mixin:()=>o.mixin,negate:()=>o.negate,noop:()=>o.noop,now:()=>o.now,object:()=>o.object,omit:()=>o.omit,once:()=>o.once,pairs:()=>o.pairs,partial:()=>o.partial,partition:()=>o.partition,pick:()=>o.pick,pluck:()=>o.pluck,property:()=>o.property,propertyOf:()=>o.propertyOf,random:()=>o.random,range:()=>o.range,reduce:()=>o.reduce,reduceRight:()=>o.reduceRight,reject:()=>o.reject,rest:()=>o.rest,restArguments:()=>o.restArguments,result:()=>o.result,sample:()=>o.sample,select:()=>o.select,shuffle:()=>o.shuffle,size:()=>o.size,some:()=>o.some,sortBy:()=>o.sortBy,sortedIndex:()=>o.sortedIndex,tail:()=>o.tail,take:()=>o.take,tap:()=>o.tap,template:()=>o.template,templateSettings:()=>o.templateSettings,throttle:()=>o.throttle,times:()=>o.times,toArray:()=>o.toArray,toPath:()=>o.toPath,transpose:()=>o.transpose,unescape:()=>o.unescape,union:()=>o.union,uniq:()=>o.uniq,unique:()=>o.unique,uniqueId:()=>o.uniqueId,unzip:()=>o.unzip,values:()=>o.values,where:()=>o.where,without:()=>o.without,wrap:()=>o.wrap,zip:()=>o.zip});var n=s("./node_modules/underscore/modules/index-default.js"),o=s("./node_modules/underscore/modules/index.js")},"./node_modules/underscore/modules/index-default.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/index.js"),o=(0,n.mixin)(n);o._=o,t.default=o},"./node_modules/underscore/modules/index.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{VERSION:()=>n.VERSION,restArguments:()=>o.default,isObject:()=>r.default,isNull:()=>i.default,isUndefined:()=>u.default,isBoolean:()=>d.default,isElement:()=>l.default,isString:()=>a.default,isNumber:()=>c.default,isDate:()=>f.default,isRegExp:()=>h.default,isError:()=>m.default,isSymbol:()=>p.default,isArrayBuffer:()=>v.default,isDataView:()=>g.default,isArray:()=>_.default,isFunction:()=>y.default,isArguments:()=>j.default,isFinite:()=>b.default,isNaN:()=>w.default,isTypedArray:()=>E.default,isEmpty:()=>k.default,isMatch:()=>S.default,isEqual:()=>x.default,isMap:()=>A.default,isWeakMap:()=>T.default,isSet:()=>L.default,isWeakSet:()=>C.default,keys:()=>I.default,allKeys:()=>P.default,values:()=>D.default,pairs:()=>M.default,invert:()=>O.default,functions:()=>z.default,methods:()=>z.default,extend:()=>N.default,extendOwn:()=>B.default,assign:()=>B.default,defaults:()=>F.default,create:()=>R.default,clone:()=>q.default,tap:()=>W.default,get:()=>V.default,has:()=>H.default,mapObject:()=>U.default,identity:()=>X.default,constant:()=>Y.default,noop:()=>$.default,toPath:()=>G.default,property:()=>Q.default,propertyOf:()=>K.default,matcher:()=>J.default,matches:()=>J.default,times:()=>Z.default,random:()=>ee.default,now:()=>te.default,escape:()=>se.default,unescape:()=>ne.default,templateSettings:()=>oe.default,template:()=>re.default,result:()=>ie.default,uniqueId:()=>ue.default,chain:()=>de.default,iteratee:()=>le.default,partial:()=>ae.default,bind:()=>ce.default,bindAll:()=>fe.default,memoize:()=>he.default,delay:()=>me.default,defer:()=>pe.default,throttle:()=>ve.default,debounce:()=>ge.default,wrap:()=>_e.default,negate:()=>ye.default,compose:()=>je.default,after:()=>be.default,before:()=>we.default,once:()=>Ee.default,findKey:()=>ke.default,findIndex:()=>Se.default,findLastIndex:()=>xe.default,sortedIndex:()=>Ae.default,indexOf:()=>Te.default,lastIndexOf:()=>Le.default,find:()=>Ce.default,detect:()=>Ce.default,findWhere:()=>Ie.default,each:()=>Pe.default,forEach:()=>Pe.default,map:()=>De.default,collect:()=>De.default,reduce:()=>Me.default,foldl:()=>Me.default,inject:()=>Me.default,reduceRight:()=>Oe.default,foldr:()=>Oe.default,filter:()=>ze.default,select:()=>ze.default,reject:()=>Ne.default,every:()=>Be.default,all:()=>Be.default,some:()=>Fe.default,any:()=>Fe.default,contains:()=>Re.default,includes:()=>Re.default,include:()=>Re.default,invoke:()=>qe.default,pluck:()=>We.default,where:()=>Ve.default,max:()=>He.default,min:()=>Ue.default,shuffle:()=>Xe.default,sample:()=>Ye.default,sortBy:()=>$e.default,groupBy:()=>Ge.default,indexBy:()=>Qe.default,countBy:()=>Ke.default,partition:()=>Je.default,toArray:()=>Ze.default,size:()=>et.default,pick:()=>tt.default,omit:()=>st.default,first:()=>nt.default,head:()=>nt.default,take:()=>nt.default,initial:()=>ot.default,last:()=>rt.default,rest:()=>it.default,tail:()=>it.default,drop:()=>it.default,compact:()=>ut.default,flatten:()=>dt.default,without:()=>lt.default,uniq:()=>at.default,unique:()=>at.default,union:()=>ct.default,intersection:()=>ft.default,difference:()=>ht.default,unzip:()=>mt.default,transpose:()=>mt.default,zip:()=>pt.default,object:()=>vt.default,range:()=>gt.default,chunk:()=>_t.default,mixin:()=>yt.default,default:()=>jt.default});var n=s("./node_modules/underscore/modules/_setup.js"),o=s("./node_modules/underscore/modules/restArguments.js"),r=s("./node_modules/underscore/modules/isObject.js"),i=s("./node_modules/underscore/modules/isNull.js"),u=s("./node_modules/underscore/modules/isUndefined.js"),d=s("./node_modules/underscore/modules/isBoolean.js"),l=s("./node_modules/underscore/modules/isElement.js"),a=s("./node_modules/underscore/modules/isString.js"),c=s("./node_modules/underscore/modules/isNumber.js"),f=s("./node_modules/underscore/modules/isDate.js"),h=s("./node_modules/underscore/modules/isRegExp.js"),m=s("./node_modules/underscore/modules/isError.js"),p=s("./node_modules/underscore/modules/isSymbol.js"),v=s("./node_modules/underscore/modules/isArrayBuffer.js"),g=s("./node_modules/underscore/modules/isDataView.js"),_=s("./node_modules/underscore/modules/isArray.js"),y=s("./node_modules/underscore/modules/isFunction.js"),j=s("./node_modules/underscore/modules/isArguments.js"),b=s("./node_modules/underscore/modules/isFinite.js"),w=s("./node_modules/underscore/modules/isNaN.js"),E=s("./node_modules/underscore/modules/isTypedArray.js"),k=s("./node_modules/underscore/modules/isEmpty.js"),S=s("./node_modules/underscore/modules/isMatch.js"),x=s("./node_modules/underscore/modules/isEqual.js"),A=s("./node_modules/underscore/modules/isMap.js"),T=s("./node_modules/underscore/modules/isWeakMap.js"),L=s("./node_modules/underscore/modules/isSet.js"),C=s("./node_modules/underscore/modules/isWeakSet.js"),I=s("./node_modules/underscore/modules/keys.js"),P=s("./node_modules/underscore/modules/allKeys.js"),D=s("./node_modules/underscore/modules/values.js"),M=s("./node_modules/underscore/modules/pairs.js"),O=s("./node_modules/underscore/modules/invert.js"),z=s("./node_modules/underscore/modules/functions.js"),N=s("./node_modules/underscore/modules/extend.js"),B=s("./node_modules/underscore/modules/extendOwn.js"),F=s("./node_modules/underscore/modules/defaults.js"),R=s("./node_modules/underscore/modules/create.js"),q=s("./node_modules/underscore/modules/clone.js"),W=s("./node_modules/underscore/modules/tap.js"),V=s("./node_modules/underscore/modules/get.js"),H=s("./node_modules/underscore/modules/has.js"),U=s("./node_modules/underscore/modules/mapObject.js"),X=s("./node_modules/underscore/modules/identity.js"),Y=s("./node_modules/underscore/modules/constant.js"),$=s("./node_modules/underscore/modules/noop.js"),G=s("./node_modules/underscore/modules/toPath.js"),Q=s("./node_modules/underscore/modules/property.js"),K=s("./node_modules/underscore/modules/propertyOf.js"),J=s("./node_modules/underscore/modules/matcher.js"),Z=s("./node_modules/underscore/modules/times.js"),ee=s("./node_modules/underscore/modules/random.js"),te=s("./node_modules/underscore/modules/now.js"),se=s("./node_modules/underscore/modules/escape.js"),ne=s("./node_modules/underscore/modules/unescape.js"),oe=s("./node_modules/underscore/modules/templateSettings.js"),re=s("./node_modules/underscore/modules/template.js"),ie=s("./node_modules/underscore/modules/result.js"),ue=s("./node_modules/underscore/modules/uniqueId.js"),de=s("./node_modules/underscore/modules/chain.js"),le=s("./node_modules/underscore/modules/iteratee.js"),ae=s("./node_modules/underscore/modules/partial.js"),ce=s("./node_modules/underscore/modules/bind.js"),fe=s("./node_modules/underscore/modules/bindAll.js"),he=s("./node_modules/underscore/modules/memoize.js"),me=s("./node_modules/underscore/modules/delay.js"),pe=s("./node_modules/underscore/modules/defer.js"),ve=s("./node_modules/underscore/modules/throttle.js"),ge=s("./node_modules/underscore/modules/debounce.js"),_e=s("./node_modules/underscore/modules/wrap.js"),ye=s("./node_modules/underscore/modules/negate.js"),je=s("./node_modules/underscore/modules/compose.js"),be=s("./node_modules/underscore/modules/after.js"),we=s("./node_modules/underscore/modules/before.js"),Ee=s("./node_modules/underscore/modules/once.js"),ke=s("./node_modules/underscore/modules/findKey.js"),Se=s("./node_modules/underscore/modules/findIndex.js"),xe=s("./node_modules/underscore/modules/findLastIndex.js"),Ae=s("./node_modules/underscore/modules/sortedIndex.js"),Te=s("./node_modules/underscore/modules/indexOf.js"),Le=s("./node_modules/underscore/modules/lastIndexOf.js"),Ce=s("./node_modules/underscore/modules/find.js"),Ie=s("./node_modules/underscore/modules/findWhere.js"),Pe=s("./node_modules/underscore/modules/each.js"),De=s("./node_modules/underscore/modules/map.js"),Me=s("./node_modules/underscore/modules/reduce.js"),Oe=s("./node_modules/underscore/modules/reduceRight.js"),ze=s("./node_modules/underscore/modules/filter.js"),Ne=s("./node_modules/underscore/modules/reject.js"),Be=s("./node_modules/underscore/modules/every.js"),Fe=s("./node_modules/underscore/modules/some.js"),Re=s("./node_modules/underscore/modules/contains.js"),qe=s("./node_modules/underscore/modules/invoke.js"),We=s("./node_modules/underscore/modules/pluck.js"),Ve=s("./node_modules/underscore/modules/where.js"),He=s("./node_modules/underscore/modules/max.js"),Ue=s("./node_modules/underscore/modules/min.js"),Xe=s("./node_modules/underscore/modules/shuffle.js"),Ye=s("./node_modules/underscore/modules/sample.js"),$e=s("./node_modules/underscore/modules/sortBy.js"),Ge=s("./node_modules/underscore/modules/groupBy.js"),Qe=s("./node_modules/underscore/modules/indexBy.js"),Ke=s("./node_modules/underscore/modules/countBy.js"),Je=s("./node_modules/underscore/modules/partition.js"),Ze=s("./node_modules/underscore/modules/toArray.js"),et=s("./node_modules/underscore/modules/size.js"),tt=s("./node_modules/underscore/modules/pick.js"),st=s("./node_modules/underscore/modules/omit.js"),nt=s("./node_modules/underscore/modules/first.js"),ot=s("./node_modules/underscore/modules/initial.js"),rt=s("./node_modules/underscore/modules/last.js"),it=s("./node_modules/underscore/modules/rest.js"),ut=s("./node_modules/underscore/modules/compact.js"),dt=s("./node_modules/underscore/modules/flatten.js"),lt=s("./node_modules/underscore/modules/without.js"),at=s("./node_modules/underscore/modules/uniq.js"),ct=s("./node_modules/underscore/modules/union.js"),ft=s("./node_modules/underscore/modules/intersection.js"),ht=s("./node_modules/underscore/modules/difference.js"),mt=s("./node_modules/underscore/modules/unzip.js"),pt=s("./node_modules/underscore/modules/zip.js"),vt=s("./node_modules/underscore/modules/object.js"),gt=s("./node_modules/underscore/modules/range.js"),_t=s("./node_modules/underscore/modules/chunk.js"),yt=s("./node_modules/underscore/modules/mixin.js"),jt=s("./node_modules/underscore/modules/underscore-array-methods.js")},"./node_modules/underscore/modules/indexBy.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_group.js");t.default=(0,n.default)((function(e,t,s){e[s]=t}))},"./node_modules/underscore/modules/indexOf.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/sortedIndex.js"),o=s("./node_modules/underscore/modules/findIndex.js"),r=s("./node_modules/underscore/modules/_createIndexFinder.js");t.default=(0,r.default)(1,o.default,n.default)},"./node_modules/underscore/modules/initial.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/_setup.js");function o(e,t,s){return n.slice.call(e,0,Math.max(0,e.length-(null==t||s?1:t)))}},"./node_modules/underscore/modules/intersection.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/_getLength.js"),o=s("./node_modules/underscore/modules/contains.js");function r(e){for(var t=[],s=arguments.length,r=0,i=(0,n.default)(e);r<i;r++){var u=e[r];if(!(0,o.default)(t,u)){var d;for(d=1;d<s&&(0,o.default)(arguments[d],u);d++);d===s&&t.push(u)}}return t}},"./node_modules/underscore/modules/invert.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/keys.js");function o(e){for(var t={},s=(0,n.default)(e),o=0,r=s.length;o<r;o++)t[e[s[o]]]=s[o];return t}},"./node_modules/underscore/modules/invoke.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/restArguments.js"),o=s("./node_modules/underscore/modules/isFunction.js"),r=s("./node_modules/underscore/modules/map.js"),i=s("./node_modules/underscore/modules/_deepGet.js"),u=s("./node_modules/underscore/modules/_toPath.js");t.default=(0,n.default)((function(e,t,s){var n,d;return(0,o.default)(t)?d=t:(t=(0,u.default)(t),n=t.slice(0,-1),t=t[t.length-1]),(0,r.default)(e,(function(e){var o=d;if(!o){if(n&&n.length&&(e=(0,i.default)(e,n)),null==e)return;o=e[t]}return null==o?o:o.apply(e,s)}))}))},"./node_modules/underscore/modules/isArguments.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_tagTester.js"),o=s("./node_modules/underscore/modules/_has.js"),r=(0,n.default)("Arguments");!function(){r(arguments)||(r=function(e){return(0,o.default)(e,"callee")})}(),t.default=r},"./node_modules/underscore/modules/isArray.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_setup.js"),o=s("./node_modules/underscore/modules/_tagTester.js");t.default=n.nativeIsArray||(0,o.default)("Array")},"./node_modules/underscore/modules/isArrayBuffer.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_tagTester.js");t.default=(0,n.default)("ArrayBuffer")},"./node_modules/underscore/modules/isBoolean.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/_setup.js");function o(e){return!0===e||!1===e||"[object Boolean]"===n.toString.call(e)}},"./node_modules/underscore/modules/isDataView.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_tagTester.js"),o=s("./node_modules/underscore/modules/isFunction.js"),r=s("./node_modules/underscore/modules/isArrayBuffer.js"),i=s("./node_modules/underscore/modules/_stringTagBug.js"),u=(0,n.default)("DataView");t.default=i.hasStringTagBug?function(e){return null!=e&&(0,o.default)(e.getInt8)&&(0,r.default)(e.buffer)}:u},"./node_modules/underscore/modules/isDate.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_tagTester.js");t.default=(0,n.default)("Date")},"./node_modules/underscore/modules/isElement.js":(e,t,s)=>{"use strict";function n(e){return!(!e||1!==e.nodeType)}s.r(t),s.d(t,{default:()=>n})},"./node_modules/underscore/modules/isEmpty.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>d});var n=s("./node_modules/underscore/modules/_getLength.js"),o=s("./node_modules/underscore/modules/isArray.js"),r=s("./node_modules/underscore/modules/isString.js"),i=s("./node_modules/underscore/modules/isArguments.js"),u=s("./node_modules/underscore/modules/keys.js");function d(e){if(null==e)return!0;var t=(0,n.default)(e);return"number"==typeof t&&((0,o.default)(e)||(0,r.default)(e)||(0,i.default)(e))?0===t:0===(0,n.default)((0,u.default)(e))}},"./node_modules/underscore/modules/isEqual.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>v});var n=s("./node_modules/underscore/modules/underscore.js"),o=s("./node_modules/underscore/modules/_setup.js"),r=s("./node_modules/underscore/modules/_getByteLength.js"),i=s("./node_modules/underscore/modules/isTypedArray.js"),u=s("./node_modules/underscore/modules/isFunction.js"),d=s("./node_modules/underscore/modules/_stringTagBug.js"),l=s("./node_modules/underscore/modules/isDataView.js"),a=s("./node_modules/underscore/modules/keys.js"),c=s("./node_modules/underscore/modules/_has.js"),f=s("./node_modules/underscore/modules/_toBufferView.js"),h="[object DataView]";function m(e,t,s,n){if(e===t)return 0!==e||1/e==1/t;if(null==e||null==t)return!1;if(e!=e)return t!=t;var o=typeof e;return("function"===o||"object"===o||"object"==typeof t)&&p(e,t,s,n)}function p(e,t,s,v){e instanceof n.default&&(e=e._wrapped),t instanceof n.default&&(t=t._wrapped);var g=o.toString.call(e);if(g!==o.toString.call(t))return!1;if(d.hasStringTagBug&&"[object Object]"==g&&(0,l.default)(e)){if(!(0,l.default)(t))return!1;g=h}switch(g){case"[object RegExp]":case"[object String]":return""+e==""+t;case"[object Number]":return+e!=+e?+t!=+t:0==+e?1/+e==1/t:+e==+t;case"[object Date]":case"[object Boolean]":return+e==+t;case"[object Symbol]":return o.SymbolProto.valueOf.call(e)===o.SymbolProto.valueOf.call(t);case"[object ArrayBuffer]":case h:return p((0,f.default)(e),(0,f.default)(t),s,v)}var _="[object Array]"===g;if(!_&&(0,i.default)(e)){if((0,r.default)(e)!==(0,r.default)(t))return!1;if(e.buffer===t.buffer&&e.byteOffset===t.byteOffset)return!0;_=!0}if(!_){if("object"!=typeof e||"object"!=typeof t)return!1;var y=e.constructor,j=t.constructor;if(y!==j&&!((0,u.default)(y)&&y instanceof y&&(0,u.default)(j)&&j instanceof j)&&"constructor"in e&&"constructor"in t)return!1}v=v||[];for(var b=(s=s||[]).length;b--;)if(s[b]===e)return v[b]===t;if(s.push(e),v.push(t),_){if((b=e.length)!==t.length)return!1;for(;b--;)if(!m(e[b],t[b],s,v))return!1}else{var w,E=(0,a.default)(e);if(b=E.length,(0,a.default)(t).length!==b)return!1;for(;b--;)if(w=E[b],!(0,c.default)(t,w)||!m(e[w],t[w],s,v))return!1}return s.pop(),v.pop(),!0}function v(e,t){return m(e,t)}},"./node_modules/underscore/modules/isError.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_tagTester.js");t.default=(0,n.default)("Error")},"./node_modules/underscore/modules/isFinite.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/_setup.js"),o=s("./node_modules/underscore/modules/isSymbol.js");function r(e){return!(0,o.default)(e)&&(0,n._isFinite)(e)&&!isNaN(parseFloat(e))}},"./node_modules/underscore/modules/isFunction.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_tagTester.js"),o=s("./node_modules/underscore/modules/_setup.js"),r=(0,n.default)("Function"),i=o.root.document&&o.root.document.childNodes;"object"!=typeof Int8Array&&"function"!=typeof i&&(r=function(e){return"function"==typeof e||!1}),t.default=r},"./node_modules/underscore/modules/isMap.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_tagTester.js"),o=s("./node_modules/underscore/modules/_stringTagBug.js"),r=s("./node_modules/underscore/modules/_methodFingerprint.js");t.default=o.isIE11?(0,r.ie11fingerprint)(r.mapMethods):(0,n.default)("Map")},"./node_modules/underscore/modules/isMatch.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/keys.js");function o(e,t){var s=(0,n.default)(t),o=s.length;if(null==e)return!o;for(var r=Object(e),i=0;i<o;i++){var u=s[i];if(t[u]!==r[u]||!(u in r))return!1}return!0}},"./node_modules/underscore/modules/isNaN.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/_setup.js"),o=s("./node_modules/underscore/modules/isNumber.js");function r(e){return(0,o.default)(e)&&(0,n._isNaN)(e)}},"./node_modules/underscore/modules/isNull.js":(e,t,s)=>{"use strict";function n(e){return null===e}s.r(t),s.d(t,{default:()=>n})},"./node_modules/underscore/modules/isNumber.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_tagTester.js");t.default=(0,n.default)("Number")},"./node_modules/underscore/modules/isObject.js":(e,t,s)=>{"use strict";function n(e){var t=typeof e;return"function"===t||"object"===t&&!!e}s.r(t),s.d(t,{default:()=>n})},"./node_modules/underscore/modules/isRegExp.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_tagTester.js");t.default=(0,n.default)("RegExp")},"./node_modules/underscore/modules/isSet.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_tagTester.js"),o=s("./node_modules/underscore/modules/_stringTagBug.js"),r=s("./node_modules/underscore/modules/_methodFingerprint.js");t.default=o.isIE11?(0,r.ie11fingerprint)(r.setMethods):(0,n.default)("Set")},"./node_modules/underscore/modules/isString.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_tagTester.js");t.default=(0,n.default)("String")},"./node_modules/underscore/modules/isSymbol.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_tagTester.js");t.default=(0,n.default)("Symbol")},"./node_modules/underscore/modules/isTypedArray.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_setup.js"),o=s("./node_modules/underscore/modules/isDataView.js"),r=s("./node_modules/underscore/modules/constant.js"),i=s("./node_modules/underscore/modules/_isBufferLike.js"),u=/\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;t.default=n.supportsArrayBuffer?function(e){return n.nativeIsView?(0,n.nativeIsView)(e)&&!(0,o.default)(e):(0,i.default)(e)&&u.test(n.toString.call(e))}:(0,r.default)(!1)},"./node_modules/underscore/modules/isUndefined.js":(e,t,s)=>{"use strict";function n(e){return void 0===e}s.r(t),s.d(t,{default:()=>n})},"./node_modules/underscore/modules/isWeakMap.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_tagTester.js"),o=s("./node_modules/underscore/modules/_stringTagBug.js"),r=s("./node_modules/underscore/modules/_methodFingerprint.js");t.default=o.isIE11?(0,r.ie11fingerprint)(r.weakMapMethods):(0,n.default)("WeakMap")},"./node_modules/underscore/modules/isWeakSet.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_tagTester.js");t.default=(0,n.default)("WeakSet")},"./node_modules/underscore/modules/iteratee.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/underscore.js"),o=s("./node_modules/underscore/modules/_baseIteratee.js");function r(e,t){return(0,o.default)(e,t,1/0)}n.default.iteratee=r},"./node_modules/underscore/modules/keys.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>u});var n=s("./node_modules/underscore/modules/isObject.js"),o=s("./node_modules/underscore/modules/_setup.js"),r=s("./node_modules/underscore/modules/_has.js"),i=s("./node_modules/underscore/modules/_collectNonEnumProps.js");function u(e){if(!(0,n.default)(e))return[];if(o.nativeKeys)return(0,o.nativeKeys)(e);var t=[];for(var s in e)(0,r.default)(e,s)&&t.push(s);return o.hasEnumBug&&(0,i.default)(e,t),t}},"./node_modules/underscore/modules/last.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/rest.js");function o(e,t,s){return null==e||e.length<1?null==t||s?void 0:[]:null==t||s?e[e.length-1]:(0,n.default)(e,Math.max(0,e.length-t))}},"./node_modules/underscore/modules/lastIndexOf.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/findLastIndex.js"),o=s("./node_modules/underscore/modules/_createIndexFinder.js");t.default=(0,o.default)(-1,n.default)},"./node_modules/underscore/modules/map.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var n=s("./node_modules/underscore/modules/_cb.js"),o=s("./node_modules/underscore/modules/_isArrayLike.js"),r=s("./node_modules/underscore/modules/keys.js");function i(e,t,s){t=(0,n.default)(t,s);for(var i=!(0,o.default)(e)&&(0,r.default)(e),u=(i||e).length,d=Array(u),l=0;l<u;l++){var a=i?i[l]:l;d[l]=t(e[a],a,e)}return d}},"./node_modules/underscore/modules/mapObject.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/_cb.js"),o=s("./node_modules/underscore/modules/keys.js");function r(e,t,s){t=(0,n.default)(t,s);for(var r=(0,o.default)(e),i=r.length,u={},d=0;d<i;d++){var l=r[d];u[l]=t(e[l],l,e)}return u}},"./node_modules/underscore/modules/matcher.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/extendOwn.js"),o=s("./node_modules/underscore/modules/isMatch.js");function r(e){return e=(0,n.default)({},e),function(t){return(0,o.default)(t,e)}}},"./node_modules/underscore/modules/max.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>u});var n=s("./node_modules/underscore/modules/_isArrayLike.js"),o=s("./node_modules/underscore/modules/values.js"),r=s("./node_modules/underscore/modules/_cb.js"),i=s("./node_modules/underscore/modules/each.js");function u(e,t,s){var u,d,l=-1/0,a=-1/0;if(null==t||"number"==typeof t&&"object"!=typeof e[0]&&null!=e)for(var c=0,f=(e=(0,n.default)(e)?e:(0,o.default)(e)).length;c<f;c++)null!=(u=e[c])&&u>l&&(l=u);else t=(0,r.default)(t,s),(0,i.default)(e,(function(e,s,n){((d=t(e,s,n))>a||d===-1/0&&l===-1/0)&&(l=e,a=d)}));return l}},"./node_modules/underscore/modules/memoize.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/_has.js");function o(e,t){var s=function(o){var r=s.cache,i=""+(t?t.apply(this,arguments):o);return(0,n.default)(r,i)||(r[i]=e.apply(this,arguments)),r[i]};return s.cache={},s}},"./node_modules/underscore/modules/min.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>u});var n=s("./node_modules/underscore/modules/_isArrayLike.js"),o=s("./node_modules/underscore/modules/values.js"),r=s("./node_modules/underscore/modules/_cb.js"),i=s("./node_modules/underscore/modules/each.js");function u(e,t,s){var u,d,l=1/0,a=1/0;if(null==t||"number"==typeof t&&"object"!=typeof e[0]&&null!=e)for(var c=0,f=(e=(0,n.default)(e)?e:(0,o.default)(e)).length;c<f;c++)null!=(u=e[c])&&u<l&&(l=u);else t=(0,r.default)(t,s),(0,i.default)(e,(function(e,s,n){((d=t(e,s,n))<a||d===1/0&&l===1/0)&&(l=e,a=d)}));return l}},"./node_modules/underscore/modules/mixin.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>d});var n=s("./node_modules/underscore/modules/underscore.js"),o=s("./node_modules/underscore/modules/each.js"),r=s("./node_modules/underscore/modules/functions.js"),i=s("./node_modules/underscore/modules/_setup.js"),u=s("./node_modules/underscore/modules/_chainResult.js");function d(e){return(0,o.default)((0,r.default)(e),(function(t){var s=n.default[t]=e[t];n.default.prototype[t]=function(){var e=[this._wrapped];return i.push.apply(e,arguments),(0,u.default)(this,s.apply(n.default,e))}})),n.default}},"./node_modules/underscore/modules/negate.js":(e,t,s)=>{"use strict";function n(e){return function(){return!e.apply(this,arguments)}}s.r(t),s.d(t,{default:()=>n})},"./node_modules/underscore/modules/noop.js":(e,t,s)=>{"use strict";function n(){}s.r(t),s.d(t,{default:()=>n})},"./node_modules/underscore/modules/now.js":(e,t,s)=>{"use strict";s.r(t),t.default=Date.now||function(){return(new Date).getTime()}},"./node_modules/underscore/modules/object.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/_getLength.js");function o(e,t){for(var s={},o=0,r=(0,n.default)(e);o<r;o++)t?s[e[o]]=t[o]:s[e[o][0]]=e[o][1];return s}},"./node_modules/underscore/modules/omit.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/restArguments.js"),o=s("./node_modules/underscore/modules/isFunction.js"),r=s("./node_modules/underscore/modules/negate.js"),i=s("./node_modules/underscore/modules/map.js"),u=s("./node_modules/underscore/modules/_flatten.js"),d=s("./node_modules/underscore/modules/contains.js"),l=s("./node_modules/underscore/modules/pick.js");t.default=(0,n.default)((function(e,t){var s,n=t[0];return(0,o.default)(n)?(n=(0,r.default)(n),t.length>1&&(s=t[1])):(t=(0,i.default)((0,u.default)(t,!1,!1),String),n=function(e,s){return!(0,d.default)(t,s)}),(0,l.default)(e,n,s)}))},"./node_modules/underscore/modules/once.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/partial.js"),o=s("./node_modules/underscore/modules/before.js");t.default=(0,n.default)(o.default,2)},"./node_modules/underscore/modules/pairs.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/keys.js");function o(e){for(var t=(0,n.default)(e),s=t.length,o=Array(s),r=0;r<s;r++)o[r]=[t[r],e[t[r]]];return o}},"./node_modules/underscore/modules/partial.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/restArguments.js"),o=s("./node_modules/underscore/modules/_executeBound.js"),r=s("./node_modules/underscore/modules/underscore.js"),i=(0,n.default)((function(e,t){var s=i.placeholder,n=function(){for(var r=0,i=t.length,u=Array(i),d=0;d<i;d++)u[d]=t[d]===s?arguments[r++]:t[d];for(;r<arguments.length;)u.push(arguments[r++]);return(0,o.default)(e,n,this,this,u)};return n}));i.placeholder=r.default,t.default=i},"./node_modules/underscore/modules/partition.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_group.js");t.default=(0,n.default)((function(e,t,s){e[s?0:1].push(t)}),!0)},"./node_modules/underscore/modules/pick.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/restArguments.js"),o=s("./node_modules/underscore/modules/isFunction.js"),r=s("./node_modules/underscore/modules/_optimizeCb.js"),i=s("./node_modules/underscore/modules/allKeys.js"),u=s("./node_modules/underscore/modules/_keyInObj.js"),d=s("./node_modules/underscore/modules/_flatten.js");t.default=(0,n.default)((function(e,t){var s={},n=t[0];if(null==e)return s;(0,o.default)(n)?(t.length>1&&(n=(0,r.default)(n,t[1])),t=(0,i.default)(e)):(n=u.default,t=(0,d.default)(t,!1,!1),e=Object(e));for(var l=0,a=t.length;l<a;l++){var c=t[l],f=e[c];n(f,c,e)&&(s[c]=f)}return s}))},"./node_modules/underscore/modules/pluck.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/map.js"),o=s("./node_modules/underscore/modules/property.js");function r(e,t){return(0,n.default)(e,(0,o.default)(t))}},"./node_modules/underscore/modules/property.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/_deepGet.js"),o=s("./node_modules/underscore/modules/_toPath.js");function r(e){return e=(0,o.default)(e),function(t){return(0,n.default)(t,e)}}},"./node_modules/underscore/modules/propertyOf.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/noop.js"),o=s("./node_modules/underscore/modules/get.js");function r(e){return null==e?n.default:function(t){return(0,o.default)(e,t)}}},"./node_modules/underscore/modules/random.js":(e,t,s)=>{"use strict";function n(e,t){return null==t&&(t=e,e=0),e+Math.floor(Math.random()*(t-e+1))}s.r(t),s.d(t,{default:()=>n})},"./node_modules/underscore/modules/range.js":(e,t,s)=>{"use strict";function n(e,t,s){null==t&&(t=e||0,e=0),s||(s=t<e?-1:1);for(var n=Math.max(Math.ceil((t-e)/s),0),o=Array(n),r=0;r<n;r++,e+=s)o[r]=e;return o}s.r(t),s.d(t,{default:()=>n})},"./node_modules/underscore/modules/reduce.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_createReduce.js");t.default=(0,n.default)(1)},"./node_modules/underscore/modules/reduceRight.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_createReduce.js");t.default=(0,n.default)(-1)},"./node_modules/underscore/modules/reject.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var n=s("./node_modules/underscore/modules/filter.js"),o=s("./node_modules/underscore/modules/negate.js"),r=s("./node_modules/underscore/modules/_cb.js");function i(e,t,s){return(0,n.default)(e,(0,o.default)((0,r.default)(t)),s)}},"./node_modules/underscore/modules/rest.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/_setup.js");function o(e,t,s){return n.slice.call(e,null==t||s?1:t)}},"./node_modules/underscore/modules/restArguments.js":(e,t,s)=>{"use strict";function n(e,t){return t=null==t?e.length-1:+t,function(){for(var s=Math.max(arguments.length-t,0),n=Array(s),o=0;o<s;o++)n[o]=arguments[o+t];switch(t){case 0:return e.call(this,n);case 1:return e.call(this,arguments[0],n);case 2:return e.call(this,arguments[0],arguments[1],n)}var r=Array(t+1);for(o=0;o<t;o++)r[o]=arguments[o];return r[t]=n,e.apply(this,r)}}s.r(t),s.d(t,{default:()=>n})},"./node_modules/underscore/modules/result.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/isFunction.js"),o=s("./node_modules/underscore/modules/_toPath.js");function r(e,t,s){var r=(t=(0,o.default)(t)).length;if(!r)return(0,n.default)(s)?s.call(e):s;for(var i=0;i<r;i++){var u=null==e?void 0:e[t[i]];void 0===u&&(u=s,i=r),e=(0,n.default)(u)?u.call(e):u}return e}},"./node_modules/underscore/modules/sample.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>d});var n=s("./node_modules/underscore/modules/_isArrayLike.js"),o=s("./node_modules/underscore/modules/values.js"),r=s("./node_modules/underscore/modules/_getLength.js"),i=s("./node_modules/underscore/modules/random.js"),u=s("./node_modules/underscore/modules/toArray.js");function d(e,t,s){if(null==t||s)return(0,n.default)(e)||(e=(0,o.default)(e)),e[(0,i.default)(e.length-1)];var d=(0,u.default)(e),l=(0,r.default)(d);t=Math.max(Math.min(t,l),0);for(var a=l-1,c=0;c<t;c++){var f=(0,i.default)(c,a),h=d[c];d[c]=d[f],d[f]=h}return d.slice(0,t)}},"./node_modules/underscore/modules/shuffle.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/sample.js");function o(e){return(0,n.default)(e,1/0)}},"./node_modules/underscore/modules/size.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/_isArrayLike.js"),o=s("./node_modules/underscore/modules/keys.js");function r(e){return null==e?0:(0,n.default)(e)?e.length:(0,o.default)(e).length}},"./node_modules/underscore/modules/some.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var n=s("./node_modules/underscore/modules/_cb.js"),o=s("./node_modules/underscore/modules/_isArrayLike.js"),r=s("./node_modules/underscore/modules/keys.js");function i(e,t,s){t=(0,n.default)(t,s);for(var i=!(0,o.default)(e)&&(0,r.default)(e),u=(i||e).length,d=0;d<u;d++){var l=i?i[d]:d;if(t(e[l],l,e))return!0}return!1}},"./node_modules/underscore/modules/sortBy.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var n=s("./node_modules/underscore/modules/_cb.js"),o=s("./node_modules/underscore/modules/pluck.js"),r=s("./node_modules/underscore/modules/map.js");function i(e,t,s){var i=0;return t=(0,n.default)(t,s),(0,o.default)((0,r.default)(e,(function(e,s,n){return{value:e,index:i++,criteria:t(e,s,n)}})).sort((function(e,t){var s=e.criteria,n=t.criteria;if(s!==n){if(s>n||void 0===s)return 1;if(s<n||void 0===n)return-1}return e.index-t.index})),"value")}},"./node_modules/underscore/modules/sortedIndex.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/_cb.js"),o=s("./node_modules/underscore/modules/_getLength.js");function r(e,t,s,r){for(var i=(s=(0,n.default)(s,r,1))(t),u=0,d=(0,o.default)(e);u<d;){var l=Math.floor((u+d)/2);s(e[l])<i?u=l+1:d=l}return u}},"./node_modules/underscore/modules/tap.js":(e,t,s)=>{"use strict";function n(e,t){return t(e),e}s.r(t),s.d(t,{default:()=>n})},"./node_modules/underscore/modules/template.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>a});var n=s("./node_modules/underscore/modules/defaults.js"),o=s("./node_modules/underscore/modules/underscore.js"),r=(s("./node_modules/underscore/modules/templateSettings.js"),/(.)^/),i={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},u=/\\|'|\r|\n|\u2028|\u2029/g;function d(e){return"\\"+i[e]}var l=/^\s*(\w|\$)+\s*$/;function a(e,t,s){!t&&s&&(t=s),t=(0,n.default)({},t,o.default.templateSettings);var i=RegExp([(t.escape||r).source,(t.interpolate||r).source,(t.evaluate||r).source].join("|")+"|$","g"),a=0,c="__p+='";e.replace(i,(function(t,s,n,o,r){return c+=e.slice(a,r).replace(u,d),a=r+t.length,s?c+="'+\n((__t=("+s+"))==null?'':_.escape(__t))+\n'":n?c+="'+\n((__t=("+n+"))==null?'':__t)+\n'":o&&(c+="';\n"+o+"\n__p+='"),t})),c+="';\n";var f,h=t.variable;if(h){if(!l.test(h))throw new Error("variable is not a bare identifier: "+h)}else c="with(obj||{}){\n"+c+"}\n",h="obj";c="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+c+"return __p;\n";try{f=new Function(h,"_",c)}catch(e){throw e.source=c,e}var m=function(e){return f.call(this,e,o.default)};return m.source="function("+h+"){\n"+c+"}",m}},"./node_modules/underscore/modules/templateSettings.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/underscore.js");t.default=n.default.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g}},"./node_modules/underscore/modules/throttle.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/now.js");function o(e,t,s){var o,r,i,u,d=0;s||(s={});var l=function(){d=!1===s.leading?0:(0,n.default)(),o=null,u=e.apply(r,i),o||(r=i=null)},a=function(){var a=(0,n.default)();d||!1!==s.leading||(d=a);var c=t-(a-d);return r=this,i=arguments,c<=0||c>t?(o&&(clearTimeout(o),o=null),d=a,u=e.apply(r,i),o||(r=i=null)):o||!1===s.trailing||(o=setTimeout(l,c)),u};return a.cancel=function(){clearTimeout(o),d=0,o=r=i=null},a}},"./node_modules/underscore/modules/times.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/_optimizeCb.js");function o(e,t,s){var o=Array(Math.max(0,e));t=(0,n.default)(t,s,1);for(var r=0;r<e;r++)o[r]=t(r);return o}},"./node_modules/underscore/modules/toArray.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>c});var n=s("./node_modules/underscore/modules/isArray.js"),o=s("./node_modules/underscore/modules/_setup.js"),r=s("./node_modules/underscore/modules/isString.js"),i=s("./node_modules/underscore/modules/_isArrayLike.js"),u=s("./node_modules/underscore/modules/map.js"),d=s("./node_modules/underscore/modules/identity.js"),l=s("./node_modules/underscore/modules/values.js"),a=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;function c(e){return e?(0,n.default)(e)?o.slice.call(e):(0,r.default)(e)?e.match(a):(0,i.default)(e)?(0,u.default)(e,d.default):(0,l.default)(e):[]}},"./node_modules/underscore/modules/toPath.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/underscore.js"),o=s("./node_modules/underscore/modules/isArray.js");function r(e){return(0,o.default)(e)?e:[e]}n.default.toPath=r},"./node_modules/underscore/modules/underscore-array-methods.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/underscore.js"),o=s("./node_modules/underscore/modules/each.js"),r=s("./node_modules/underscore/modules/_setup.js"),i=s("./node_modules/underscore/modules/_chainResult.js");(0,o.default)(["pop","push","reverse","shift","sort","splice","unshift"],(function(e){var t=r.ArrayProto[e];n.default.prototype[e]=function(){var s=this._wrapped;return null!=s&&(t.apply(s,arguments),"shift"!==e&&"splice"!==e||0!==s.length||delete s[0]),(0,i.default)(this,s)}})),(0,o.default)(["concat","join","slice"],(function(e){var t=r.ArrayProto[e];n.default.prototype[e]=function(){var e=this._wrapped;return null!=e&&(e=t.apply(e,arguments)),(0,i.default)(this,e)}})),t.default=n.default},"./node_modules/underscore/modules/underscore.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/_setup.js");function o(e){return e instanceof o?e:this instanceof o?void(this._wrapped=e):new o(e)}o.VERSION=n.VERSION,o.prototype.value=function(){return this._wrapped},o.prototype.valueOf=o.prototype.toJSON=o.prototype.value,o.prototype.toString=function(){return String(this._wrapped)}},"./node_modules/underscore/modules/unescape.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/_createEscaper.js"),o=s("./node_modules/underscore/modules/_unescapeMap.js");t.default=(0,n.default)(o.default)},"./node_modules/underscore/modules/union.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/restArguments.js"),o=s("./node_modules/underscore/modules/uniq.js"),r=s("./node_modules/underscore/modules/_flatten.js");t.default=(0,n.default)((function(e){return(0,o.default)((0,r.default)(e,!0,!0))}))},"./node_modules/underscore/modules/uniq.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>u});var n=s("./node_modules/underscore/modules/isBoolean.js"),o=s("./node_modules/underscore/modules/_cb.js"),r=s("./node_modules/underscore/modules/_getLength.js"),i=s("./node_modules/underscore/modules/contains.js");function u(e,t,s,u){(0,n.default)(t)||(u=s,s=t,t=!1),null!=s&&(s=(0,o.default)(s,u));for(var d=[],l=[],a=0,c=(0,r.default)(e);a<c;a++){var f=e[a],h=s?s(f,a,e):f;t&&!s?(a&&l===h||d.push(f),l=h):s?(0,i.default)(l,h)||(l.push(h),d.push(f)):(0,i.default)(d,f)||d.push(f)}return d}},"./node_modules/underscore/modules/uniqueId.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=0;function o(e){var t=++n+"";return e?e+t:t}},"./node_modules/underscore/modules/unzip.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>i});var n=s("./node_modules/underscore/modules/max.js"),o=s("./node_modules/underscore/modules/_getLength.js"),r=s("./node_modules/underscore/modules/pluck.js");function i(e){for(var t=e&&(0,n.default)(e,o.default).length||0,s=Array(t),i=0;i<t;i++)s[i]=(0,r.default)(e,i);return s}},"./node_modules/underscore/modules/values.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/keys.js");function o(e){for(var t=(0,n.default)(e),s=t.length,o=Array(s),r=0;r<s;r++)o[r]=e[t[r]];return o}},"./node_modules/underscore/modules/where.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/underscore/modules/filter.js"),o=s("./node_modules/underscore/modules/matcher.js");function r(e,t){return(0,n.default)(e,(0,o.default)(t))}},"./node_modules/underscore/modules/without.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/restArguments.js"),o=s("./node_modules/underscore/modules/difference.js");t.default=(0,n.default)((function(e,t){return(0,o.default)(e,t)}))},"./node_modules/underscore/modules/wrap.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var n=s("./node_modules/underscore/modules/partial.js");function o(e,t){return(0,n.default)(t,e)}},"./node_modules/underscore/modules/zip.js":(e,t,s)=>{"use strict";s.r(t);var n=s("./node_modules/underscore/modules/restArguments.js"),o=s("./node_modules/underscore/modules/unzip.js");t.default=(0,n.default)(o.default)},"./src/global/global.mjs":(e,t,s)=>{"use strict";s.r(t);var n=s("./src/global/lazyload/lazyload.js");t.default=function(){(0,n.default)()}}},t={};function s(n){var o=t[n];if(void 0!==o)return o.exports;var r=t[n]={exports:{}};return e[n].call(r.exports,r,r.exports,s),r.exports}s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{"use strict";var e={};s.r(e);var t=s("./src/global/global.mjs"),n=s("./src/components/audio-player/audio-player.js"),o=s("./src/components/carousel/carousel.js"),r=s("./src/components/jumplink-banner/jumplink-banner.js"),i=s("./src/components/musette/musette.js"),u=s("./src/components/carousel/slide/video-slide.js"),d=s("./src/components/vimeo-player/vimeo-controls.js");const l={global:t.default,AudioPlayer:n.default,carousel:o.default,jumpLinkBanner:r.default,lesMusettes:i.default,videoSlide:u.default,vimeoPlayToggle:d.default};e.default=l})(),(()=>{"use strict";s.r(n),n.default={"bp-audio-player":"600px",bp1200:"1200px",bp900:"900px",colorBlack:"#000006",colorGrey500:"#c5c7c7",colorGrey900:"#333",colorWhite:"#fff"}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,