/*! For license information please see marble.js.LICENSE.txt */
(()=>{var e={"./node_modules/.pnpm/@vimeo+player@2.16.4/node_modules/@vimeo/player/dist/player.es.js":(e,o,n)=>{"use strict";function t(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}function s(e,o){for(var n=0;n<o.length;n++){var t=o[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}n.r(o),n.d(o,{default:()=>D});var r=void 0!==n.g&&"[object global]"==={}.toString.call(n.g);function d(e,o){return 0===e.indexOf(o.toLowerCase())?e:"".concat(o.toLowerCase()).concat(e.substr(0,1).toUpperCase()).concat(e.substr(1))}function u(e){return Boolean(e&&1===e.nodeType&&"nodeName"in e&&e.ownerDocument&&e.ownerDocument.defaultView)}function i(e){return!isNaN(parseFloat(e))&&isFinite(e)&&Math.floor(e)==e}function l(e){return/^(https?:)?\/\/((player|www)\.)?vimeo\.com(?=$|\/)/.test(e)}function a(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=e.id,n=e.url,t=o||n;if(!t)throw new Error("An id or url must be passed, either in an options object or as a data-vimeo-id or data-vimeo-url attribute.");if(i(t))return"https://vimeo.com/".concat(t);if(l(t))return t.replace("http:","https:");if(o)throw new TypeError("“".concat(o,"” is not a valid video id."));throw new TypeError("“".concat(t,"” is not a vimeo.com url."))}var c=void 0!==Array.prototype.indexOf,m="undefined"!=typeof window&&void 0!==window.postMessage;if(!(r||c&&m))throw new Error("Sorry, the Vimeo Player API is not available in this browser.");var p="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:{};!function(e){if(!e.WeakMap){var o=Object.prototype.hasOwnProperty,n=function(e,o,n){Object.defineProperty?Object.defineProperty(e,o,{configurable:!0,writable:!0,value:n}):e[o]=n};e.WeakMap=function(){function e(){if(void 0===this)throw new TypeError("Constructor WeakMap requires 'new'");if(n(this,"_id",r("_WeakMap")),arguments.length>0)throw new TypeError("WeakMap iterable is not supported")}function s(e,n){if(!t(e)||!o.call(e,"_id"))throw new TypeError(n+" method called on incompatible receiver "+typeof e)}function r(e){return e+"_"+d()+"."+d()}function d(){return Math.random().toString().substring(2)}return n(e.prototype,"delete",(function(e){if(s(this,"delete"),!t(e))return!1;var o=e[this._id];return!(!o||o[0]!==e)&&(delete e[this._id],!0)})),n(e.prototype,"get",(function(e){if(s(this,"get"),t(e)){var o=e[this._id];return o&&o[0]===e?o[1]:void 0}})),n(e.prototype,"has",(function(e){if(s(this,"has"),!t(e))return!1;var o=e[this._id];return!(!o||o[0]!==e)})),n(e.prototype,"set",(function(e,o){if(s(this,"set"),!t(e))throw new TypeError("Invalid value used as weak map key");var r=e[this._id];return r&&r[0]===e?(r[1]=o,this):(n(e,this._id,[e,o]),this)})),n(e,"_polyfill",!0),e}()}function t(e){return Object(e)===e}}("undefined"!=typeof self?self:"undefined"!=typeof window?window:p);var f,h,_=(f=function(e){var o,n,t;t=function(){var e,o,n,t=Object.prototype.toString,s="undefined"!=typeof setImmediate?function(e){return setImmediate(e)}:setTimeout;try{Object.defineProperty({},"x",{}),e=function(e,o,n,t){return Object.defineProperty(e,o,{value:n,writable:!0,configurable:!1!==t})}}catch(o){e=function(e,o,n){return e[o]=n,e}}function r(e,t){n.add(e,t),o||(o=s(n.drain))}function d(e){var o,n=typeof e;return null==e||"object"!=n&&"function"!=n||(o=e.then),"function"==typeof o&&o}function u(){for(var e=0;e<this.chain.length;e++)i(this,1===this.state?this.chain[e].success:this.chain[e].failure,this.chain[e]);this.chain.length=0}function i(e,o,n){var t,s;try{!1===o?n.reject(e.msg):(t=!0===o?e.msg:o.call(void 0,e.msg))===n.promise?n.reject(TypeError("Promise-chain cycle")):(s=d(t))?s.call(t,n.resolve,n.reject):n.resolve(t)}catch(e){n.reject(e)}}function l(e){var o,n=this;if(!n.triggered){n.triggered=!0,n.def&&(n=n.def);try{(o=d(e))?r((function(){var t=new m(n);try{o.call(e,(function(){l.apply(t,arguments)}),(function(){a.apply(t,arguments)}))}catch(e){a.call(t,e)}})):(n.msg=e,n.state=1,n.chain.length>0&&r(u,n))}catch(e){a.call(new m(n),e)}}}function a(e){var o=this;o.triggered||(o.triggered=!0,o.def&&(o=o.def),o.msg=e,o.state=2,o.chain.length>0&&r(u,o))}function c(e,o,n,t){for(var s=0;s<o.length;s++)!function(s){e.resolve(o[s]).then((function(e){n(s,e)}),t)}(s)}function m(e){this.def=e,this.triggered=!1}function p(e){this.promise=e,this.state=0,this.triggered=!1,this.chain=[],this.msg=void 0}function f(e){if("function"!=typeof e)throw TypeError("Not a function");if(0!==this.__NPO__)throw TypeError("Not a promise");this.__NPO__=1;var o=new p(this);this.then=function(e,n){var t={success:"function"!=typeof e||e,failure:"function"==typeof n&&n};return t.promise=new this.constructor((function(e,o){if("function"!=typeof e||"function"!=typeof o)throw TypeError("Not a function");t.resolve=e,t.reject=o})),o.chain.push(t),0!==o.state&&r(u,o),t.promise},this.catch=function(e){return this.then(void 0,e)};try{e.call(void 0,(function(e){l.call(o,e)}),(function(e){a.call(o,e)}))}catch(e){a.call(o,e)}}n=function(){var e,n,t;function s(e,o){this.fn=e,this.self=o,this.next=void 0}return{add:function(o,r){t=new s(o,r),n?n.next=t:e=t,n=t,t=void 0},drain:function(){var t=e;for(e=n=o=void 0;t;)t.fn.call(t.self),t=t.next}}}();var h=e({},"constructor",f,!1);return f.prototype=h,e(h,"__NPO__",0,!1),e(f,"resolve",(function(e){return e&&"object"==typeof e&&1===e.__NPO__?e:new this((function(o,n){if("function"!=typeof o||"function"!=typeof n)throw TypeError("Not a function");o(e)}))})),e(f,"reject",(function(e){return new this((function(o,n){if("function"!=typeof o||"function"!=typeof n)throw TypeError("Not a function");n(e)}))})),e(f,"all",(function(e){var o=this;return"[object Array]"!=t.call(e)?o.reject(TypeError("Not an array")):0===e.length?o.resolve([]):new o((function(n,t){if("function"!=typeof n||"function"!=typeof t)throw TypeError("Not a function");var s=e.length,r=Array(s),d=0;c(o,e,(function(e,o){r[e]=o,++d===s&&n(r)}),t)}))})),e(f,"race",(function(e){var o=this;return"[object Array]"!=t.call(e)?o.reject(TypeError("Not an array")):new o((function(n,t){if("function"!=typeof n||"function"!=typeof t)throw TypeError("Not a function");c(o,e,(function(e,o){n(o)}),t)}))})),f},(n=p)[o="Promise"]=n[o]||t(),e.exports&&(e.exports=n[o])},f(h={exports:{}},h.exports),h.exports),v=new WeakMap;function j(e,o,n){var t=v.get(e.element)||{};o in t||(t[o]=[]),t[o].push(n),v.set(e.element,t)}function g(e,o){return(v.get(e.element)||{})[o]||[]}function y(e,o,n){var t=v.get(e.element)||{};if(!t[o])return!0;if(!n)return t[o]=[],v.set(e.element,t),!0;var s=t[o].indexOf(n);return-1!==s&&t[o].splice(s,1),v.set(e.element,t),t[o]&&0===t[o].length}function b(e,o){var n=v.get(e);v.set(o,n),v.delete(e)}var E=["autopause","autoplay","background","byline","color","controls","dnt","height","id","interactive_params","keyboard","loop","maxheight","maxwidth","muted","playsinline","portrait","responsive","speed","texttrack","title","transparent","url","width"];function w(e){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return E.reduce((function(o,n){var t=e.getAttribute("data-vimeo-".concat(n));return(t||""===t)&&(o[n]=""===t?1:t),o}),o)}function k(e,o){var n=e.html;if(!o)throw new TypeError("An element must be provided");if(null!==o.getAttribute("data-vimeo-initialized"))return o.querySelector("iframe");var t=document.createElement("div");return t.innerHTML=n,o.appendChild(t.firstChild),o.setAttribute("data-vimeo-initialized","true"),o.querySelector("iframe")}function S(e){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0;return new Promise((function(t,s){if(!l(e))throw new TypeError("“".concat(e,"” is not a vimeo.com url."));var r="https://vimeo.com/api/oembed.json?url=".concat(encodeURIComponent(e));for(var d in o)o.hasOwnProperty(d)&&(r+="&".concat(d,"=").concat(encodeURIComponent(o[d])));var u="XDomainRequest"in window?new XDomainRequest:new XMLHttpRequest;u.open("GET",r,!0),u.onload=function(){if(404!==u.status)if(403!==u.status)try{var o=JSON.parse(u.responseText);if(403===o.domain_status_code)return k(o,n),void s(new Error("“".concat(e,"” is not embeddable.")));t(o)}catch(e){s(e)}else s(new Error("“".concat(e,"” is not embeddable.")));else s(new Error("“".concat(e,"” was not found.")))},u.onerror=function(){var e=u.status?" (".concat(u.status,")"):"";s(new Error("There was an error fetching the embed code from Vimeo".concat(e,".")))},u.send()}))}function x(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){return console.warn(e),{}}return e}function A(e,o,n){if(e.element.contentWindow&&e.element.contentWindow.postMessage){var t={method:o};void 0!==n&&(t.value=n);var s=parseFloat(navigator.userAgent.toLowerCase().replace(/^.*msie (\d+).*$/,"$1"));s>=8&&s<10&&(t=JSON.stringify(t)),e.element.contentWindow.postMessage(t,e.origin)}}function L(e,o){var n,t=[];if((o=x(o)).event){if("error"===o.event)g(e,o.data.method).forEach((function(n){var t=new Error(o.data.message);t.name=o.data.name,n.reject(t),y(e,o.data.method,n)}));t=g(e,"event:".concat(o.event)),n=o.data}else if(o.method){var s=function(e,o){var n=g(e,o);if(n.length<1)return!1;var t=n.shift();return y(e,o,t),t}(e,o.method);s&&(t.push(s),n=o.value)}t.forEach((function(o){try{if("function"==typeof o)return void o.call(e,n);o.resolve(n)}catch(e){}}))}var C=new WeakMap,T=new WeakMap,P={},I=function(){function e(o){var n=this,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(t(this,e),window.jQuery&&o instanceof jQuery&&(o.length>1&&window.console&&console.warn&&console.warn("A jQuery object with multiple elements was passed, using the first element."),o=o[0]),"undefined"!=typeof document&&"string"==typeof o&&(o=document.getElementById(o)),!u(o))throw new TypeError("You must pass either a valid element or a valid id.");if("IFRAME"!==o.nodeName){var r=o.querySelector("iframe");r&&(o=r)}if("IFRAME"===o.nodeName&&!l(o.getAttribute("src")||""))throw new Error("The player element passed isn’t a Vimeo embed.");if(C.has(o))return C.get(o);this._window=o.ownerDocument.defaultView,this.element=o,this.origin="*";var d=new _((function(e,t){if(n._onMessage=function(o){if(l(o.origin)&&n.element.contentWindow===o.source){"*"===n.origin&&(n.origin=o.origin);var s=x(o.data);if(s&&"error"===s.event&&s.data&&"ready"===s.data.method){var r=new Error(s.data.message);return r.name=s.data.name,void t(r)}var d=s&&"ready"===s.event,u=s&&"ping"===s.method;if(d||u)return n.element.setAttribute("data-ready","true"),void e();L(n,s)}},n._window.addEventListener("message",n._onMessage),"IFRAME"!==n.element.nodeName){var r=w(o,s);S(a(r),r,o).then((function(e){var t=k(e,o);return n.element=t,n._originalElement=o,b(o,t),C.set(n.element,n),e})).catch(t)}}));if(T.set(this,d),C.set(this.element,this),"IFRAME"===this.element.nodeName&&A(this,"ping"),P.isEnabled){var i=function(){return P.exit()};this.fullscreenchangeHandler=function(){P.isFullscreen?j(n,"event:exitFullscreen",i):y(n,"event:exitFullscreen",i),n.ready().then((function(){A(n,"fullscreenchange",P.isFullscreen)}))},P.on("fullscreenchange",this.fullscreenchangeHandler)}return this}var o,n,r;return o=e,n=[{key:"callMethod",value:function(e){var o=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new _((function(t,s){return o.ready().then((function(){j(o,e,{resolve:t,reject:s}),A(o,e,n)})).catch(s)}))}},{key:"get",value:function(e){var o=this;return new _((function(n,t){return e=d(e,"get"),o.ready().then((function(){j(o,e,{resolve:n,reject:t}),A(o,e)})).catch(t)}))}},{key:"set",value:function(e,o){var n=this;return new _((function(t,s){if(e=d(e,"set"),null==o)throw new TypeError("There must be a value to set.");return n.ready().then((function(){j(n,e,{resolve:t,reject:s}),A(n,e,o)})).catch(s)}))}},{key:"on",value:function(e,o){if(!e)throw new TypeError("You must pass an event name.");if(!o)throw new TypeError("You must pass a callback function.");if("function"!=typeof o)throw new TypeError("The callback must be a function.");0===g(this,"event:".concat(e)).length&&this.callMethod("addEventListener",e).catch((function(){})),j(this,"event:".concat(e),o)}},{key:"off",value:function(e,o){if(!e)throw new TypeError("You must pass an event name.");if(o&&"function"!=typeof o)throw new TypeError("The callback must be a function.");y(this,"event:".concat(e),o)&&this.callMethod("removeEventListener",e).catch((function(e){}))}},{key:"loadVideo",value:function(e){return this.callMethod("loadVideo",e)}},{key:"ready",value:function(){var e=T.get(this)||new _((function(e,o){o(new Error("Unknown player. Probably unloaded."))}));return _.resolve(e)}},{key:"addCuePoint",value:function(e){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.callMethod("addCuePoint",{time:e,data:o})}},{key:"removeCuePoint",value:function(e){return this.callMethod("removeCuePoint",e)}},{key:"enableTextTrack",value:function(e,o){if(!e)throw new TypeError("You must pass a language.");return this.callMethod("enableTextTrack",{language:e,kind:o})}},{key:"disableTextTrack",value:function(){return this.callMethod("disableTextTrack")}},{key:"pause",value:function(){return this.callMethod("pause")}},{key:"play",value:function(){return this.callMethod("play")}},{key:"requestFullscreen",value:function(){return P.isEnabled?P.request(this.element):this.callMethod("requestFullscreen")}},{key:"exitFullscreen",value:function(){return P.isEnabled?P.exit():this.callMethod("exitFullscreen")}},{key:"getFullscreen",value:function(){return P.isEnabled?_.resolve(P.isFullscreen):this.get("fullscreen")}},{key:"requestPictureInPicture",value:function(){return this.callMethod("requestPictureInPicture")}},{key:"exitPictureInPicture",value:function(){return this.callMethod("exitPictureInPicture")}},{key:"getPictureInPicture",value:function(){return this.get("pictureInPicture")}},{key:"unload",value:function(){return this.callMethod("unload")}},{key:"destroy",value:function(){var e=this;return new _((function(o){if(T.delete(e),C.delete(e.element),e._originalElement&&(C.delete(e._originalElement),e._originalElement.removeAttribute("data-vimeo-initialized")),e.element&&"IFRAME"===e.element.nodeName&&e.element.parentNode&&(e.element.parentNode.parentNode&&e._originalElement&&e._originalElement!==e.element.parentNode?e.element.parentNode.parentNode.removeChild(e.element.parentNode):e.element.parentNode.removeChild(e.element)),e.element&&"DIV"===e.element.nodeName&&e.element.parentNode){e.element.removeAttribute("data-vimeo-initialized");var n=e.element.querySelector("iframe");n&&n.parentNode&&(n.parentNode.parentNode&&e._originalElement&&e._originalElement!==n.parentNode?n.parentNode.parentNode.removeChild(n.parentNode):n.parentNode.removeChild(n))}e._window.removeEventListener("message",e._onMessage),P.isEnabled&&P.off("fullscreenchange",e.fullscreenchangeHandler),o()}))}},{key:"getAutopause",value:function(){return this.get("autopause")}},{key:"setAutopause",value:function(e){return this.set("autopause",e)}},{key:"getBuffered",value:function(){return this.get("buffered")}},{key:"getCameraProps",value:function(){return this.get("cameraProps")}},{key:"setCameraProps",value:function(e){return this.set("cameraProps",e)}},{key:"getChapters",value:function(){return this.get("chapters")}},{key:"getCurrentChapter",value:function(){return this.get("currentChapter")}},{key:"getColor",value:function(){return this.get("color")}},{key:"setColor",value:function(e){return this.set("color",e)}},{key:"getCuePoints",value:function(){return this.get("cuePoints")}},{key:"getCurrentTime",value:function(){return this.get("currentTime")}},{key:"setCurrentTime",value:function(e){return this.set("currentTime",e)}},{key:"getDuration",value:function(){return this.get("duration")}},{key:"getEnded",value:function(){return this.get("ended")}},{key:"getLoop",value:function(){return this.get("loop")}},{key:"setLoop",value:function(e){return this.set("loop",e)}},{key:"setMuted",value:function(e){return this.set("muted",e)}},{key:"getMuted",value:function(){return this.get("muted")}},{key:"getPaused",value:function(){return this.get("paused")}},{key:"getPlaybackRate",value:function(){return this.get("playbackRate")}},{key:"setPlaybackRate",value:function(e){return this.set("playbackRate",e)}},{key:"getPlayed",value:function(){return this.get("played")}},{key:"getQualities",value:function(){return this.get("qualities")}},{key:"getQuality",value:function(){return this.get("quality")}},{key:"setQuality",value:function(e){return this.set("quality",e)}},{key:"getSeekable",value:function(){return this.get("seekable")}},{key:"getSeeking",value:function(){return this.get("seeking")}},{key:"getTextTracks",value:function(){return this.get("textTracks")}},{key:"getVideoEmbedCode",value:function(){return this.get("videoEmbedCode")}},{key:"getVideoId",value:function(){return this.get("videoId")}},{key:"getVideoTitle",value:function(){return this.get("videoTitle")}},{key:"getVideoWidth",value:function(){return this.get("videoWidth")}},{key:"getVideoHeight",value:function(){return this.get("videoHeight")}},{key:"getVideoUrl",value:function(){return this.get("videoUrl")}},{key:"getVolume",value:function(){return this.get("volume")}},{key:"setVolume",value:function(e){return this.set("volume",e)}}],n&&s(o.prototype,n),r&&s(o,r),e}();r||(P=function(){var e=function(){for(var e,o=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],n=0,t=o.length,s={};n<t;n++)if((e=o[n])&&e[1]in document){for(n=0;n<e.length;n++)s[o[0][n]]=e[n];return s}return!1}(),o={fullscreenchange:e.fullscreenchange,fullscreenerror:e.fullscreenerror},n={request:function(o){return new Promise((function(t,s){var r=function e(){n.off("fullscreenchange",e),t()};n.on("fullscreenchange",r);var d=(o=o||document.documentElement)[e.requestFullscreen]();d instanceof Promise&&d.then(r).catch(s)}))},exit:function(){return new Promise((function(o,t){if(n.isFullscreen){var s=function e(){n.off("fullscreenchange",e),o()};n.on("fullscreenchange",s);var r=document[e.exitFullscreen]();r instanceof Promise&&r.then(s).catch(t)}else o()}))},on:function(e,n){var t=o[e];t&&document.addEventListener(t,n)},off:function(e,n){var t=o[e];t&&document.removeEventListener(t,n)}};return Object.defineProperties(n,{isFullscreen:{get:function(){return Boolean(document[e.fullscreenElement])}},element:{enumerable:!0,get:function(){return document[e.fullscreenElement]}},isEnabled:{enumerable:!0,get:function(){return Boolean(document[e.fullscreenEnabled])}}}),n}(),function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document,o=[].slice.call(e.querySelectorAll("[data-vimeo-id], [data-vimeo-url]")),n=function(e){"console"in window&&console.error&&console.error("There was an error creating an embed: ".concat(e))};o.forEach((function(e){try{if(null!==e.getAttribute("data-vimeo-defer"))return;var o=w(e);S(a(o),o,e).then((function(o){return k(o,e)})).catch(n)}catch(e){n(e)}}))}(),function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document;if(!window.VimeoPlayerResizeEmbeds_){window.VimeoPlayerResizeEmbeds_=!0;var o=function(o){if(l(o.origin)&&o.data&&"spacechange"===o.data.event)for(var n=e.querySelectorAll("iframe"),t=0;t<n.length;t++)if(n[t].contentWindow===o.source){n[t].parentElement.style.paddingBottom="".concat(o.data.data[0].bottom,"px");break}};window.addEventListener("message",o)}}());const D=I},"./src/components/alert/index.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t=()=>{document.querySelector(".js-marble-dismissable-alert")&&document.querySelector(".js-marble-dismiss-alert-button").addEventListener("click",(e=>{e.target.closest(".js-marble-dismissable-alert").classList.remove("show")}))}},"./src/components/analytics-logger/index.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});class t{constructor(){console.trace("New analytics logger instantiated")}sendCustomEvent(e){try{console.log("Analytics event: ",e)}catch(e){console.error(e)}}}},"./src/components/audio-player/audio-player.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>i});n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/modules/es.array.includes.js");var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/index-all.js"),s=n("./src/components/audio-player/time-formatter.js"),r=n("./src/components/audio-player/cover-image-template.js"),d=n("./src/components/analytics-logger/index.js");const u={darkMode:!1,seekHelperDuration:10};const i=class{constructor(e){var o,n,t,s;let{wrapperEl:r,options:i={}}=e;this.wrapperEl=r,this.audioEl=r.querySelector(".js-audio-player__audio"),this.coverImageWrapperEl=r.querySelector(".js-audio-player__image-wrapper"),this.darkModeQuery=window.matchMedia("(prefers-color-scheme: dark)"),this.progressBarCanvasEl=r.querySelector(".js-audio-player__progress-bar"),this.progressBarCanvas=this.progressBarCanvasEl.getContext("2d"),this.playButtonEl=r.querySelector(".js-audio-player__play"),this.playlistTracks=r.querySelectorAll(".js-audio-player__playlist-track"),this.currentTimeEl=r.querySelector(".js-audio-player__current-time"),this.timeRemainingEl=r.querySelector(".js-audio-player__remaining"),this.seekBackHelperEl=r.querySelector(".js-audio-player__seek-back-helper"),this.seekForwardHelperEl=r.querySelector(".js-audio-player__seek-forward-helper"),this.scrubStartAreaEl=r.querySelector(".js-audio-player__scrubbing-start-area"),this.scrubbableAreaEl=r.querySelector(".js-audio-player__scrubbable-area"),this.subtitleEl=r.querySelector(".js-audio-player__subtitle"),this.titleEl=r.querySelector(".js-audio-player__title"),this.transcriptEl=r.querySelector(".js-audio-player__transcript"),this.transcriptSection=r.querySelector(".js-audio-player__transcript-section"),this.transcriptToggle=null===(o=this.transcriptSection)||void 0===o?void 0:o.querySelector(".js-audio-player__transcript-toggle"),this.transcriptToggleText=null===(n=this.transcriptSection)||void 0===n?void 0:n.querySelector(".js-transcript__toggle-text"),this.transcriptWrapper=null===(t=this.transcriptSection)||void 0===t?void 0:t.querySelector(".js-audio-player__transcript-wrapper"),this.quoteExpanderDefaultText=null==this||null===(s=this.transcriptToggleText)||void 0===s?void 0:s.innerHTML,this.options={...u,...i},this.isDarkMode=this.options.darkMode||this.wrapperEl.classList.contains("inverted-colors")||this.darkModeQuery.matches,this.seekHelperDuration=this.options.seekHelperDuration,this.analyticsSender=this.options.analyticsSender||new d.default,this.isScrubbing=!1,this.currentTrack=JSON.parse(this.audioEl.dataset.track),this.amountPlayed=0,this.beforeTrackChange=new Event("beforeTrackChange"),this.afterTrackChange=new Event("afterTrackChange"),["_handleTimeChange","beginScrubbing","endScrubbing","formatTranscript","handleTrackChange","handleEnd","handleTimeChange","handleTranscriptToggle","hasTranscript","quickSeekBack","quickSeekForward","scrub","setMetaData","setTranscript","togglePlaying"].forEach((e=>{this[e]=this[e].bind(this)})),this.applyListeners(),this.setTranscript(),this.analyticsSender.sendCustomEvent({event:"UniversalAudioPlayer:playerLoaded",playerId:this.wrapperEl.id})}applyListeners(){var e,o;this.audioEl.addEventListener("loadedmetadata",this.setMetaData),this.playButtonEl.addEventListener("touchstart",this.togglePlaying,{passive:!1}),this.playButtonEl.addEventListener("click",this.togglePlaying),this.audioEl.addEventListener("timeupdate",this.handleTimeChange),this.audioEl.addEventListener("ended",this.handleEnd),this.audioEl.addEventListener("play",(()=>this.handlePlay())),this.audioEl.addEventListener("pause",(()=>this.handlePause())),this.playlistTracks.forEach((e=>{e.addEventListener("click",this.handleTrackChange)})),null===(e=this.playlistTracks[0])||void 0===e||e.classList.add("is-active-track"),this.seekBackHelperEl.addEventListener("click",this.quickSeekBack),this.seekForwardHelperEl.addEventListener("click",this.quickSeekForward),this.scrubStartAreaEl.addEventListener("touchstart",this.beginScrubbing,{passive:!1}),this.scrubStartAreaEl.addEventListener("mousedown",this.beginScrubbing),null===(o=this.transcriptToggle)||void 0===o||o.addEventListener("click",this.handleTranscriptToggle),"function"==typeof this.darkModeQuery.addEventListener&&this.darkModeQuery.addEventListener("change",(e=>this.isDarkMode=e.matches))}handleTrackChange(e){const o=e.currentTarget;if(o.classList.contains("is-active-track"))return!1;this.wrapperEl.dispatchEvent(this.beforeTrackChange),this.wrapperEl.querySelector(".is-active-track").classList.remove("is-active-track"),o.classList.add("is-active-track");let n=JSON.parse(o.dataset.track);this.setTrack(n),this.setTranscript(),this.audioEl.play(),this.wrapperEl.dispatchEvent(this.afterTrackChange)}setTrack(e){this.currentTrack=e,this.audioEl.dataset.track=e,this.audioEl.querySelector("source").src=e.audio,this.titleEl.innerHTML=(0,t.escape)(e.title),this.subtitleEl.innerHTML=(0,t.escape)(e.description),this.coverImageWrapperEl.innerHTML=(0,r.default)(e.image),this.amountPlayed=0,this.audioEl.load()}hasTranscript(){var e,o;return!(null===(e=this.currentTrack)||void 0===e||null===(o=e.transcript)||void 0===o||!o.length)}setTranscript(){this.transcriptSection.classList.remove(`audio-player__transcript-section--transcript-${!this.hasTranscript()}`),this.transcriptSection.classList.add(`audio-player__transcript-section--transcript-${this.hasTranscript()}`),this.transcriptEl.innerHTML=this.hasTranscript()?this.formatTranscript(this.currentTrack.transcript):""}formatTranscript(e){return e.replace(/\n|\r\n/gim,"<br />")}handleTimeChange(){requestAnimationFrame(this._handleTimeChange)}_handleTimeChange(){const e=this.audioEl.duration||0,o=this.audioEl.currentTime||0;this.setDisplayTime(o,e),this.drawProgress(o,e),this.calculatePlayAnalytics(o,e)}calculatePlayAnalytics(e,o){if(e&&o){let n=Math.round(e/o*10)/10;this.amountPlayed<n&&(this.amountPlayed=n,this.analyticsSender.sendCustomEvent({event:"UniversalAudioPlayer:playProgress:",trackId:this.currentTrack.id,trackTitle:this.currentTrack.title,progress:this.amountPlayed}))}}handleEnd(){this.handleTimeChange(),this.audioEl.pause()}setDisplayTime(e,o){this.currentTimeEl.innerHTML=(0,s.default)(e),this.timeRemainingEl.innerHTML=(0,s.default)(o-e)}canUpdateAuotmatically(){return!this.isScrubbing}drawProgress(e,o){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1e4;this.progressBarCanvas.save(),this.progressBarCanvas.clearRect(0,0,n,6),this.progressBarCanvas.fillStyle="transparent",this.progressBarCanvas.fillRect(0,0,n,6),this.progressBarCanvas.fillStyle=this.isDarkMode?"#ffffff":"#333333",this.progressBarCanvas.fillRect(0,0,e/o*n,6),this.progressBarCanvas.restore()}beginScrubbing(e){e.preventDefault(),this.isScrubbing=!0,this.initializeScrubbingListeners(),this.scrub(e)}initializeScrubbingListeners(){this.scrubbableAreaEl.addEventListener("touchmove",this.scrub,{passive:!1}),this.scrubbableAreaEl.addEventListener("touchend",this.endScrubbing,{passive:!1}),this.scrubbableAreaEl.addEventListener("touchcancel",this.endScrubbing,{passive:!1}),this.scrubbableAreaEl.addEventListener("mousemove",this.scrub),this.scrubbableAreaEl.addEventListener("mouseup",this.endScrubbing),this.scrubbableAreaEl.addEventListener("mouseleave",this.endScrubbing)}scrub(e){if(e.preventDefault(),this.isScrubbing){let o,n=this.progressBarCanvasEl.getBoundingClientRect();o=["touchstart","touchmove"].includes(e.type)?e.touches[0].clientX-n.left:e.offsetX;let t=o/n.width*this.audioEl.duration;this.audioEl.currentTime=t}}endScrubbing(e){e.preventDefault(),this.isScrubbing=!1,this.cleanUpScrubListeners()}cleanUpScrubListeners(){this.scrubbableAreaEl.removeEventListener("touchmove",this.scrub,{passive:!1}),this.scrubbableAreaEl.removeEventListener("touchend",this.endScrubbing,{passive:!1}),this.scrubbableAreaEl.removeEventListener("touchcancel",this.endScrubbing,{passive:!1}),this.scrubbableAreaEl.removeEventListener("mousemove",this.scrub),this.scrubbableAreaEl.removeEventListener("mouseup",this.endScrubbing),this.scrubbableAreaEl.removeEventListener("mouseleave",this.endScrubbing)}setMetaData(){var e,o;if(!("mediaSession"in navigator))return!1;let n=[],t=null===(e=this.currentTrack)||void 0===e||null===(o=e.image)||void 0===o?void 0:o.w560;t&&n.push({src:t}),navigator.mediaSession.metadata=new MediaMetadata({title:this.currentTrack.title,artist:this.currentTrack.description,artwork:n})}togglePlaying(e){e.preventDefault(),this.audioEl.paused?(document.querySelectorAll("audio").forEach((e=>e.pause())),this.audioEl.play()):this.audioEl.pause()}handlePlay(){this.wrapperEl.classList.add("is-playing"),this.analyticsSender.sendCustomEvent({event:"UniversalAudioPlayer:trackPlayed",trackId:this.currentTrack.id,trackTitle:this.currentTrack.title})}handlePause(){this.wrapperEl.classList.remove("is-playing")}quickSeekBack(e){e.preventDefault();const o=Math.max(0,this.audioEl.currentTime-this.seekHelperDuration);this.audioEl.currentTime=o}quickSeekForward(e){e.preventDefault();const o=Math.min(this.audioEl.duration,this.audioEl.currentTime+this.seekHelperDuration);this.audioEl.currentTime=o}handleTranscriptToggle(e){e.preventDefault(),this.transcriptSection.classList.contains("transcript-is-open")?(this.transcriptToggleText.innerHTML=this.quoteExpanderDefaultText,this.transcriptSection.classList.remove("transcript-is-open")):(this.transcriptSection.classList.add("transcript-is-open"),this.transcriptToggleText.innerHTML="Hide Transcript",this.analyticsSender.sendCustomEvent({event:"UniversalAudioPlayer:transcriptOpened",trackId:this.currentTrack.id,trackTitle:this.currentTrack.title}))}}},"./src/components/audio-player/cover-image-template.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/index-all.js");const s=e=>{let o=String.raw;return e?o`<img
		class="audio-player__cover-image"
		alt="${(0,t.escape)(e.alt)}"
		width="${e.width}"
		height="${e.height}"
		src="${e.w560}"
		srcset="
			${e.w2400} 2400w,
			${e.w1600} 1600w,
			${e.w1200} 1200w,
			${e.w840} 840w,
			${e.w560} 560w,
			${e.w280} 280w"
		sizes="(max-width: 600px) 100vw, 200px"
	/>`:""}},"./src/components/audio-player/time-formatter.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t=e=>new Date(1e3*e).toISOString().substr(11,8).replace(/^00:0/i,"")},"./src/components/carousel/arrowShape.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t={x0:15,x1:65,y1:45,x2:70,y2:40,x3:27}},"./src/components/carousel/carousel.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>u,flickityDefaults:()=>d});var t=n("./src/global/settings.js"),s=n("./node_modules/.pnpm/flickity-imagesloaded@2.0.0/node_modules/flickity-imagesloaded/flickity-imagesloaded.js"),r=n.n(s);const d={accessibility:!0,autoPlay:!1,cellAlign:"left",prevNextButtons:!0,pageDots:!1,friction:.4,contain:!0,resize:!0,wrapAround:!1,imagesLoaded:!1,arrowShape:n("./src/components/carousel/arrowShape.js").default},u=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{selectorString:o}=e;o=o||".js-carousel",o=`${o}:not(.${t.default.initializedClassName})`;let n={...d,...e};const s=document.querySelectorAll(o);s.forEach((e=>{const o=new(r())(e,n).on("change",(function(){this.cells.forEach((e=>{const o=e.element.querySelector("video");null!==o&&o.pause()}));const e=this.selectedElements[0].querySelector("video");null!==e&&e.play()})),s=()=>{e.classList.add("is-loading");!e.querySelector(".loading")&&(o.resize(),e.classList.remove("is-loading"))};e.addEventListener("image-loaded",s,!1),e.addEventListener("image-errored",s,!1),e.classList.add(t.default.initializedClassName),e.setAttribute("role","region"),e.setAttribute("aria-label","Interactive slide carousel. Use left and right arrows to change slides.")}))}},"./src/components/carousel/slide/video-slide.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./src/global/settings.js");function s(){const e=`.js-carousel-slide__video:not(.${t.default.initializedClassName})`,o=[...document.querySelectorAll(e)].map((e=>"VIDEO"===e.nodeName?e:e.querySelector("video")));o.forEach((e=>{e.onplay=()=>{return(n=e).dispatchEvent(new CustomEvent("video-playing",{bubbles:!0})),void o.forEach((e=>{n!==e&&e.pause()}));var n},e.addEventListener("click",(()=>{e.play()})),e.classList.add(t.default.initializedClassName)}))}},"./src/components/jumplink-banner/jumplink-banner.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./src/global/settings.js"),s=n("./node_modules/.pnpm/smoothscroll-polyfill@0.4.4/node_modules/smoothscroll-polyfill/dist/smoothscroll.js"),r=n.n(s);const d=function(){r().polyfill(),document.querySelectorAll(`.js-jump-link:not(.${t.default.initializedClassName})`).forEach((e=>{e.addEventListener("click",(o=>{o.preventDefault(),document.querySelector(e.getAttribute("href")).scrollIntoView({behavior:"smooth"})})),e.classList.add(t.default.initializedClassName)}))}},"./src/components/musette/musette.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d,initialize:()=>r});var t=n("./src/global/settings.js");class s{constructor(e){this.musetteEl=e,this.musetteWrapper=this.createWrapper(),this.mouseIsBeingDragged=!1,this.pos={top:0,left:0,x:0,y:0},this.observer=new IntersectionObserver(this.handleIntersections.bind(this),{root:this.musetteEl,rootMargin:"0px",threshold:.9}),Array.from(this.musetteEl.children).forEach((e=>{this.observer.observe(e)})),this.mouseDownHandler=this.mouseDownHandler.bind(this),this.mouseMoveHandler=this.mouseMoveHandler.bind(this),this.mouseUpHandler=this.mouseUpHandler.bind(this),this.musetteEl.addEventListener("mousedown",this.mouseDownHandler)}handleIntersections(e){e.forEach((e=>{e.isIntersecting?(this.showFocusables(e.target),e.target==this.musetteEl.firstElementChild&&this.musetteWrapper.classList.remove("musette-has-left-button"),e.target==this.musetteEl.lastElementChild&&this.musetteWrapper.classList.remove("musette-has-right-button")):(this.hideFocusables(e.target),e.target==this.musetteEl.firstElementChild&&this.musetteWrapper.classList.add("musette-has-left-button"),e.target==this.musetteEl.lastElementChild&&this.musetteWrapper.classList.add("musette-has-right-button"))}))}mouseDownHandler(e){e.preventDefault(),this.pos={left:this.musetteEl.scrollLeft,x:e.clientX},this.musetteEl.addEventListener("mousemove",this.mouseMoveHandler),this.musetteEl.addEventListener("mouseup",this.mouseUpHandler),this.musetteEl.addEventListener("mouseleave",this.mouseUpHandler)}mouseMoveHandler(e){this.mouseIsBeingDragged=!0;const o=e.clientX-this.pos.x;this.musetteEl.scrollLeft=this.pos.left-o}mouseUpHandler(){this.musetteEl.removeEventListener("mousemove",this.mouseMoveHandler),this.musetteEl.removeEventListener("mouseup",this.mouseUpHandler),this.musetteEl.removeEventListener("mouseleave",this.mouseUpHandler);let e=this.mouseIsBeingDragged?"addEventListener":"removeEventListener";this.musetteEl.querySelectorAll("a").forEach((o=>{o[e]("click",this.preventClick)})),this.mouseIsBeingDragged=!1}preventClick(e){e.preventDefault(),e.stopImmediatePropagation()}createWrapper(){const e=document.createElement("div");e.classList.add("musette-wrapper");const o=document.createElement("button");o.classList.add("musette-move-left"),o.ariaLabel="Previous items",o.addEventListener("click",this.handleButtonScrollLeft.bind(this));const n=document.createElement("button");return n.classList.add("musette-move-right"),n.ariaLabel="Next items",n.addEventListener("click",this.handleButtonScrollRight.bind(this)),this.musetteEl.parentNode.insertBefore(e,this.musetteEl),e.appendChild(this.musetteEl),e.appendChild(o),e.appendChild(n),e}handleButtonScrollLeft(){this.musetteEl.scrollTo({left:this.musetteEl.scrollLeft-this.musetteEl.offsetWidth,behavior:"smooth"})}handleButtonScrollRight(){this.musetteEl.scrollTo({left:this.musetteEl.scrollLeft+this.musetteEl.offsetWidth,behavior:"smooth"})}hideFocusables(e){e.ariaHidden="true",e.querySelectorAll(t.default.FOCUSABLES_SELECTOR).forEach((e=>{e.setAttribute("aria-hidden","true"),e.setAttribute("tabindex","-1")}))}showFocusables(e){e.ariaHidden="false",e.querySelectorAll(t.default.FOCUSABLES_SELECTOR).forEach((e=>{e.removeAttribute("aria-hidden"),e.setAttribute("tabindex","0")}))}}const r=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:".js-la-musette";const o=document.querySelectorAll(e);o.forEach((e=>new s(e)))},d=s},"./src/components/vimeo-player/vimeo-controls.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./src/global/settings.js"),s=n("./node_modules/.pnpm/@vimeo+player@2.16.4/node_modules/@vimeo/player/dist/player.es.js");const r=function(){const e=`.js-vimeo-container:not(.${t.default.initializedClassName})`;document.querySelectorAll(e).forEach((e=>{const o=new s.default(e),n=e.querySelector(".js-vimeo-play");n.addEventListener("click",(function(e){e.preventDefault(),e.stopPropagation(),o.getPaused().then((function(e){e?((e,o)=>{e.play(),o.querySelector(".js-vimeo-play__play-icon").classList.add("is-hidden"),o.querySelector(".js-vimeo-play__pause-icon").classList.remove("is-hidden")})(o,n):((e,o)=>{e.pause(),o.querySelector(".js-vimeo-play__play-icon").classList.remove("is-hidden"),o.querySelector(".js-vimeo-play__pause-icon").classList.add("is-hidden")})(o,n)}))})),e.classList.add(t.default.initializedClassName)}))}},"./src/global/lazyload/lazyload.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>i});var t=n("./node_modules/.pnpm/vanilla-lazyload@17.8.2/node_modules/vanilla-lazyload/dist/lazyload.min.js"),s=n.n(t);const r=new CustomEvent("image-loaded",{bubbles:!0}),d=new CustomEvent("image-errored",{bubbles:!0}),u=()=>{window.marbleLazyLoadObj.loadAll(),window.removeEventListener("scroll",u,!0)},i=()=>{window.marbleLazyLoadObj?window.marbleLazyLoadObj.update():(window.marbleLazyLoadObj=new(s())({elements_selector:".lazy",callback_loaded:e=>{e.dispatchEvent(r)},callback_error:e=>{e.dispatchEvent(d)}}),window.addEventListener("scroll",u,{once:!0,passive:!0,capture:!0}))}},"./src/global/settings.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});const t=function e(o){const n=Object.getOwnPropertyNames(o);for(const t of n){const n=o[t];n&&"object"==typeof n&&e(n)}return Object.freeze(o)}({initializedClassName:"js-marble-initialized",FOCUSABLES_SELECTOR:"a[href]:not(.invisible-redundant-link), button, input, textarea, select, details, [tabindex]:not(.invisible-redundant-link)"}),s=t},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/a-callable.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-callable.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/try-to-string.js"),r=TypeError;e.exports=function(e){if(t(e))return e;throw r(s(e)+" is not a function")}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/add-to-unscopables.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/well-known-symbol.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-create.js"),r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-define-property.js").f,d=t("unscopables"),u=Array.prototype;null==u[d]&&r(u,d,{configurable:!0,value:s(null)}),e.exports=function(e){u[d][e]=!0}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/an-object.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-object.js"),s=String,r=TypeError;e.exports=function(e){if(t(e))return e;throw r(s(e)+" is not an object")}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/array-includes.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/to-indexed-object.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/to-absolute-index.js"),r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/length-of-array-like.js"),d=function(e){return function(o,n,d){var u,i=t(o),l=r(i),a=s(d,l);if(e&&n!=n){for(;l>a;)if((u=i[a++])!=u)return!0}else for(;l>a;a++)if((e||a in i)&&i[a]===n)return e||a||0;return!e&&-1}};e.exports={includes:d(!0),indexOf:d(!1)}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/classof-raw.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/function-uncurry-this.js"),s=t({}.toString),r=t("".slice);e.exports=function(e){return r(s(e),8,-1)}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/copy-constructor-properties.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/has-own-property.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/own-keys.js"),r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-get-own-property-descriptor.js"),d=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-define-property.js");e.exports=function(e,o,n){for(var u=s(o),i=d.f,l=r.f,a=0;a<u.length;a++){var c=u[a];t(e,c)||n&&t(n,c)||i(e,c,l(o,c))}}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/create-non-enumerable-property.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/descriptors.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-define-property.js"),r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/create-property-descriptor.js");e.exports=t?function(e,o,n){return s.f(e,o,r(1,n))}:function(e,o,n){return e[o]=n,e}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/create-property-descriptor.js":e=>{e.exports=function(e,o){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:o}}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/define-built-in.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-callable.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/create-non-enumerable-property.js"),r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/make-built-in.js"),d=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/define-global-property.js");e.exports=function(e,o,n,u){u||(u={});var i=u.enumerable,l=void 0!==u.name?u.name:o;return t(n)&&r(n,l,u),u.global?i?e[o]=n:d(o,n):(u.unsafe?e[o]&&(i=!0):delete e[o],i?e[o]=n:s(e,o,n)),e}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/define-global-property.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/global.js"),s=Object.defineProperty;e.exports=function(e,o){try{s(t,e,{value:o,configurable:!0,writable:!0})}catch(n){t[e]=o}return o}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/descriptors.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/fails.js");e.exports=!t((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/document-create-element.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/global.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-object.js"),r=t.document,d=s(r)&&s(r.createElement);e.exports=function(e){return d?r.createElement(e):{}}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/engine-user-agent.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/get-built-in.js");e.exports=t("navigator","userAgent")||""},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/engine-v8-version.js":(e,o,n)=>{var t,s,r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/global.js"),d=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/engine-user-agent.js"),u=r.process,i=r.Deno,l=u&&u.versions||i&&i.version,a=l&&l.v8;a&&(s=(t=a.split("."))[0]>0&&t[0]<4?1:+(t[0]+t[1])),!s&&d&&(!(t=d.match(/Edge\/(\d+)/))||t[1]>=74)&&(t=d.match(/Chrome\/(\d+)/))&&(s=+t[1]),e.exports=s},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/enum-bug-keys.js":e=>{e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/export.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/global.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-get-own-property-descriptor.js").f,r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/create-non-enumerable-property.js"),d=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/define-built-in.js"),u=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/define-global-property.js"),i=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/copy-constructor-properties.js"),l=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-forced.js");e.exports=function(e,o){var n,a,c,m,p,f=e.target,h=e.global,_=e.stat;if(n=h?t:_?t[f]||u(f,{}):(t[f]||{}).prototype)for(a in o){if(m=o[a],c=e.dontCallGetSet?(p=s(n,a))&&p.value:n[a],!l(h?a:f+(_?".":"#")+a,e.forced)&&void 0!==c){if(typeof m==typeof c)continue;i(m,c)}(e.sham||c&&c.sham)&&r(m,"sham",!0),d(n,a,m,e)}}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/fails.js":e=>{e.exports=function(e){try{return!!e()}catch(e){return!0}}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/function-bind-native.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/fails.js");e.exports=!t((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/function-call.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/function-bind-native.js"),s=Function.prototype.call;e.exports=t?s.bind(s):function(){return s.apply(s,arguments)}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/function-name.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/descriptors.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/has-own-property.js"),r=Function.prototype,d=t&&Object.getOwnPropertyDescriptor,u=s(r,"name"),i=u&&"something"===function(){}.name,l=u&&(!t||t&&d(r,"name").configurable);e.exports={EXISTS:u,PROPER:i,CONFIGURABLE:l}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/function-uncurry-this.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/function-bind-native.js"),s=Function.prototype,r=s.bind,d=s.call,u=t&&r.bind(d,d);e.exports=t?function(e){return e&&u(e)}:function(e){return e&&function(){return d.apply(e,arguments)}}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/get-built-in.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/global.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-callable.js"),r=function(e){return s(e)?e:void 0};e.exports=function(e,o){return arguments.length<2?r(t[e]):t[e]&&t[e][o]}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/get-method.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/a-callable.js");e.exports=function(e,o){var n=e[o];return null==n?void 0:t(n)}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/global.js":(e,o,n)=>{var t=function(e){return e&&e.Math==Math&&e};e.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof n.g&&n.g)||function(){return this}()||Function("return this")()},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/has-own-property.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/function-uncurry-this.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/to-object.js"),r=t({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,o){return r(s(e),o)}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/hidden-keys.js":e=>{e.exports={}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/html.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/get-built-in.js");e.exports=t("document","documentElement")},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/ie8-dom-define.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/descriptors.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/fails.js"),r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/document-create-element.js");e.exports=!t&&!s((function(){return 7!=Object.defineProperty(r("div"),"a",{get:function(){return 7}}).a}))},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/indexed-object.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/function-uncurry-this.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/fails.js"),r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/classof-raw.js"),d=Object,u=t("".split);e.exports=s((function(){return!d("z").propertyIsEnumerable(0)}))?function(e){return"String"==r(e)?u(e,""):d(e)}:d},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/inspect-source.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/function-uncurry-this.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-callable.js"),r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/shared-store.js"),d=t(Function.toString);s(r.inspectSource)||(r.inspectSource=function(e){return d(e)}),e.exports=r.inspectSource},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/internal-state.js":(e,o,n)=>{var t,s,r,d=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/native-weak-map.js"),u=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/global.js"),i=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/function-uncurry-this.js"),l=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-object.js"),a=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/create-non-enumerable-property.js"),c=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/has-own-property.js"),m=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/shared-store.js"),p=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/shared-key.js"),f=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/hidden-keys.js"),h="Object already initialized",_=u.TypeError,v=u.WeakMap;if(d||m.state){var j=m.state||(m.state=new v),g=i(j.get),y=i(j.has),b=i(j.set);t=function(e,o){if(y(j,e))throw new _(h);return o.facade=e,b(j,e,o),o},s=function(e){return g(j,e)||{}},r=function(e){return y(j,e)}}else{var E=p("state");f[E]=!0,t=function(e,o){if(c(e,E))throw new _(h);return o.facade=e,a(e,E,o),o},s=function(e){return c(e,E)?e[E]:{}},r=function(e){return c(e,E)}}e.exports={set:t,get:s,has:r,enforce:function(e){return r(e)?s(e):t(e,{})},getterFor:function(e){return function(o){var n;if(!l(o)||(n=s(o)).type!==e)throw _("Incompatible receiver, "+e+" required");return n}}}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-callable.js":e=>{e.exports=function(e){return"function"==typeof e}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-forced.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/fails.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-callable.js"),r=/#|\.prototype\./,d=function(e,o){var n=i[u(e)];return n==a||n!=l&&(s(o)?t(o):!!o)},u=d.normalize=function(e){return String(e).replace(r,".").toLowerCase()},i=d.data={},l=d.NATIVE="N",a=d.POLYFILL="P";e.exports=d},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-object.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-callable.js");e.exports=function(e){return"object"==typeof e?null!==e:t(e)}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-pure.js":e=>{e.exports=!1},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-symbol.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/get-built-in.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-callable.js"),r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-is-prototype-of.js"),d=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/use-symbol-as-uid.js"),u=Object;e.exports=d?function(e){return"symbol"==typeof e}:function(e){var o=t("Symbol");return s(o)&&r(o.prototype,u(e))}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/length-of-array-like.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/to-length.js");e.exports=function(e){return t(e.length)}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/make-built-in.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/fails.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-callable.js"),r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/has-own-property.js"),d=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/descriptors.js"),u=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/function-name.js").CONFIGURABLE,i=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/inspect-source.js"),l=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/internal-state.js"),a=l.enforce,c=l.get,m=Object.defineProperty,p=d&&!t((function(){return 8!==m((function(){}),"length",{value:8}).length})),f=String(String).split("String"),h=e.exports=function(e,o,n){"Symbol("===String(o).slice(0,7)&&(o="["+String(o).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),n&&n.getter&&(o="get "+o),n&&n.setter&&(o="set "+o),(!r(e,"name")||u&&e.name!==o)&&m(e,"name",{value:o,configurable:!0}),p&&n&&r(n,"arity")&&e.length!==n.arity&&m(e,"length",{value:n.arity});try{n&&r(n,"constructor")&&n.constructor?d&&m(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var t=a(e);return r(t,"source")||(t.source=f.join("string"==typeof o?o:"")),e};Function.prototype.toString=h((function(){return s(this)&&c(this).source||i(this)}),"toString")},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/math-trunc.js":e=>{var o=Math.ceil,n=Math.floor;e.exports=Math.trunc||function(e){var t=+e;return(t>0?n:o)(t)}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/native-symbol.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/engine-v8-version.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/fails.js");e.exports=!!Object.getOwnPropertySymbols&&!s((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&t&&t<41}))},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/native-weak-map.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/global.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-callable.js"),r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/inspect-source.js"),d=t.WeakMap;e.exports=s(d)&&/native code/.test(r(d))},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-create.js":(e,o,n)=>{var t,s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/an-object.js"),r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-define-properties.js"),d=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/enum-bug-keys.js"),u=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/hidden-keys.js"),i=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/html.js"),l=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/document-create-element.js"),a=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/shared-key.js"),c=a("IE_PROTO"),m=function(){},p=function(e){return"<script>"+e+"</"+"script>"},f=function(e){e.write(p("")),e.close();var o=e.parentWindow.Object;return e=null,o},h=function(){try{t=new ActiveXObject("htmlfile")}catch(e){}var e,o;h="undefined"!=typeof document?document.domain&&t?f(t):((o=l("iframe")).style.display="none",i.appendChild(o),o.src=String("javascript:"),(e=o.contentWindow.document).open(),e.write(p("document.F=Object")),e.close(),e.F):f(t);for(var n=d.length;n--;)delete h.prototype[d[n]];return h()};u[c]=!0,e.exports=Object.create||function(e,o){var n;return null!==e?(m.prototype=s(e),n=new m,m.prototype=null,n[c]=e):n=h(),void 0===o?n:r.f(n,o)}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-define-properties.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/descriptors.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/v8-prototype-define-bug.js"),r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-define-property.js"),d=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/an-object.js"),u=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/to-indexed-object.js"),i=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-keys.js");o.f=t&&!s?Object.defineProperties:function(e,o){d(e);for(var n,t=u(o),s=i(o),l=s.length,a=0;l>a;)r.f(e,n=s[a++],t[n]);return e}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-define-property.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/descriptors.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/ie8-dom-define.js"),r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/v8-prototype-define-bug.js"),d=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/an-object.js"),u=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/to-property-key.js"),i=TypeError,l=Object.defineProperty,a=Object.getOwnPropertyDescriptor,c="enumerable",m="configurable",p="writable";o.f=t?r?function(e,o,n){if(d(e),o=u(o),d(n),"function"==typeof e&&"prototype"===o&&"value"in n&&p in n&&!n.writable){var t=a(e,o);t&&t.writable&&(e[o]=n.value,n={configurable:m in n?n.configurable:t.configurable,enumerable:c in n?n.enumerable:t.enumerable,writable:!1})}return l(e,o,n)}:l:function(e,o,n){if(d(e),o=u(o),d(n),s)try{return l(e,o,n)}catch(e){}if("get"in n||"set"in n)throw i("Accessors not supported");return"value"in n&&(e[o]=n.value),e}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-get-own-property-descriptor.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/descriptors.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/function-call.js"),r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-property-is-enumerable.js"),d=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/create-property-descriptor.js"),u=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/to-indexed-object.js"),i=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/to-property-key.js"),l=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/has-own-property.js"),a=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/ie8-dom-define.js"),c=Object.getOwnPropertyDescriptor;o.f=t?c:function(e,o){if(e=u(e),o=i(o),a)try{return c(e,o)}catch(e){}if(l(e,o))return d(!s(r.f,e,o),e[o])}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-get-own-property-names.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-keys-internal.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/enum-bug-keys.js").concat("length","prototype");o.f=Object.getOwnPropertyNames||function(e){return t(e,s)}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-get-own-property-symbols.js":(e,o)=>{o.f=Object.getOwnPropertySymbols},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-is-prototype-of.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/function-uncurry-this.js");e.exports=t({}.isPrototypeOf)},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-keys-internal.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/function-uncurry-this.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/has-own-property.js"),r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/to-indexed-object.js"),d=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/array-includes.js").indexOf,u=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/hidden-keys.js"),i=t([].push);e.exports=function(e,o){var n,t=r(e),l=0,a=[];for(n in t)!s(u,n)&&s(t,n)&&i(a,n);for(;o.length>l;)s(t,n=o[l++])&&(~d(a,n)||i(a,n));return a}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-keys.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-keys-internal.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/enum-bug-keys.js");e.exports=Object.keys||function(e){return t(e,s)}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-property-is-enumerable.js":(e,o)=>{"use strict";var n={}.propertyIsEnumerable,t=Object.getOwnPropertyDescriptor,s=t&&!n.call({1:2},1);o.f=s?function(e){var o=t(this,e);return!!o&&o.enumerable}:n},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/ordinary-to-primitive.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/function-call.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-callable.js"),r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-object.js"),d=TypeError;e.exports=function(e,o){var n,u;if("string"===o&&s(n=e.toString)&&!r(u=t(n,e)))return u;if(s(n=e.valueOf)&&!r(u=t(n,e)))return u;if("string"!==o&&s(n=e.toString)&&!r(u=t(n,e)))return u;throw d("Can't convert object to primitive value")}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/own-keys.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/get-built-in.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/function-uncurry-this.js"),r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-get-own-property-names.js"),d=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/object-get-own-property-symbols.js"),u=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/an-object.js"),i=s([].concat);e.exports=t("Reflect","ownKeys")||function(e){var o=r.f(u(e)),n=d.f;return n?i(o,n(e)):o}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/require-object-coercible.js":e=>{var o=TypeError;e.exports=function(e){if(null==e)throw o("Can't call method on "+e);return e}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/shared-key.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/shared.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/uid.js"),r=t("keys");e.exports=function(e){return r[e]||(r[e]=s(e))}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/shared-store.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/global.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/define-global-property.js"),r="__core-js_shared__",d=t[r]||s(r,{});e.exports=d},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/shared.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-pure.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/shared-store.js");(e.exports=function(e,o){return s[e]||(s[e]=void 0!==o?o:{})})("versions",[]).push({version:"3.22.8",mode:t?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.22.8/LICENSE",source:"https://github.com/zloirock/core-js"})},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/to-absolute-index.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/to-integer-or-infinity.js"),s=Math.max,r=Math.min;e.exports=function(e,o){var n=t(e);return n<0?s(n+o,0):r(n,o)}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/to-indexed-object.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/indexed-object.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/require-object-coercible.js");e.exports=function(e){return t(s(e))}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/to-integer-or-infinity.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/math-trunc.js");e.exports=function(e){var o=+e;return o!=o||0===o?0:t(o)}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/to-length.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/to-integer-or-infinity.js"),s=Math.min;e.exports=function(e){return e>0?s(t(e),9007199254740991):0}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/to-object.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/require-object-coercible.js"),s=Object;e.exports=function(e){return s(t(e))}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/to-primitive.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/function-call.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-object.js"),r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-symbol.js"),d=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/get-method.js"),u=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/ordinary-to-primitive.js"),i=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/well-known-symbol.js"),l=TypeError,a=i("toPrimitive");e.exports=function(e,o){if(!s(e)||r(e))return e;var n,i=d(e,a);if(i){if(void 0===o&&(o="default"),n=t(i,e,o),!s(n)||r(n))return n;throw l("Can't convert object to primitive value")}return void 0===o&&(o="number"),u(e,o)}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/to-property-key.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/to-primitive.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/is-symbol.js");e.exports=function(e){var o=t(e,"string");return s(o)?o:o+""}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/try-to-string.js":e=>{var o=String;e.exports=function(e){try{return o(e)}catch(e){return"Object"}}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/uid.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/function-uncurry-this.js"),s=0,r=Math.random(),d=t(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+d(++s+r,36)}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/use-symbol-as-uid.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/native-symbol.js");e.exports=t&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/v8-prototype-define-bug.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/descriptors.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/fails.js");e.exports=t&&s((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/well-known-symbol.js":(e,o,n)=>{var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/global.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/shared.js"),r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/has-own-property.js"),d=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/uid.js"),u=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/native-symbol.js"),i=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/use-symbol-as-uid.js"),l=s("wks"),a=t.Symbol,c=a&&a.for,m=i?a:a&&a.withoutSetter||d;e.exports=function(e){if(!r(l,e)||!u&&"string"!=typeof l[e]){var o="Symbol."+e;u&&r(a,e)?l[e]=a[e]:l[e]=i&&c?c(o):m(o)}return l[e]}},"./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/modules/es.array.includes.js":(e,o,n)=>{"use strict";var t=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/export.js"),s=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/array-includes.js").includes,r=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/fails.js"),d=n("./node_modules/.pnpm/core-js@3.22.8/node_modules/core-js/internals/add-to-unscopables.js");t({target:"Array",proto:!0,forced:r((function(){return!Array(1).includes()}))},{includes:function(e){return s(this,e,arguments.length>1?arguments[1]:void 0)}}),d("includes")},"./node_modules/.pnpm/desandro-matches-selector@2.0.2/node_modules/desandro-matches-selector/matches-selector.js":(e,o,n)=>{var t,s;!function(r,d){"use strict";void 0===(s="function"==typeof(t=d)?t.call(o,n,o,e):t)||(e.exports=s)}(window,(function(){"use strict";var e=function(){var e=window.Element.prototype;if(e.matches)return"matches";if(e.matchesSelector)return"matchesSelector";for(var o=["webkit","moz","ms","o"],n=0;n<o.length;n++){var t=o[n]+"MatchesSelector";if(e[t])return t}}();return function(o,n){return o[e](n)}}))},"./node_modules/.pnpm/ev-emitter@1.1.1/node_modules/ev-emitter/ev-emitter.js":function(e,o,n){var t,s;"undefined"!=typeof window&&window,void 0===(s="function"==typeof(t=function(){"use strict";function e(){}var o=e.prototype;return o.on=function(e,o){if(e&&o){var n=this._events=this._events||{},t=n[e]=n[e]||[];return-1==t.indexOf(o)&&t.push(o),this}},o.once=function(e,o){if(e&&o){this.on(e,o);var n=this._onceEvents=this._onceEvents||{};return(n[e]=n[e]||{})[o]=!0,this}},o.off=function(e,o){var n=this._events&&this._events[e];if(n&&n.length){var t=n.indexOf(o);return-1!=t&&n.splice(t,1),this}},o.emitEvent=function(e,o){var n=this._events&&this._events[e];if(n&&n.length){n=n.slice(0),o=o||[];for(var t=this._onceEvents&&this._onceEvents[e],s=0;s<n.length;s++){var r=n[s];t&&t[r]&&(this.off(e,r),delete t[r]),r.apply(this,o)}return this}},o.allOff=function(){delete this._events,delete this._onceEvents},e})?t.call(o,n,o,e):t)||(e.exports=s)},"./node_modules/.pnpm/fizzy-ui-utils@2.0.7/node_modules/fizzy-ui-utils/utils.js":(e,o,n)=>{var t,s;!function(r,d){t=[n("./node_modules/.pnpm/desandro-matches-selector@2.0.2/node_modules/desandro-matches-selector/matches-selector.js")],s=function(e){return function(e,o){"use strict";var n={extend:function(e,o){for(var n in o)e[n]=o[n];return e},modulo:function(e,o){return(e%o+o)%o}},t=Array.prototype.slice;n.makeArray=function(e){return Array.isArray(e)?e:null==e?[]:"object"==typeof e&&"number"==typeof e.length?t.call(e):[e]},n.removeFrom=function(e,o){var n=e.indexOf(o);-1!=n&&e.splice(n,1)},n.getParent=function(e,n){for(;e.parentNode&&e!=document.body;)if(e=e.parentNode,o(e,n))return e},n.getQueryElement=function(e){return"string"==typeof e?document.querySelector(e):e},n.handleEvent=function(e){var o="on"+e.type;this[o]&&this[o](e)},n.filterFindElements=function(e,t){e=n.makeArray(e);var s=[];return e.forEach((function(e){if(e instanceof HTMLElement)if(t){o(e,t)&&s.push(e);for(var n=e.querySelectorAll(t),r=0;r<n.length;r++)s.push(n[r])}else s.push(e)})),s},n.debounceMethod=function(e,o,n){n=n||100;var t=e.prototype[o],s=o+"Timeout";e.prototype[o]=function(){var e=this[s];clearTimeout(e);var o=arguments,r=this;this[s]=setTimeout((function(){t.apply(r,o),delete r[s]}),n)}},n.docReady=function(e){var o=document.readyState;"complete"==o||"interactive"==o?setTimeout(e):document.addEventListener("DOMContentLoaded",e)},n.toDashed=function(e){return e.replace(/(.)([A-Z])/g,(function(e,o,n){return o+"-"+n})).toLowerCase()};var s=e.console;return n.htmlInit=function(o,t){n.docReady((function(){var r=n.toDashed(t),d="data-"+r,u=document.querySelectorAll("["+d+"]"),i=document.querySelectorAll(".js-"+r),l=n.makeArray(u).concat(n.makeArray(i)),a=d+"-options",c=e.jQuery;l.forEach((function(e){var n,r=e.getAttribute(d)||e.getAttribute(a);try{n=r&&JSON.parse(r)}catch(o){return void(s&&s.error("Error parsing "+d+" on "+e.className+": "+o))}var u=new o(e,n);c&&c.data(e,t,u)}))}))},n}(r,e)}.apply(o,t),void 0===s||(e.exports=s)}(window)},"./node_modules/.pnpm/flickity-imagesloaded@2.0.0/node_modules/flickity-imagesloaded/flickity-imagesloaded.js":(e,o,n)=>{var t,s;window,t=[n("./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/index.js"),n("./node_modules/.pnpm/imagesloaded@4.1.4/node_modules/imagesloaded/imagesloaded.js")],void 0===(s=function(e,o){return function(e,o,n){"use strict";o.createMethods.push("_createImagesLoaded");var t=o.prototype;return t._createImagesLoaded=function(){this.on("activate",this.imagesLoaded)},t.imagesLoaded=function(){if(this.options.imagesLoaded){var e=this;n(this.slider).on("progress",o)}function o(o,n){var t=e.getParentCell(n.img);e.cellSizeChange(t&&t.element),e.options.freeScroll||e.positionSliderAtSelected()}},o}(0,e,o)}.apply(o,t))||(e.exports=s)},"./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/add-remove-cell.js":(e,o,n)=>{var t,s;window,t=[n("./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/flickity.js"),n("./node_modules/.pnpm/fizzy-ui-utils@2.0.7/node_modules/fizzy-ui-utils/utils.js")],void 0===(s=function(e,o){return function(e,o,n){"use strict";function t(e){var o=document.createDocumentFragment();return e.forEach((function(e){o.appendChild(e.element)})),o}var s=o.prototype;return s.insert=function(e,o){var n=this._makeCells(e);if(n&&n.length){var s=this.cells.length;o=void 0===o?s:o;var r=t(n),d=o==s;if(d)this.slider.appendChild(r);else{var u=this.cells[o].element;this.slider.insertBefore(r,u)}if(0===o)this.cells=n.concat(this.cells);else if(d)this.cells=this.cells.concat(n);else{var i=this.cells.splice(o,s-o);this.cells=this.cells.concat(n).concat(i)}this._sizeCells(n),this.cellChange(o,!0)}},s.append=function(e){this.insert(e,this.cells.length)},s.prepend=function(e){this.insert(e,0)},s.remove=function(e){var o=this.getCells(e);if(o&&o.length){var t=this.cells.length-1;o.forEach((function(e){e.remove();var o=this.cells.indexOf(e);t=Math.min(o,t),n.removeFrom(this.cells,e)}),this),this.cellChange(t,!0)}},s.cellSizeChange=function(e){var o=this.getCell(e);if(o){o.getSize();var n=this.cells.indexOf(o);this.cellChange(n)}},s.cellChange=function(e,o){var n=this.selectedElement;this._positionCells(e),this._getWrapShiftCells(),this.setGallerySize();var t=this.getCell(n);t&&(this.selectedIndex=this.getCellSlideIndex(t)),this.selectedIndex=Math.min(this.slides.length-1,this.selectedIndex),this.emitEvent("cellChange",[e]),this.select(this.selectedIndex),o&&this.positionSliderAtSelected()},o}(0,e,o)}.apply(o,t))||(e.exports=s)},"./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/animate.js":(e,o,n)=>{var t,s;window,t=[n("./node_modules/.pnpm/fizzy-ui-utils@2.0.7/node_modules/fizzy-ui-utils/utils.js")],void 0===(s=function(e){return function(e,o){"use strict";var n={startAnimation:function(){this.isAnimating||(this.isAnimating=!0,this.restingFrames=0,this.animate())},animate:function(){this.applyDragForce(),this.applySelectedAttraction();var e=this.x;if(this.integratePhysics(),this.positionSlider(),this.settle(e),this.isAnimating){var o=this;requestAnimationFrame((function(){o.animate()}))}},positionSlider:function(){var e=this.x;this.options.wrapAround&&this.cells.length>1&&(e=o.modulo(e,this.slideableWidth),e-=this.slideableWidth,this.shiftWrapCells(e)),this.setTranslateX(e,this.isAnimating),this.dispatchScrollEvent()},setTranslateX:function(e,o){e+=this.cursorPosition,e=this.options.rightToLeft?-e:e;var n=this.getPositionValue(e);this.slider.style.transform=o?"translate3d("+n+",0,0)":"translateX("+n+")"},dispatchScrollEvent:function(){var e=this.slides[0];if(e){var o=-this.x-e.target,n=o/this.slidesWidth;this.dispatchEvent("scroll",null,[n,o])}},positionSliderAtSelected:function(){this.cells.length&&(this.x=-this.selectedSlide.target,this.velocity=0,this.positionSlider())},getPositionValue:function(e){return this.options.percentPosition?.01*Math.round(e/this.size.innerWidth*1e4)+"%":Math.round(e)+"px"},settle:function(e){!this.isPointerDown&&Math.round(100*this.x)==Math.round(100*e)&&this.restingFrames++,this.restingFrames>2&&(this.isAnimating=!1,delete this.isFreeScrolling,this.positionSlider(),this.dispatchEvent("settle",null,[this.selectedIndex]))},shiftWrapCells:function(e){var o=this.cursorPosition+e;this._shiftCells(this.beforeShiftCells,o,-1);var n=this.size.innerWidth-(e+this.slideableWidth+this.cursorPosition);this._shiftCells(this.afterShiftCells,n,1)},_shiftCells:function(e,o,n){for(var t=0;t<e.length;t++){var s=e[t],r=o>0?n:0;s.wrapShift(r),o-=s.size.outerWidth}},_unshiftCells:function(e){if(e&&e.length)for(var o=0;o<e.length;o++)e[o].wrapShift(0)},integratePhysics:function(){this.x+=this.velocity,this.velocity*=this.getFrictionFactor()},applyForce:function(e){this.velocity+=e},getFrictionFactor:function(){return 1-this.options[this.isFreeScrolling?"freeScrollFriction":"friction"]},getRestingPosition:function(){return this.x+this.velocity/(1-this.getFrictionFactor())},applyDragForce:function(){if(this.isDraggable&&this.isPointerDown){var e=this.dragX-this.x-this.velocity;this.applyForce(e)}},applySelectedAttraction:function(){if((!this.isDraggable||!this.isPointerDown)&&!this.isFreeScrolling&&this.slides.length){var e=(-1*this.selectedSlide.target-this.x)*this.options.selectedAttraction;this.applyForce(e)}}};return n}(0,e)}.apply(o,t))||(e.exports=s)},"./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/cell.js":(e,o,n)=>{var t,s;window,t=[n("./node_modules/.pnpm/get-size@2.0.3/node_modules/get-size/get-size.js")],void 0===(s=function(e){return function(e,o){"use strict";function n(e,o){this.element=e,this.parent=o,this.create()}var t=n.prototype;return t.create=function(){this.element.style.position="absolute",this.element.setAttribute("aria-hidden","true"),this.x=0,this.shift=0,this.element.style[this.parent.originSide]=0},t.destroy=function(){this.unselect(),this.element.style.position="";var e=this.parent.originSide;this.element.style[e]="",this.element.style.transform="",this.element.removeAttribute("aria-hidden")},t.getSize=function(){this.size=o(this.element)},t.setPosition=function(e){this.x=e,this.updateTarget(),this.renderPosition(e)},t.updateTarget=t.setDefaultTarget=function(){var e="left"==this.parent.originSide?"marginLeft":"marginRight";this.target=this.x+this.size[e]+this.size.width*this.parent.cellAlign},t.renderPosition=function(e){var o="left"===this.parent.originSide?1:-1,n=this.parent.options.percentPosition?e*o*(this.parent.size.innerWidth/this.size.width):e*o;this.element.style.transform="translateX("+this.parent.getPositionValue(n)+")"},t.select=function(){this.element.classList.add("is-selected"),this.element.removeAttribute("aria-hidden")},t.unselect=function(){this.element.classList.remove("is-selected"),this.element.setAttribute("aria-hidden","true")},t.wrapShift=function(e){this.shift=e,this.renderPosition(this.x+this.parent.slideableWidth*e)},t.remove=function(){this.element.parentNode.removeChild(this.element)},n}(0,e)}.apply(o,t))||(e.exports=s)},"./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/drag.js":(e,o,n)=>{var t,s;!function(r,d){t=[n("./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/flickity.js"),n("./node_modules/.pnpm/unidragger@2.4.0/node_modules/unidragger/unidragger.js"),n("./node_modules/.pnpm/fizzy-ui-utils@2.0.7/node_modules/fizzy-ui-utils/utils.js")],s=function(e,o,n){return function(e,o,n,t){"use strict";t.extend(o.defaults,{draggable:">1",dragThreshold:3}),o.createMethods.push("_createDrag");var s=o.prototype;t.extend(s,n.prototype),s._touchActionValue="pan-y",s._createDrag=function(){this.on("activate",this.onActivateDrag),this.on("uiChange",this._uiChangeDrag),this.on("deactivate",this.onDeactivateDrag),this.on("cellChange",this.updateDraggable)},s.onActivateDrag=function(){this.handles=[this.viewport],this.bindHandles(),this.updateDraggable()},s.onDeactivateDrag=function(){this.unbindHandles(),this.element.classList.remove("is-draggable")},s.updateDraggable=function(){">1"==this.options.draggable?this.isDraggable=this.slides.length>1:this.isDraggable=this.options.draggable,this.isDraggable?this.element.classList.add("is-draggable"):this.element.classList.remove("is-draggable")},s.bindDrag=function(){this.options.draggable=!0,this.updateDraggable()},s.unbindDrag=function(){this.options.draggable=!1,this.updateDraggable()},s._uiChangeDrag=function(){delete this.isFreeScrolling},s.pointerDown=function(o,n){this.isDraggable?this.okayPointerDown(o)&&(this._pointerDownPreventDefault(o),this.pointerDownFocus(o),document.activeElement!=this.element&&this.pointerDownBlur(),this.dragX=this.x,this.viewport.classList.add("is-pointer-down"),this.pointerDownScroll=d(),e.addEventListener("scroll",this),this._pointerDownDefault(o,n)):this._pointerDownDefault(o,n)},s._pointerDownDefault=function(e,o){this.pointerDownPointer={pageX:o.pageX,pageY:o.pageY},this._bindPostStartEvents(e),this.dispatchEvent("pointerDown",e,[o])};var r={INPUT:!0,TEXTAREA:!0,SELECT:!0};function d(){return{x:e.pageXOffset,y:e.pageYOffset}}return s.pointerDownFocus=function(e){r[e.target.nodeName]||this.focus()},s._pointerDownPreventDefault=function(e){var o="touchstart"==e.type,n="touch"==e.pointerType,t=r[e.target.nodeName];o||n||t||e.preventDefault()},s.hasDragStarted=function(e){return Math.abs(e.x)>this.options.dragThreshold},s.pointerUp=function(e,o){delete this.isTouchScrolling,this.viewport.classList.remove("is-pointer-down"),this.dispatchEvent("pointerUp",e,[o]),this._dragPointerUp(e,o)},s.pointerDone=function(){e.removeEventListener("scroll",this),delete this.pointerDownScroll},s.dragStart=function(o,n){this.isDraggable&&(this.dragStartPosition=this.x,this.startAnimation(),e.removeEventListener("scroll",this),this.dispatchEvent("dragStart",o,[n]))},s.pointerMove=function(e,o){var n=this._dragPointerMove(e,o);this.dispatchEvent("pointerMove",e,[o,n]),this._dragMove(e,o,n)},s.dragMove=function(e,o,n){if(this.isDraggable){e.preventDefault(),this.previousDragX=this.dragX;var t=this.options.rightToLeft?-1:1;this.options.wrapAround&&(n.x%=this.slideableWidth);var s=this.dragStartPosition+n.x*t;if(!this.options.wrapAround&&this.slides.length){var r=Math.max(-this.slides[0].target,this.dragStartPosition);s=s>r?.5*(s+r):s;var d=Math.min(-this.getLastSlide().target,this.dragStartPosition);s=s<d?.5*(s+d):s}this.dragX=s,this.dragMoveTime=new Date,this.dispatchEvent("dragMove",e,[o,n])}},s.dragEnd=function(e,o){if(this.isDraggable){this.options.freeScroll&&(this.isFreeScrolling=!0);var n=this.dragEndRestingSelect();if(this.options.freeScroll&&!this.options.wrapAround){var t=this.getRestingPosition();this.isFreeScrolling=-t>this.slides[0].target&&-t<this.getLastSlide().target}else this.options.freeScroll||n!=this.selectedIndex||(n+=this.dragEndBoostSelect());delete this.previousDragX,this.isDragSelect=this.options.wrapAround,this.select(n),delete this.isDragSelect,this.dispatchEvent("dragEnd",e,[o])}},s.dragEndRestingSelect=function(){var e=this.getRestingPosition(),o=Math.abs(this.getSlideDistance(-e,this.selectedIndex)),n=this._getClosestResting(e,o,1),t=this._getClosestResting(e,o,-1);return n.distance<t.distance?n.index:t.index},s._getClosestResting=function(e,o,n){for(var t=this.selectedIndex,s=1/0,r=this.options.contain&&!this.options.wrapAround?function(e,o){return e<=o}:function(e,o){return e<o};r(o,s)&&(t+=n,s=o,null!==(o=this.getSlideDistance(-e,t)));)o=Math.abs(o);return{distance:s,index:t-n}},s.getSlideDistance=function(e,o){var n=this.slides.length,s=this.options.wrapAround&&n>1,r=s?t.modulo(o,n):o,d=this.slides[r];if(!d)return null;var u=s?this.slideableWidth*Math.floor(o/n):0;return e-(d.target+u)},s.dragEndBoostSelect=function(){if(void 0===this.previousDragX||!this.dragMoveTime||new Date-this.dragMoveTime>100)return 0;var e=this.getSlideDistance(-this.dragX,this.selectedIndex),o=this.previousDragX-this.dragX;return e>0&&o>0?1:e<0&&o<0?-1:0},s.staticClick=function(e,o){var n=this.getParentCell(e.target),t=n&&n.element,s=n&&this.cells.indexOf(n);this.dispatchEvent("staticClick",e,[o,t,s])},s.onscroll=function(){var e=d(),o=this.pointerDownScroll.x-e.x,n=this.pointerDownScroll.y-e.y;(Math.abs(o)>3||Math.abs(n)>3)&&this._pointerDone()},o}(r,e,o,n)}.apply(o,t),void 0===s||(e.exports=s)}(window)},"./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/flickity.js":(e,o,n)=>{var t,s;!function(r,d){t=[n("./node_modules/.pnpm/ev-emitter@1.1.1/node_modules/ev-emitter/ev-emitter.js"),n("./node_modules/.pnpm/get-size@2.0.3/node_modules/get-size/get-size.js"),n("./node_modules/.pnpm/fizzy-ui-utils@2.0.7/node_modules/fizzy-ui-utils/utils.js"),n("./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/cell.js"),n("./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/slide.js"),n("./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/animate.js")],s=function(e,o,n,t,s,d){return function(e,o,n,t,s,r,d){"use strict";var u=e.jQuery,i=e.getComputedStyle,l=e.console;function a(e,o){for(e=t.makeArray(e);e.length;)o.appendChild(e.shift())}var c=0,m={};function p(e,o){var n=t.getQueryElement(e);if(n){if(this.element=n,this.element.flickityGUID){var s=m[this.element.flickityGUID];return s&&s.option(o),s}u&&(this.$element=u(this.element)),this.options=t.extend({},this.constructor.defaults),this.option(o),this._create()}else l&&l.error("Bad element for Flickity: "+(n||e))}p.defaults={accessibility:!0,cellAlign:"center",freeScrollFriction:.075,friction:.28,namespaceJQueryEvents:!0,percentPosition:!0,resize:!0,selectedAttraction:.025,setGallerySize:!0},p.createMethods=[];var f=p.prototype;t.extend(f,o.prototype),f._create=function(){var o=this.guid=++c;for(var n in this.element.flickityGUID=o,m[o]=this,this.selectedIndex=0,this.restingFrames=0,this.x=0,this.velocity=0,this.originSide=this.options.rightToLeft?"right":"left",this.viewport=document.createElement("div"),this.viewport.className="flickity-viewport",this._createSlider(),(this.options.resize||this.options.watchCSS)&&e.addEventListener("resize",this),this.options.on){var t=this.options.on[n];this.on(n,t)}p.createMethods.forEach((function(e){this[e]()}),this),this.options.watchCSS?this.watchCSS():this.activate()},f.option=function(e){t.extend(this.options,e)},f.activate=function(){this.isActive||(this.isActive=!0,this.element.classList.add("flickity-enabled"),this.options.rightToLeft&&this.element.classList.add("flickity-rtl"),this.getSize(),a(this._filterFindCellElements(this.element.children),this.slider),this.viewport.appendChild(this.slider),this.element.appendChild(this.viewport),this.reloadCells(),this.options.accessibility&&(this.element.tabIndex=0,this.element.addEventListener("keydown",this)),this.emitEvent("activate"),this.selectInitialIndex(),this.isInitActivated=!0,this.dispatchEvent("ready"))},f._createSlider=function(){var e=document.createElement("div");e.className="flickity-slider",e.style[this.originSide]=0,this.slider=e},f._filterFindCellElements=function(e){return t.filterFindElements(e,this.options.cellSelector)},f.reloadCells=function(){this.cells=this._makeCells(this.slider.children),this.positionCells(),this._getWrapShiftCells(),this.setGallerySize()},f._makeCells=function(e){return this._filterFindCellElements(e).map((function(e){return new s(e,this)}),this)},f.getLastCell=function(){return this.cells[this.cells.length-1]},f.getLastSlide=function(){return this.slides[this.slides.length-1]},f.positionCells=function(){this._sizeCells(this.cells),this._positionCells(0)},f._positionCells=function(e){e=e||0,this.maxCellHeight=e&&this.maxCellHeight||0;var o=0;if(e>0){var n=this.cells[e-1];o=n.x+n.size.outerWidth}for(var t=this.cells.length,s=e;s<t;s++){var r=this.cells[s];r.setPosition(o),o+=r.size.outerWidth,this.maxCellHeight=Math.max(r.size.outerHeight,this.maxCellHeight)}this.slideableWidth=o,this.updateSlides(),this._containSlides(),this.slidesWidth=t?this.getLastSlide().target-this.slides[0].target:0},f._sizeCells=function(e){e.forEach((function(e){e.getSize()}))},f.updateSlides=function(){if(this.slides=[],this.cells.length){var e=new r(this);this.slides.push(e);var o="left"==this.originSide?"marginRight":"marginLeft",n=this._getCanCellFit();this.cells.forEach((function(t,s){if(e.cells.length){var d=e.outerWidth-e.firstMargin+(t.size.outerWidth-t.size[o]);n.call(this,s,d)||(e.updateTarget(),e=new r(this),this.slides.push(e)),e.addCell(t)}else e.addCell(t)}),this),e.updateTarget(),this.updateSelectedSlide()}},f._getCanCellFit=function(){var e=this.options.groupCells;if(!e)return function(){return!1};if("number"==typeof e){var o=parseInt(e,10);return function(e){return e%o!=0}}var n="string"==typeof e&&e.match(/^(\d+)%$/),t=n?parseInt(n[1],10)/100:1;return function(e,o){return o<=(this.size.innerWidth+1)*t}},f._init=f.reposition=function(){this.positionCells(),this.positionSliderAtSelected()},f.getSize=function(){this.size=n(this.element),this.setCellAlign(),this.cursorPosition=this.size.innerWidth*this.cellAlign};var h={center:{left:.5,right:.5},left:{left:0,right:1},right:{right:0,left:1}};f.setCellAlign=function(){var e=h[this.options.cellAlign];this.cellAlign=e?e[this.originSide]:this.options.cellAlign},f.setGallerySize=function(){if(this.options.setGallerySize){var e=this.options.adaptiveHeight&&this.selectedSlide?this.selectedSlide.height:this.maxCellHeight;this.viewport.style.height=e+"px"}},f._getWrapShiftCells=function(){if(this.options.wrapAround){this._unshiftCells(this.beforeShiftCells),this._unshiftCells(this.afterShiftCells);var e=this.cursorPosition,o=this.cells.length-1;this.beforeShiftCells=this._getGapCells(e,o,-1),e=this.size.innerWidth-this.cursorPosition,this.afterShiftCells=this._getGapCells(e,0,1)}},f._getGapCells=function(e,o,n){for(var t=[];e>0;){var s=this.cells[o];if(!s)break;t.push(s),o+=n,e-=s.size.outerWidth}return t},f._containSlides=function(){if(this.options.contain&&!this.options.wrapAround&&this.cells.length){var e=this.options.rightToLeft,o=e?"marginRight":"marginLeft",n=e?"marginLeft":"marginRight",t=this.slideableWidth-this.getLastCell().size[n],s=t<this.size.innerWidth,r=this.cursorPosition+this.cells[0].size[o],d=t-this.size.innerWidth*(1-this.cellAlign);this.slides.forEach((function(e){s?e.target=t*this.cellAlign:(e.target=Math.max(e.target,r),e.target=Math.min(e.target,d))}),this)}},f.dispatchEvent=function(e,o,n){var t=o?[o].concat(n):n;if(this.emitEvent(e,t),u&&this.$element){var s=e+=this.options.namespaceJQueryEvents?".flickity":"";if(o){var r=new u.Event(o);r.type=e,s=r}this.$element.trigger(s,n)}},f.select=function(e,o,n){if(this.isActive&&(e=parseInt(e,10),this._wrapSelect(e),(this.options.wrapAround||o)&&(e=t.modulo(e,this.slides.length)),this.slides[e])){var s=this.selectedIndex;this.selectedIndex=e,this.updateSelectedSlide(),n?this.positionSliderAtSelected():this.startAnimation(),this.options.adaptiveHeight&&this.setGallerySize(),this.dispatchEvent("select",null,[e]),e!=s&&this.dispatchEvent("change",null,[e]),this.dispatchEvent("cellSelect")}},f._wrapSelect=function(e){var o=this.slides.length;if(!(this.options.wrapAround&&o>1))return e;var n=t.modulo(e,o),s=Math.abs(n-this.selectedIndex),r=Math.abs(n+o-this.selectedIndex),d=Math.abs(n-o-this.selectedIndex);!this.isDragSelect&&r<s?e+=o:!this.isDragSelect&&d<s&&(e-=o),e<0?this.x-=this.slideableWidth:e>=o&&(this.x+=this.slideableWidth)},f.previous=function(e,o){this.select(this.selectedIndex-1,e,o)},f.next=function(e,o){this.select(this.selectedIndex+1,e,o)},f.updateSelectedSlide=function(){var e=this.slides[this.selectedIndex];e&&(this.unselectSelectedSlide(),this.selectedSlide=e,e.select(),this.selectedCells=e.cells,this.selectedElements=e.getCellElements(),this.selectedCell=e.cells[0],this.selectedElement=this.selectedElements[0])},f.unselectSelectedSlide=function(){this.selectedSlide&&this.selectedSlide.unselect()},f.selectInitialIndex=function(){var e=this.options.initialIndex;if(this.isInitActivated)this.select(this.selectedIndex,!1,!0);else{if(e&&"string"==typeof e)if(this.queryCell(e))return void this.selectCell(e,!1,!0);var o=0;e&&this.slides[e]&&(o=e),this.select(o,!1,!0)}},f.selectCell=function(e,o,n){var t=this.queryCell(e);if(t){var s=this.getCellSlideIndex(t);this.select(s,o,n)}},f.getCellSlideIndex=function(e){for(var o=0;o<this.slides.length;o++){if(-1!=this.slides[o].cells.indexOf(e))return o}},f.getCell=function(e){for(var o=0;o<this.cells.length;o++){var n=this.cells[o];if(n.element==e)return n}},f.getCells=function(e){e=t.makeArray(e);var o=[];return e.forEach((function(e){var n=this.getCell(e);n&&o.push(n)}),this),o},f.getCellElements=function(){return this.cells.map((function(e){return e.element}))},f.getParentCell=function(e){var o=this.getCell(e);return o||(e=t.getParent(e,".flickity-slider > *"),this.getCell(e))},f.getAdjacentCellElements=function(e,o){if(!e)return this.selectedSlide.getCellElements();o=void 0===o?this.selectedIndex:o;var n=this.slides.length;if(1+2*e>=n)return this.getCellElements();for(var s=[],r=o-e;r<=o+e;r++){var d=this.options.wrapAround?t.modulo(r,n):r,u=this.slides[d];u&&(s=s.concat(u.getCellElements()))}return s},f.queryCell=function(e){if("number"==typeof e)return this.cells[e];if("string"==typeof e){if(e.match(/^[#.]?[\d/]/))return;e=this.element.querySelector(e)}return this.getCell(e)},f.uiChange=function(){this.emitEvent("uiChange")},f.childUIPointerDown=function(e){"touchstart"!=e.type&&e.preventDefault(),this.focus()},f.onresize=function(){this.watchCSS(),this.resize()},t.debounceMethod(p,"onresize",150),f.resize=function(){if(this.isActive&&!this.isAnimating&&!this.isDragging){this.getSize(),this.options.wrapAround&&(this.x=t.modulo(this.x,this.slideableWidth)),this.positionCells(),this._getWrapShiftCells(),this.setGallerySize(),this.emitEvent("resize");var e=this.selectedElements&&this.selectedElements[0];this.selectCell(e,!1,!0)}},f.watchCSS=function(){this.options.watchCSS&&(-1!=i(this.element,":after").content.indexOf("flickity")?this.activate():this.deactivate())},f.onkeydown=function(e){var o=document.activeElement&&document.activeElement!=this.element;if(this.options.accessibility&&!o){var n=p.keyboardHandlers[e.keyCode];n&&n.call(this)}},p.keyboardHandlers={37:function(){var e=this.options.rightToLeft?"next":"previous";this.uiChange(),this[e]()},39:function(){var e=this.options.rightToLeft?"previous":"next";this.uiChange(),this[e]()}},f.focus=function(){var o=e.pageYOffset;this.element.focus({preventScroll:!0}),e.pageYOffset!=o&&e.scrollTo(e.pageXOffset,o)},f.deactivate=function(){this.isActive&&(this.element.classList.remove("flickity-enabled"),this.element.classList.remove("flickity-rtl"),this.unselectSelectedSlide(),this.cells.forEach((function(e){e.destroy()})),this.element.removeChild(this.viewport),a(this.slider.children,this.element),this.options.accessibility&&(this.element.removeAttribute("tabIndex"),this.element.removeEventListener("keydown",this)),this.isActive=!1,this.emitEvent("deactivate"))},f.destroy=function(){this.deactivate(),e.removeEventListener("resize",this),this.allOff(),this.emitEvent("destroy"),u&&this.$element&&u.removeData(this.element,"flickity"),delete this.element.flickityGUID,delete m[this.guid]},t.extend(f,d),p.data=function(e){var o=(e=t.getQueryElement(e))&&e.flickityGUID;return o&&m[o]},t.htmlInit(p,"flickity"),u&&u.bridget&&u.bridget("flickity",p);return p.setJQuery=function(e){u=e},p.Cell=s,p.Slide=r,p}(r,e,o,n,t,s,d)}.apply(o,t),void 0===s||(e.exports=s)}(window)},"./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/index.js":(e,o,n)=>{var t,s,r;window,s=[n("./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/flickity.js"),n("./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/drag.js"),n("./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/prev-next-button.js"),n("./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/page-dots.js"),n("./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/player.js"),n("./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/add-remove-cell.js"),n("./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/lazyload.js")],void 0===(r="function"==typeof(t=function(e){return e})?t.apply(o,s):t)||(e.exports=r)},"./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/lazyload.js":(e,o,n)=>{var t,s;window,t=[n("./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/flickity.js"),n("./node_modules/.pnpm/fizzy-ui-utils@2.0.7/node_modules/fizzy-ui-utils/utils.js")],void 0===(s=function(e,o){return function(e,o,n){"use strict";o.createMethods.push("_createLazyload");var t=o.prototype;function s(e){if("IMG"==e.nodeName){var o=e.getAttribute("data-flickity-lazyload"),t=e.getAttribute("data-flickity-lazyload-src"),s=e.getAttribute("data-flickity-lazyload-srcset");if(o||t||s)return[e]}var r="img[data-flickity-lazyload], img[data-flickity-lazyload-src], img[data-flickity-lazyload-srcset]",d=e.querySelectorAll(r);return n.makeArray(d)}function r(e,o){this.img=e,this.flickity=o,this.load()}return t._createLazyload=function(){this.on("select",this.lazyLoad)},t.lazyLoad=function(){var e=this.options.lazyLoad;if(e){var o="number"==typeof e?e:0,n=this.getAdjacentCellElements(o),t=[];n.forEach((function(e){var o=s(e);t=t.concat(o)})),t.forEach((function(e){new r(e,this)}),this)}},r.prototype.handleEvent=n.handleEvent,r.prototype.load=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this);var e=this.img.getAttribute("data-flickity-lazyload")||this.img.getAttribute("data-flickity-lazyload-src"),o=this.img.getAttribute("data-flickity-lazyload-srcset");this.img.src=e,o&&this.img.setAttribute("srcset",o),this.img.removeAttribute("data-flickity-lazyload"),this.img.removeAttribute("data-flickity-lazyload-src"),this.img.removeAttribute("data-flickity-lazyload-srcset")},r.prototype.onload=function(e){this.complete(e,"flickity-lazyloaded")},r.prototype.onerror=function(e){this.complete(e,"flickity-lazyerror")},r.prototype.complete=function(e,o){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this);var n=this.flickity.getParentCell(this.img),t=n&&n.element;this.flickity.cellSizeChange(t),this.img.classList.add(o),this.flickity.dispatchEvent("lazyLoad",e,t)},o.LazyLoader=r,o}(0,e,o)}.apply(o,t))||(e.exports=s)},"./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/page-dots.js":(e,o,n)=>{var t,s;window,t=[n("./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/flickity.js"),n("./node_modules/.pnpm/unipointer@2.4.0/node_modules/unipointer/unipointer.js"),n("./node_modules/.pnpm/fizzy-ui-utils@2.0.7/node_modules/fizzy-ui-utils/utils.js")],void 0===(s=function(e,o,n){return function(e,o,n,t){"use strict";function s(e){this.parent=e,this._create()}s.prototype=Object.create(n.prototype),s.prototype._create=function(){this.holder=document.createElement("ol"),this.holder.className="flickity-page-dots",this.dots=[],this.handleClick=this.onClick.bind(this),this.on("pointerDown",this.parent.childUIPointerDown.bind(this.parent))},s.prototype.activate=function(){this.setDots(),this.holder.addEventListener("click",this.handleClick),this.bindStartEvent(this.holder),this.parent.element.appendChild(this.holder)},s.prototype.deactivate=function(){this.holder.removeEventListener("click",this.handleClick),this.unbindStartEvent(this.holder),this.parent.element.removeChild(this.holder)},s.prototype.setDots=function(){var e=this.parent.slides.length-this.dots.length;e>0?this.addDots(e):e<0&&this.removeDots(-e)},s.prototype.addDots=function(e){for(var o=document.createDocumentFragment(),n=[],t=this.dots.length,s=t+e,r=t;r<s;r++){var d=document.createElement("li");d.className="dot",d.setAttribute("aria-label","Page dot "+(r+1)),o.appendChild(d),n.push(d)}this.holder.appendChild(o),this.dots=this.dots.concat(n)},s.prototype.removeDots=function(e){this.dots.splice(this.dots.length-e,e).forEach((function(e){this.holder.removeChild(e)}),this)},s.prototype.updateSelected=function(){this.selectedDot&&(this.selectedDot.className="dot",this.selectedDot.removeAttribute("aria-current")),this.dots.length&&(this.selectedDot=this.dots[this.parent.selectedIndex],this.selectedDot.className="dot is-selected",this.selectedDot.setAttribute("aria-current","step"))},s.prototype.onTap=s.prototype.onClick=function(e){var o=e.target;if("LI"==o.nodeName){this.parent.uiChange();var n=this.dots.indexOf(o);this.parent.select(n)}},s.prototype.destroy=function(){this.deactivate(),this.allOff()},o.PageDots=s,t.extend(o.defaults,{pageDots:!0}),o.createMethods.push("_createPageDots");var r=o.prototype;return r._createPageDots=function(){this.options.pageDots&&(this.pageDots=new s(this),this.on("activate",this.activatePageDots),this.on("select",this.updateSelectedPageDots),this.on("cellChange",this.updatePageDots),this.on("resize",this.updatePageDots),this.on("deactivate",this.deactivatePageDots))},r.activatePageDots=function(){this.pageDots.activate()},r.updateSelectedPageDots=function(){this.pageDots.updateSelected()},r.updatePageDots=function(){this.pageDots.setDots()},r.deactivatePageDots=function(){this.pageDots.deactivate()},o.PageDots=s,o}(0,e,o,n)}.apply(o,t))||(e.exports=s)},"./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/player.js":(e,o,n)=>{var t,s;window,t=[n("./node_modules/.pnpm/ev-emitter@1.1.1/node_modules/ev-emitter/ev-emitter.js"),n("./node_modules/.pnpm/fizzy-ui-utils@2.0.7/node_modules/fizzy-ui-utils/utils.js"),n("./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/flickity.js")],void 0===(s=function(e,o,n){return function(e,o,n){"use strict";function t(e){this.parent=e,this.state="stopped",this.onVisibilityChange=this.visibilityChange.bind(this),this.onVisibilityPlay=this.visibilityPlay.bind(this)}t.prototype=Object.create(e.prototype),t.prototype.play=function(){"playing"!=this.state&&(document.hidden?document.addEventListener("visibilitychange",this.onVisibilityPlay):(this.state="playing",document.addEventListener("visibilitychange",this.onVisibilityChange),this.tick()))},t.prototype.tick=function(){if("playing"==this.state){var e=this.parent.options.autoPlay;e="number"==typeof e?e:3e3;var o=this;this.clear(),this.timeout=setTimeout((function(){o.parent.next(!0),o.tick()}),e)}},t.prototype.stop=function(){this.state="stopped",this.clear(),document.removeEventListener("visibilitychange",this.onVisibilityChange)},t.prototype.clear=function(){clearTimeout(this.timeout)},t.prototype.pause=function(){"playing"==this.state&&(this.state="paused",this.clear())},t.prototype.unpause=function(){"paused"==this.state&&this.play()},t.prototype.visibilityChange=function(){this[document.hidden?"pause":"unpause"]()},t.prototype.visibilityPlay=function(){this.play(),document.removeEventListener("visibilitychange",this.onVisibilityPlay)},o.extend(n.defaults,{pauseAutoPlayOnHover:!0}),n.createMethods.push("_createPlayer");var s=n.prototype;return s._createPlayer=function(){this.player=new t(this),this.on("activate",this.activatePlayer),this.on("uiChange",this.stopPlayer),this.on("pointerDown",this.stopPlayer),this.on("deactivate",this.deactivatePlayer)},s.activatePlayer=function(){this.options.autoPlay&&(this.player.play(),this.element.addEventListener("mouseenter",this))},s.playPlayer=function(){this.player.play()},s.stopPlayer=function(){this.player.stop()},s.pausePlayer=function(){this.player.pause()},s.unpausePlayer=function(){this.player.unpause()},s.deactivatePlayer=function(){this.player.stop(),this.element.removeEventListener("mouseenter",this)},s.onmouseenter=function(){this.options.pauseAutoPlayOnHover&&(this.player.pause(),this.element.addEventListener("mouseleave",this))},s.onmouseleave=function(){this.player.unpause(),this.element.removeEventListener("mouseleave",this)},n.Player=t,n}(e,o,n)}.apply(o,t))||(e.exports=s)},"./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/prev-next-button.js":(e,o,n)=>{var t,s;window,t=[n("./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/flickity.js"),n("./node_modules/.pnpm/unipointer@2.4.0/node_modules/unipointer/unipointer.js"),n("./node_modules/.pnpm/fizzy-ui-utils@2.0.7/node_modules/fizzy-ui-utils/utils.js")],void 0===(s=function(e,o,n){return function(e,o,n,t){"use strict";var s="http://www.w3.org/2000/svg";function r(e,o){this.direction=e,this.parent=o,this._create()}function d(e){return"string"==typeof e?e:"M "+e.x0+",50 L "+e.x1+","+(e.y1+50)+" L "+e.x2+","+(e.y2+50)+" L "+e.x3+",50  L "+e.x2+","+(50-e.y2)+" L "+e.x1+","+(50-e.y1)+" Z"}r.prototype=Object.create(n.prototype),r.prototype._create=function(){this.isEnabled=!0,this.isPrevious=-1==this.direction;var e=this.parent.options.rightToLeft?1:-1;this.isLeft=this.direction==e;var o=this.element=document.createElement("button");o.className="flickity-button flickity-prev-next-button",o.className+=this.isPrevious?" previous":" next",o.setAttribute("type","button"),this.disable(),o.setAttribute("aria-label",this.isPrevious?"Previous":"Next");var n=this.createSVG();o.appendChild(n),this.parent.on("select",this.update.bind(this)),this.on("pointerDown",this.parent.childUIPointerDown.bind(this.parent))},r.prototype.activate=function(){this.bindStartEvent(this.element),this.element.addEventListener("click",this),this.parent.element.appendChild(this.element)},r.prototype.deactivate=function(){this.parent.element.removeChild(this.element),this.unbindStartEvent(this.element),this.element.removeEventListener("click",this)},r.prototype.createSVG=function(){var e=document.createElementNS(s,"svg");e.setAttribute("class","flickity-button-icon"),e.setAttribute("viewBox","0 0 100 100");var o=document.createElementNS(s,"path"),n=d(this.parent.options.arrowShape);return o.setAttribute("d",n),o.setAttribute("class","arrow"),this.isLeft||o.setAttribute("transform","translate(100, 100) rotate(180) "),e.appendChild(o),e},r.prototype.handleEvent=t.handleEvent,r.prototype.onclick=function(){if(this.isEnabled){this.parent.uiChange();var e=this.isPrevious?"previous":"next";this.parent[e]()}},r.prototype.enable=function(){this.isEnabled||(this.element.disabled=!1,this.isEnabled=!0)},r.prototype.disable=function(){this.isEnabled&&(this.element.disabled=!0,this.isEnabled=!1)},r.prototype.update=function(){var e=this.parent.slides;if(this.parent.options.wrapAround&&e.length>1)this.enable();else{var o=e.length?e.length-1:0,n=this.isPrevious?0:o;this[this.parent.selectedIndex==n?"disable":"enable"]()}},r.prototype.destroy=function(){this.deactivate(),this.allOff()},t.extend(o.defaults,{prevNextButtons:!0,arrowShape:{x0:10,x1:60,y1:50,x2:70,y2:40,x3:30}}),o.createMethods.push("_createPrevNextButtons");var u=o.prototype;return u._createPrevNextButtons=function(){this.options.prevNextButtons&&(this.prevButton=new r(-1,this),this.nextButton=new r(1,this),this.on("activate",this.activatePrevNextButtons))},u.activatePrevNextButtons=function(){this.prevButton.activate(),this.nextButton.activate(),this.on("deactivate",this.deactivatePrevNextButtons)},u.deactivatePrevNextButtons=function(){this.prevButton.deactivate(),this.nextButton.deactivate(),this.off("deactivate",this.deactivatePrevNextButtons)},o.PrevNextButton=r,o}(0,e,o,n)}.apply(o,t))||(e.exports=s)},"./node_modules/.pnpm/flickity@2.3.0/node_modules/flickity/js/slide.js":(e,o,n)=>{var t,s;window,void 0===(s="function"==typeof(t=function(){"use strict";function e(e){this.parent=e,this.isOriginLeft="left"==e.originSide,this.cells=[],this.outerWidth=0,this.height=0}var o=e.prototype;return o.addCell=function(e){if(this.cells.push(e),this.outerWidth+=e.size.outerWidth,this.height=Math.max(e.size.outerHeight,this.height),1==this.cells.length){this.x=e.x;var o=this.isOriginLeft?"marginLeft":"marginRight";this.firstMargin=e.size[o]}},o.updateTarget=function(){var e=this.isOriginLeft?"marginRight":"marginLeft",o=this.getLastCell(),n=o?o.size[e]:0,t=this.outerWidth-(this.firstMargin+n);this.target=this.x+this.firstMargin+t*this.parent.cellAlign},o.getLastCell=function(){return this.cells[this.cells.length-1]},o.select=function(){this.cells.forEach((function(e){e.select()}))},o.unselect=function(){this.cells.forEach((function(e){e.unselect()}))},o.getCellElements=function(){return this.cells.map((function(e){return e.element}))},e})?t.call(o,n,o,e):t)||(e.exports=s)},"./node_modules/.pnpm/get-size@2.0.3/node_modules/get-size/get-size.js":(e,o,n)=>{var t,s;window,void 0===(s="function"==typeof(t=function(){"use strict";function e(e){var o=parseFloat(e);return-1==e.indexOf("%")&&!isNaN(o)&&o}function o(){}var n="undefined"==typeof console?o:function(e){console.error(e)},t=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],s=t.length;function r(){for(var e={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},o=0;o<s;o++)e[t[o]]=0;return e}function d(e){var o=getComputedStyle(e);return o||n("Style returned "+o+". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1"),o}var u,i=!1;function l(){if(!i){i=!0;var o=document.createElement("div");o.style.width="200px",o.style.padding="1px 2px 3px 4px",o.style.borderStyle="solid",o.style.borderWidth="1px 2px 3px 4px",o.style.boxSizing="border-box";var n=document.body||document.documentElement;n.appendChild(o);var t=d(o);u=200==Math.round(e(t.width)),a.isBoxSizeOuter=u,n.removeChild(o)}}function a(o){if(l(),"string"==typeof o&&(o=document.querySelector(o)),o&&"object"==typeof o&&o.nodeType){var n=d(o);if("none"==n.display)return r();var i={};i.width=o.offsetWidth,i.height=o.offsetHeight;for(var a=i.isBorderBox="border-box"==n.boxSizing,c=0;c<s;c++){var m=t[c],p=n[m],f=parseFloat(p);i[m]=isNaN(f)?0:f}var h=i.paddingLeft+i.paddingRight,_=i.paddingTop+i.paddingBottom,v=i.marginLeft+i.marginRight,j=i.marginTop+i.marginBottom,g=i.borderLeftWidth+i.borderRightWidth,y=i.borderTopWidth+i.borderBottomWidth,b=a&&u,E=e(n.width);!1!==E&&(i.width=E+(b?0:h+g));var w=e(n.height);return!1!==w&&(i.height=w+(b?0:_+y)),i.innerWidth=i.width-(h+g),i.innerHeight=i.height-(_+y),i.outerWidth=i.width+v,i.outerHeight=i.height+j,i}}return a})?t.call(o,n,o,e):t)||(e.exports=s)},"./node_modules/.pnpm/imagesloaded@4.1.4/node_modules/imagesloaded/imagesloaded.js":function(e,o,n){var t,s;!function(r,d){"use strict";t=[n("./node_modules/.pnpm/ev-emitter@1.1.1/node_modules/ev-emitter/ev-emitter.js")],s=function(e){return function(e,o){var n=e.jQuery,t=e.console;function s(e,o){for(var n in o)e[n]=o[n];return e}var r=Array.prototype.slice;function d(e){return Array.isArray(e)?e:"object"==typeof e&&"number"==typeof e.length?r.call(e):[e]}function u(e,o,r){if(!(this instanceof u))return new u(e,o,r);var i=e;"string"==typeof e&&(i=document.querySelectorAll(e)),i?(this.elements=d(i),this.options=s({},this.options),"function"==typeof o?r=o:s(this.options,o),r&&this.on("always",r),this.getImages(),n&&(this.jqDeferred=new n.Deferred),setTimeout(this.check.bind(this))):t.error("Bad element for imagesLoaded "+(i||e))}u.prototype=Object.create(o.prototype),u.prototype.options={},u.prototype.getImages=function(){this.images=[],this.elements.forEach(this.addElementImages,this)},u.prototype.addElementImages=function(e){"IMG"==e.nodeName&&this.addImage(e),!0===this.options.background&&this.addElementBackgroundImages(e);var o=e.nodeType;if(o&&i[o]){for(var n=e.querySelectorAll("img"),t=0;t<n.length;t++){var s=n[t];this.addImage(s)}if("string"==typeof this.options.background){var r=e.querySelectorAll(this.options.background);for(t=0;t<r.length;t++){var d=r[t];this.addElementBackgroundImages(d)}}}};var i={1:!0,9:!0,11:!0};function l(e){this.img=e}function a(e,o){this.url=e,this.element=o,this.img=new Image}return u.prototype.addElementBackgroundImages=function(e){var o=getComputedStyle(e);if(o)for(var n=/url\((['"])?(.*?)\1\)/gi,t=n.exec(o.backgroundImage);null!==t;){var s=t&&t[2];s&&this.addBackground(s,e),t=n.exec(o.backgroundImage)}},u.prototype.addImage=function(e){var o=new l(e);this.images.push(o)},u.prototype.addBackground=function(e,o){var n=new a(e,o);this.images.push(n)},u.prototype.check=function(){var e=this;function o(o,n,t){setTimeout((function(){e.progress(o,n,t)}))}this.progressedCount=0,this.hasAnyBroken=!1,this.images.length?this.images.forEach((function(e){e.once("progress",o),e.check()})):this.complete()},u.prototype.progress=function(e,o,n){this.progressedCount++,this.hasAnyBroken=this.hasAnyBroken||!e.isLoaded,this.emitEvent("progress",[this,e,o]),this.jqDeferred&&this.jqDeferred.notify&&this.jqDeferred.notify(this,e),this.progressedCount==this.images.length&&this.complete(),this.options.debug&&t&&t.log("progress: "+n,e,o)},u.prototype.complete=function(){var e=this.hasAnyBroken?"fail":"done";if(this.isComplete=!0,this.emitEvent(e,[this]),this.emitEvent("always",[this]),this.jqDeferred){var o=this.hasAnyBroken?"reject":"resolve";this.jqDeferred[o](this)}},l.prototype=Object.create(o.prototype),l.prototype.check=function(){this.getIsImageComplete()?this.confirm(0!==this.img.naturalWidth,"naturalWidth"):(this.proxyImage=new Image,this.proxyImage.addEventListener("load",this),this.proxyImage.addEventListener("error",this),this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.proxyImage.src=this.img.src)},l.prototype.getIsImageComplete=function(){return this.img.complete&&this.img.naturalWidth},l.prototype.confirm=function(e,o){this.isLoaded=e,this.emitEvent("progress",[this,this.img,o])},l.prototype.handleEvent=function(e){var o="on"+e.type;this[o]&&this[o](e)},l.prototype.onload=function(){this.confirm(!0,"onload"),this.unbindEvents()},l.prototype.onerror=function(){this.confirm(!1,"onerror"),this.unbindEvents()},l.prototype.unbindEvents=function(){this.proxyImage.removeEventListener("load",this),this.proxyImage.removeEventListener("error",this),this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},a.prototype=Object.create(l.prototype),a.prototype.check=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.img.src=this.url,this.getIsImageComplete()&&(this.confirm(0!==this.img.naturalWidth,"naturalWidth"),this.unbindEvents())},a.prototype.unbindEvents=function(){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},a.prototype.confirm=function(e,o){this.isLoaded=e,this.emitEvent("progress",[this,this.element,o])},u.makeJQueryPlugin=function(o){(o=o||e.jQuery)&&((n=o).fn.imagesLoaded=function(e,o){return new u(this,e,o).jqDeferred.promise(n(this))})},u.makeJQueryPlugin(),u}(r,e)}.apply(o,t),void 0===s||(e.exports=s)}("undefined"!=typeof window?window:this)},"./node_modules/.pnpm/smoothscroll-polyfill@0.4.4/node_modules/smoothscroll-polyfill/dist/smoothscroll.js":e=>{!function(){"use strict";e.exports={polyfill:function(){var e=window,o=document;if(!("scrollBehavior"in o.documentElement.style)||!0===e.__forceSmoothScrollPolyfill__){var n,t=e.HTMLElement||e.Element,s={scroll:e.scroll||e.scrollTo,scrollBy:e.scrollBy,elementScroll:t.prototype.scroll||u,scrollIntoView:t.prototype.scrollIntoView},r=e.performance&&e.performance.now?e.performance.now.bind(e.performance):Date.now,d=(n=e.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(n)?1:0);e.scroll=e.scrollTo=function(){void 0!==arguments[0]&&(!0!==i(arguments[0])?f.call(e,o.body,void 0!==arguments[0].left?~~arguments[0].left:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:e.scrollY||e.pageYOffset):s.scroll.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:e.scrollY||e.pageYOffset))},e.scrollBy=function(){void 0!==arguments[0]&&(i(arguments[0])?s.scrollBy.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):f.call(e,o.body,~~arguments[0].left+(e.scrollX||e.pageXOffset),~~arguments[0].top+(e.scrollY||e.pageYOffset)))},t.prototype.scroll=t.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==i(arguments[0])){var e=arguments[0].left,o=arguments[0].top;f.call(this,this,void 0===e?this.scrollLeft:~~e,void 0===o?this.scrollTop:~~o)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");s.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},t.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==i(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):s.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},t.prototype.scrollIntoView=function(){if(!0!==i(arguments[0])){var n=m(this),t=n.getBoundingClientRect(),r=this.getBoundingClientRect();n!==o.body?(f.call(this,n,n.scrollLeft+r.left-t.left,n.scrollTop+r.top-t.top),"fixed"!==e.getComputedStyle(n).position&&e.scrollBy({left:t.left,top:t.top,behavior:"smooth"})):e.scrollBy({left:r.left,top:r.top,behavior:"smooth"})}else s.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function u(e,o){this.scrollLeft=e,this.scrollTop=o}function i(e){if(null===e||"object"!=typeof e||void 0===e.behavior||"auto"===e.behavior||"instant"===e.behavior)return!0;if("object"==typeof e&&"smooth"===e.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+e.behavior+" is not a valid value for enumeration ScrollBehavior.")}function l(e,o){return"Y"===o?e.clientHeight+d<e.scrollHeight:"X"===o?e.clientWidth+d<e.scrollWidth:void 0}function a(o,n){var t=e.getComputedStyle(o,null)["overflow"+n];return"auto"===t||"scroll"===t}function c(e){var o=l(e,"Y")&&a(e,"Y"),n=l(e,"X")&&a(e,"X");return o||n}function m(e){for(;e!==o.body&&!1===c(e);)e=e.parentNode||e.host;return e}function p(o){var n,t,s,d,u=(r()-o.startTime)/468;d=u=u>1?1:u,n=.5*(1-Math.cos(Math.PI*d)),t=o.startX+(o.x-o.startX)*n,s=o.startY+(o.y-o.startY)*n,o.method.call(o.scrollable,t,s),t===o.x&&s===o.y||e.requestAnimationFrame(p.bind(e,o))}function f(n,t,d){var i,l,a,c,m=r();n===o.body?(i=e,l=e.scrollX||e.pageXOffset,a=e.scrollY||e.pageYOffset,c=s.scroll):(i=n,l=n.scrollLeft,a=n.scrollTop,c=u),p({scrollable:i,method:c,startTime:m,startX:l,startY:a,x:t,y:d})}}}}()},"./node_modules/.pnpm/unidragger@2.4.0/node_modules/unidragger/unidragger.js":(e,o,n)=>{var t,s;!function(r,d){t=[n("./node_modules/.pnpm/unipointer@2.4.0/node_modules/unipointer/unipointer.js")],s=function(e){return function(e,o){"use strict";function n(){}var t=n.prototype=Object.create(o.prototype);t.bindHandles=function(){this._bindHandles(!0)},t.unbindHandles=function(){this._bindHandles(!1)},t._bindHandles=function(o){for(var n=(o=void 0===o||o)?"addEventListener":"removeEventListener",t=o?this._touchActionValue:"",s=0;s<this.handles.length;s++){var r=this.handles[s];this._bindStartEvent(r,o),r[n]("click",this),e.PointerEvent&&(r.style.touchAction=t)}},t._touchActionValue="none",t.pointerDown=function(e,o){this.okayPointerDown(e)&&(this.pointerDownPointer={pageX:o.pageX,pageY:o.pageY},e.preventDefault(),this.pointerDownBlur(),this._bindPostStartEvents(e),this.emitEvent("pointerDown",[e,o]))};var s={TEXTAREA:!0,INPUT:!0,SELECT:!0,OPTION:!0},r={radio:!0,checkbox:!0,button:!0,submit:!0,image:!0,file:!0};return t.okayPointerDown=function(e){var o=s[e.target.nodeName],n=r[e.target.type],t=!o||n;return t||this._pointerReset(),t},t.pointerDownBlur=function(){var e=document.activeElement;e&&e.blur&&e!=document.body&&e.blur()},t.pointerMove=function(e,o){var n=this._dragPointerMove(e,o);this.emitEvent("pointerMove",[e,o,n]),this._dragMove(e,o,n)},t._dragPointerMove=function(e,o){var n={x:o.pageX-this.pointerDownPointer.pageX,y:o.pageY-this.pointerDownPointer.pageY};return!this.isDragging&&this.hasDragStarted(n)&&this._dragStart(e,o),n},t.hasDragStarted=function(e){return Math.abs(e.x)>3||Math.abs(e.y)>3},t.pointerUp=function(e,o){this.emitEvent("pointerUp",[e,o]),this._dragPointerUp(e,o)},t._dragPointerUp=function(e,o){this.isDragging?this._dragEnd(e,o):this._staticClick(e,o)},t._dragStart=function(e,o){this.isDragging=!0,this.isPreventingClicks=!0,this.dragStart(e,o)},t.dragStart=function(e,o){this.emitEvent("dragStart",[e,o])},t._dragMove=function(e,o,n){this.isDragging&&this.dragMove(e,o,n)},t.dragMove=function(e,o,n){e.preventDefault(),this.emitEvent("dragMove",[e,o,n])},t._dragEnd=function(e,o){this.isDragging=!1,setTimeout(function(){delete this.isPreventingClicks}.bind(this)),this.dragEnd(e,o)},t.dragEnd=function(e,o){this.emitEvent("dragEnd",[e,o])},t.onclick=function(e){this.isPreventingClicks&&e.preventDefault()},t._staticClick=function(e,o){this.isIgnoringMouseUp&&"mouseup"==e.type||(this.staticClick(e,o),"mouseup"!=e.type&&(this.isIgnoringMouseUp=!0,setTimeout(function(){delete this.isIgnoringMouseUp}.bind(this),400)))},t.staticClick=function(e,o){this.emitEvent("staticClick",[e,o])},n.getPointerPoint=o.getPointerPoint,n}(r,e)}.apply(o,t),void 0===s||(e.exports=s)}(window)},"./node_modules/.pnpm/unipointer@2.4.0/node_modules/unipointer/unipointer.js":(e,o,n)=>{var t,s;!function(r,d){t=[n("./node_modules/.pnpm/ev-emitter@1.1.1/node_modules/ev-emitter/ev-emitter.js")],s=function(e){return function(e,o){"use strict";function n(){}function t(){}var s=t.prototype=Object.create(o.prototype);s.bindStartEvent=function(e){this._bindStartEvent(e,!0)},s.unbindStartEvent=function(e){this._bindStartEvent(e,!1)},s._bindStartEvent=function(o,n){var t=(n=void 0===n||n)?"addEventListener":"removeEventListener",s="mousedown";"ontouchstart"in e?s="touchstart":e.PointerEvent&&(s="pointerdown"),o[t](s,this)},s.handleEvent=function(e){var o="on"+e.type;this[o]&&this[o](e)},s.getTouch=function(e){for(var o=0;o<e.length;o++){var n=e[o];if(n.identifier==this.pointerIdentifier)return n}},s.onmousedown=function(e){var o=e.button;o&&0!==o&&1!==o||this._pointerDown(e,e)},s.ontouchstart=function(e){this._pointerDown(e,e.changedTouches[0])},s.onpointerdown=function(e){this._pointerDown(e,e)},s._pointerDown=function(e,o){e.button||this.isPointerDown||(this.isPointerDown=!0,this.pointerIdentifier=void 0!==o.pointerId?o.pointerId:o.identifier,this.pointerDown(e,o))},s.pointerDown=function(e,o){this._bindPostStartEvents(e),this.emitEvent("pointerDown",[e,o])};var r={mousedown:["mousemove","mouseup"],touchstart:["touchmove","touchend","touchcancel"],pointerdown:["pointermove","pointerup","pointercancel"]};return s._bindPostStartEvents=function(o){if(o){var n=r[o.type];n.forEach((function(o){e.addEventListener(o,this)}),this),this._boundPointerEvents=n}},s._unbindPostStartEvents=function(){this._boundPointerEvents&&(this._boundPointerEvents.forEach((function(o){e.removeEventListener(o,this)}),this),delete this._boundPointerEvents)},s.onmousemove=function(e){this._pointerMove(e,e)},s.onpointermove=function(e){e.pointerId==this.pointerIdentifier&&this._pointerMove(e,e)},s.ontouchmove=function(e){var o=this.getTouch(e.changedTouches);o&&this._pointerMove(e,o)},s._pointerMove=function(e,o){this.pointerMove(e,o)},s.pointerMove=function(e,o){this.emitEvent("pointerMove",[e,o])},s.onmouseup=function(e){this._pointerUp(e,e)},s.onpointerup=function(e){e.pointerId==this.pointerIdentifier&&this._pointerUp(e,e)},s.ontouchend=function(e){var o=this.getTouch(e.changedTouches);o&&this._pointerUp(e,o)},s._pointerUp=function(e,o){this._pointerDone(),this.pointerUp(e,o)},s.pointerUp=function(e,o){this.emitEvent("pointerUp",[e,o])},s._pointerDone=function(){this._pointerReset(),this._unbindPostStartEvents(),this.pointerDone()},s._pointerReset=function(){this.isPointerDown=!1,delete this.pointerIdentifier},s.pointerDone=n,s.onpointercancel=function(e){e.pointerId==this.pointerIdentifier&&this._pointerCancel(e,e)},s.ontouchcancel=function(e){var o=this.getTouch(e.changedTouches);o&&this._pointerCancel(e,o)},s._pointerCancel=function(e,o){this._pointerDone(),this.pointerCancel(e,o)},s.pointerCancel=function(e,o){this.emitEvent("pointerCancel",[e,o])},t.getPointerPoint=function(e){return{x:e.pageX,y:e.pageY}},t}(r,e)}.apply(o,t),void 0===s||(e.exports=s)}(window)},"./node_modules/.pnpm/vanilla-lazyload@17.8.2/node_modules/vanilla-lazyload/dist/lazyload.min.js":function(e){e.exports=function(){"use strict";function e(){return e=Object.assign||function(e){for(var o=1;o<arguments.length;o++){var n=arguments[o];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e},e.apply(this,arguments)}var o="undefined"!=typeof window,n=o&&!("onscroll"in window)||"undefined"!=typeof navigator&&/(gle|ing|ro)bot|crawl|spider/i.test(navigator.userAgent),t=o&&"IntersectionObserver"in window,s=o&&"classList"in document.createElement("p"),r=o&&window.devicePixelRatio>1,d={elements_selector:".lazy",container:n||o?document:null,threshold:300,thresholds:null,data_src:"src",data_srcset:"srcset",data_sizes:"sizes",data_bg:"bg",data_bg_hidpi:"bg-hidpi",data_bg_multi:"bg-multi",data_bg_multi_hidpi:"bg-multi-hidpi",data_bg_set:"bg-set",data_poster:"poster",class_applied:"applied",class_loading:"loading",class_loaded:"loaded",class_error:"error",class_entered:"entered",class_exited:"exited",unobserve_completed:!0,unobserve_entered:!1,cancel_on_exit:!0,callback_enter:null,callback_exit:null,callback_applied:null,callback_loading:null,callback_loaded:null,callback_error:null,callback_finish:null,callback_cancel:null,use_native:!1,restore_on_error:!1},u=function(o){return e({},d,o)},i=function(e,o){var n,t="LazyLoad::Initialized",s=new e(o);try{n=new CustomEvent(t,{detail:{instance:s}})}catch(e){(n=document.createEvent("CustomEvent")).initCustomEvent(t,!1,!1,{instance:s})}window.dispatchEvent(n)},l="src",a="srcset",c="sizes",m="poster",p="llOriginalAttrs",f="data",h="loading",_="loaded",v="applied",j="error",g="native",y="data-",b="ll-status",E=function(e,o){return e.getAttribute(y+o)},w=function(e){return E(e,b)},k=function(e,o){return function(e,o,n){var t="data-ll-status";null!==n?e.setAttribute(t,n):e.removeAttribute(t)}(e,0,o)},S=function(e){return k(e,null)},x=function(e){return null===w(e)},A=function(e){return w(e)===g},L=[h,_,v,j],C=function(e,o,n,t){e&&(void 0===t?void 0===n?e(o):e(o,n):e(o,n,t))},T=function(e,o){s?e.classList.add(o):e.className+=(e.className?" ":"")+o},P=function(e,o){s?e.classList.remove(o):e.className=e.className.replace(new RegExp("(^|\\s+)"+o+"(\\s+|$)")," ").replace(/^\s+/,"").replace(/\s+$/,"")},I=function(e){return e.llTempImage},D=function(e,o){if(o){var n=o._observer;n&&n.unobserve(e)}},O=function(e,o){e&&(e.loadingCount+=o)},M=function(e,o){e&&(e.toLoadCount=o)},z=function(e){for(var o,n=[],t=0;o=e.children[t];t+=1)"SOURCE"===o.tagName&&n.push(o);return n},B=function(e,o){var n=e.parentNode;n&&"PICTURE"===n.tagName&&z(n).forEach(o)},N=function(e,o){z(e).forEach(o)},F=[l],q=[l,m],R=[l,a,c],W=[f],H=function(e){return!!e[p]},V=function(e){return e[p]},U=function(e){return delete e[p]},X=function(e,o){if(!H(e)){var n={};o.forEach((function(o){n[o]=e.getAttribute(o)})),e[p]=n}},G=function(e,o){if(H(e)){var n=V(e);o.forEach((function(o){!function(e,o,n){n?e.setAttribute(o,n):e.removeAttribute(o)}(e,o,n[o])}))}},Y=function(e,o,n){T(e,o.class_applied),k(e,v),n&&(o.unobserve_completed&&D(e,o),C(o.callback_applied,e,n))},$=function(e,o,n){T(e,o.class_loading),k(e,h),n&&(O(n,1),C(o.callback_loading,e,n))},Q=function(e,o,n){n&&e.setAttribute(o,n)},K=function(e,o){Q(e,c,E(e,o.data_sizes)),Q(e,a,E(e,o.data_srcset)),Q(e,l,E(e,o.data_src))},J={IMG:function(e,o){B(e,(function(e){X(e,R),K(e,o)})),X(e,R),K(e,o)},IFRAME:function(e,o){X(e,F),Q(e,l,E(e,o.data_src))},VIDEO:function(e,o){N(e,(function(e){X(e,F),Q(e,l,E(e,o.data_src))})),X(e,q),Q(e,m,E(e,o.data_poster)),Q(e,l,E(e,o.data_src)),e.load()},OBJECT:function(e,o){X(e,W),Q(e,f,E(e,o.data_src))}},Z=["IMG","IFRAME","VIDEO","OBJECT"],ee=function(e,o){!o||function(e){return e.loadingCount>0}(o)||function(e){return e.toLoadCount>0}(o)||C(e.callback_finish,o)},oe=function(e,o,n){e.addEventListener(o,n),e.llEvLisnrs[o]=n},ne=function(e,o,n){e.removeEventListener(o,n)},te=function(e){return!!e.llEvLisnrs},se=function(e){if(te(e)){var o=e.llEvLisnrs;for(var n in o){var t=o[n];ne(e,n,t)}delete e.llEvLisnrs}},re=function(e,o,n){!function(e){delete e.llTempImage}(e),O(n,-1),function(e){e&&(e.toLoadCount-=1)}(n),P(e,o.class_loading),o.unobserve_completed&&D(e,n)},de=function(e,o,n){var t=I(e)||e;te(t)||function(e,o,n){te(e)||(e.llEvLisnrs={});var t="VIDEO"===e.tagName?"loadeddata":"load";oe(e,t,o),oe(e,"error",n)}(t,(function(s){!function(e,o,n,t){var s=A(o);re(o,n,t),T(o,n.class_loaded),k(o,_),C(n.callback_loaded,o,t),s||ee(n,t)}(0,e,o,n),se(t)}),(function(s){!function(e,o,n,t){var s=A(o);re(o,n,t),T(o,n.class_error),k(o,j),C(n.callback_error,o,t),n.restore_on_error&&G(o,R),s||ee(n,t)}(0,e,o,n),se(t)}))},ue=function(e,o,n){!function(e){return Z.indexOf(e.tagName)>-1}(e)?function(e,o,n){!function(e){e.llTempImage=document.createElement("IMG")}(e),de(e,o,n),function(e){H(e)||(e[p]={backgroundImage:e.style.backgroundImage})}(e),function(e,o,n){var t=E(e,o.data_bg),s=E(e,o.data_bg_hidpi),d=r&&s?s:t;d&&(e.style.backgroundImage='url("'.concat(d,'")'),I(e).setAttribute(l,d),$(e,o,n))}(e,o,n),function(e,o,n){var t=E(e,o.data_bg_multi),s=E(e,o.data_bg_multi_hidpi),d=r&&s?s:t;d&&(e.style.backgroundImage=d,Y(e,o,n))}(e,o,n),function(e,o,n){var t=E(e,o.data_bg_set);if(t){var s=t.split("|"),r=s.map((function(e){return"image-set(".concat(e,")")}));e.style.backgroundImage=r.join(),""===e.style.backgroundImage&&(r=s.map((function(e){return"-webkit-image-set(".concat(e,")")})),e.style.backgroundImage=r.join()),Y(e,o,n)}}(e,o,n)}(e,o,n):function(e,o,n){de(e,o,n),function(e,o,n){var t=J[e.tagName];t&&(t(e,o),$(e,o,n))}(e,o,n)}(e,o,n)},ie=function(e){e.removeAttribute(l),e.removeAttribute(a),e.removeAttribute(c)},le=function(e){B(e,(function(e){G(e,R)})),G(e,R)},ae={IMG:le,IFRAME:function(e){G(e,F)},VIDEO:function(e){N(e,(function(e){G(e,F)})),G(e,q),e.load()},OBJECT:function(e){G(e,W)}},ce=function(e,o){(function(e){var o=ae[e.tagName];o?o(e):function(e){if(H(e)){var o=V(e);e.style.backgroundImage=o.backgroundImage}}(e)})(e),function(e,o){x(e)||A(e)||(P(e,o.class_entered),P(e,o.class_exited),P(e,o.class_applied),P(e,o.class_loading),P(e,o.class_loaded),P(e,o.class_error))}(e,o),S(e),U(e)},me=["IMG","IFRAME","VIDEO"],pe=function(e){return e.use_native&&"loading"in HTMLImageElement.prototype},fe=function(e,o,n){e.forEach((function(e){return function(e){return e.isIntersecting||e.intersectionRatio>0}(e)?function(e,o,n,t){var s=function(e){return L.indexOf(w(e))>=0}(e);k(e,"entered"),T(e,n.class_entered),P(e,n.class_exited),function(e,o,n){o.unobserve_entered&&D(e,n)}(e,n,t),C(n.callback_enter,e,o,t),s||ue(e,n,t)}(e.target,e,o,n):function(e,o,n,t){x(e)||(T(e,n.class_exited),function(e,o,n,t){n.cancel_on_exit&&function(e){return w(e)===h}(e)&&"IMG"===e.tagName&&(se(e),function(e){B(e,(function(e){ie(e)})),ie(e)}(e),le(e),P(e,n.class_loading),O(t,-1),S(e),C(n.callback_cancel,e,o,t))}(e,o,n,t),C(n.callback_exit,e,o,t))}(e.target,e,o,n)}))},he=function(e){return Array.prototype.slice.call(e)},_e=function(e){return e.container.querySelectorAll(e.elements_selector)},ve=function(e){return function(e){return w(e)===j}(e)},je=function(e,o){return function(e){return he(e).filter(x)}(e||_e(o))},ge=function(e,n){var s=u(e);this._settings=s,this.loadingCount=0,function(e,o){t&&!pe(e)&&(o._observer=new IntersectionObserver((function(n){fe(n,e,o)}),function(e){return{root:e.container===document?null:e.container,rootMargin:e.thresholds||e.threshold+"px"}}(e)))}(s,this),function(e,n){o&&(n._onlineHandler=function(){!function(e,o){var n;(n=_e(e),he(n).filter(ve)).forEach((function(o){P(o,e.class_error),S(o)})),o.update()}(e,n)},window.addEventListener("online",n._onlineHandler))}(s,this),this.update(n)};return ge.prototype={update:function(e){var o,s,r=this._settings,d=je(e,r);M(this,d.length),!n&&t?pe(r)?function(e,o,n){e.forEach((function(e){-1!==me.indexOf(e.tagName)&&function(e,o,n){e.setAttribute("loading","lazy"),de(e,o,n),function(e,o){var n=J[e.tagName];n&&n(e,o)}(e,o),k(e,g)}(e,o,n)})),M(n,0)}(d,r,this):(s=d,function(e){e.disconnect()}(o=this._observer),function(e,o){o.forEach((function(o){e.observe(o)}))}(o,s)):this.loadAll(d)},destroy:function(){this._observer&&this._observer.disconnect(),o&&window.removeEventListener("online",this._onlineHandler),_e(this._settings).forEach((function(e){U(e)})),delete this._observer,delete this._settings,delete this._onlineHandler,delete this.loadingCount,delete this.toLoadCount},loadAll:function(e){var o=this,n=this._settings;je(e,n).forEach((function(e){D(e,o),ue(e,n,o)}))},restoreAll:function(){var e=this._settings;_e(e).forEach((function(o){ce(o,e)}))}},ge.load=function(e,o){var n=u(o);ue(e,n)},ge.resetStatus=function(e){S(e)},o&&function(e,o){if(o)if(o.length)for(var n,t=0;n=o[t];t+=1)i(e,n);else i(e,o)}(ge,window.lazyLoadOptions),ge}()},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_baseCreate.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isObject.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js");function r(e){if(!(0,t.default)(e))return{};if(s.nativeCreate)return(0,s.nativeCreate)(e);var o=function(){};o.prototype=e;var n=new o;return o.prototype=null,n}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_baseIteratee.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>a});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/identity.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isFunction.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isObject.js"),d=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isArray.js"),u=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/matcher.js"),i=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/property.js"),l=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_optimizeCb.js");function a(e,o,n){return null==e?t.default:(0,s.default)(e)?(0,l.default)(e,o,n):(0,r.default)(e)&&!(0,d.default)(e)?(0,u.default)(e):(0,i.default)(e)}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_cb.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/underscore.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_baseIteratee.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/iteratee.js");function d(e,o,n){return t.default.iteratee!==r.default?t.default.iteratee(e,o):(0,s.default)(e,o,n)}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_chainResult.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/underscore.js");function s(e,o){return e._chain?(0,t.default)(o).chain():o}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_collectNonEnumProps.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isFunction.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_has.js");function d(e,o){o=function(e){for(var o={},n=e.length,t=0;t<n;++t)o[e[t]]=!0;return{contains:function(e){return!0===o[e]},push:function(n){return o[n]=!0,e.push(n)}}}(o);var n=t.nonEnumerableProps.length,d=e.constructor,u=(0,s.default)(d)&&d.prototype||t.ObjProto,i="constructor";for((0,r.default)(e,i)&&!o.contains(i)&&o.push(i);n--;)(i=t.nonEnumerableProps[n])in e&&e[i]!==u[i]&&!o.contains(i)&&o.push(i)}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_createAssigner.js":(e,o,n)=>{"use strict";function t(e,o){return function(n){var t=arguments.length;if(o&&(n=Object(n)),t<2||null==n)return n;for(var s=1;s<t;s++)for(var r=arguments[s],d=e(r),u=d.length,i=0;i<u;i++){var l=d[i];o&&void 0!==n[l]||(n[l]=r[l])}return n}}n.r(o),n.d(o,{default:()=>t})},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_createEscaper.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/keys.js");function s(e){var o=function(o){return e[o]},n="(?:"+(0,t.default)(e).join("|")+")",s=RegExp(n),r=RegExp(n,"g");return function(e){return e=null==e?"":""+e,s.test(e)?e.replace(r,o):e}}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_createIndexFinder.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_getLength.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isNaN.js");function d(e,o,n){return function(d,u,i){var l=0,a=(0,t.default)(d);if("number"==typeof i)e>0?l=i>=0?i:Math.max(i+a,l):a=i>=0?Math.min(i+1,a):i+a+1;else if(n&&i&&a)return d[i=n(d,u)]===u?i:-1;if(u!=u)return(i=o(s.slice.call(d,l,a),r.default))>=0?i+l:-1;for(i=e>0?l:a-1;i>=0&&i<a;i+=e)if(d[i]===u)return i;return-1}}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_createPredicateIndexFinder.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_cb.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_getLength.js");function r(e){return function(o,n,r){n=(0,t.default)(n,r);for(var d=(0,s.default)(o),u=e>0?0:d-1;u>=0&&u<d;u+=e)if(n(o[u],u,o))return u;return-1}}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_createReduce.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_isArrayLike.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/keys.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_optimizeCb.js");function d(e){var o=function(o,n,r,d){var u=!(0,t.default)(o)&&(0,s.default)(o),i=(u||o).length,l=e>0?0:i-1;for(d||(r=o[u?u[l]:l],l+=e);l>=0&&l<i;l+=e){var a=u?u[l]:l;r=n(r,o[a],a,o)}return r};return function(e,n,t,s){var d=arguments.length>=3;return o(e,(0,r.default)(n,s,4),t,d)}}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_createSizePropertyCheck.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js");function s(e){return function(o){var n=e(o);return"number"==typeof n&&n>=0&&n<=t.MAX_ARRAY_INDEX}}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_deepGet.js":(e,o,n)=>{"use strict";function t(e,o){for(var n=o.length,t=0;t<n;t++){if(null==e)return;e=e[o[t]]}return n?e:void 0}n.r(o),n.d(o,{default:()=>t})},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_escapeMap.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_executeBound.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_baseCreate.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isObject.js");function r(e,o,n,r,d){if(!(r instanceof o))return e.apply(n,d);var u=(0,t.default)(e.prototype),i=e.apply(u,d);return(0,s.default)(i)?i:u}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_flatten.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>u});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_getLength.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_isArrayLike.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isArray.js"),d=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isArguments.js");function u(e,o,n,i){if(i=i||[],o||0===o){if(o<=0)return i.concat(e)}else o=1/0;for(var l=i.length,a=0,c=(0,t.default)(e);a<c;a++){var m=e[a];if((0,s.default)(m)&&((0,r.default)(m)||(0,d.default)(m)))if(o>1)u(m,o-1,n,i),l=i.length;else for(var p=0,f=m.length;p<f;)i[l++]=m[p++];else n||(i[l++]=m)}return i}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_getByteLength.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t=(0,n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_shallowProperty.js").default)("byteLength")},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_getLength.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t=(0,n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_shallowProperty.js").default)("length")},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_group.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_cb.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/each.js");function r(e,o){return function(n,r,d){var u=o?[[],[]]:{};return r=(0,t.default)(r,d),(0,s.default)(n,(function(o,t){var s=r(o,t,n);e(u,o,s)})),u}}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_has.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js");function s(e,o){return null!=e&&t.hasOwnProperty.call(e,o)}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_hasObjectTag.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t=(0,n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_tagTester.js").default)("Object")},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_isArrayLike.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_createSizePropertyCheck.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_getLength.js");const r=(0,t.default)(s.default)},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_isBufferLike.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_createSizePropertyCheck.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_getByteLength.js");const r=(0,t.default)(s.default)},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_keyInObj.js":(e,o,n)=>{"use strict";function t(e,o,n){return o in n}n.r(o),n.d(o,{default:()=>t})},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_methodFingerprint.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{ie11fingerprint:()=>d,mapMethods:()=>a,setMethods:()=>m,weakMapMethods:()=>c});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_getLength.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isFunction.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/allKeys.js");function d(e){var o=(0,t.default)(e);return function(n){if(null==n)return!1;var d=(0,r.default)(n);if((0,t.default)(d))return!1;for(var i=0;i<o;i++)if(!(0,s.default)(n[e[i]]))return!1;return e!==c||!(0,s.default)(n[u])}}var u="forEach",i=["clear","delete"],l=["get","has","set"],a=i.concat(u,l),c=i.concat(l),m=["add"].concat(i,u,"has")},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_optimizeCb.js":(e,o,n)=>{"use strict";function t(e,o,n){if(void 0===o)return e;switch(null==n?3:n){case 1:return function(n){return e.call(o,n)};case 3:return function(n,t,s){return e.call(o,n,t,s)};case 4:return function(n,t,s,r){return e.call(o,n,t,s,r)}}return function(){return e.apply(o,arguments)}}n.r(o),n.d(o,{default:()=>t})},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{ArrayProto:()=>r,MAX_ARRAY_INDEX:()=>E,ObjProto:()=>d,SymbolProto:()=>u,VERSION:()=>t,_isFinite:()=>g,_isNaN:()=>j,hasEnumBug:()=>y,hasOwnProperty:()=>c,nativeCreate:()=>_,nativeIsArray:()=>f,nativeIsView:()=>v,nativeKeys:()=>h,nonEnumerableProps:()=>b,push:()=>i,root:()=>s,slice:()=>l,supportsArrayBuffer:()=>m,supportsDataView:()=>p,toString:()=>a});var t="1.13.4",s="object"==typeof self&&self.self===self&&self||"object"==typeof global&&global.global===global&&global||Function("return this")()||{},r=Array.prototype,d=Object.prototype,u="undefined"!=typeof Symbol?Symbol.prototype:null,i=r.push,l=r.slice,a=d.toString,c=d.hasOwnProperty,m="undefined"!=typeof ArrayBuffer,p="undefined"!=typeof DataView,f=Array.isArray,h=Object.keys,_=Object.create,v=m&&ArrayBuffer.isView,j=isNaN,g=isFinite,y=!{toString:null}.propertyIsEnumerable("toString"),b=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],E=Math.pow(2,53)-1},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_shallowProperty.js":(e,o,n)=>{"use strict";function t(e){return function(o){return null==o?void 0:o[e]}}n.r(o),n.d(o,{default:()=>t})},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_stringTagBug.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{hasStringTagBug:()=>r,isIE11:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_hasObjectTag.js"),r=t.supportsDataView&&(0,s.default)(new DataView(new ArrayBuffer(8))),d="undefined"!=typeof Map&&(0,s.default)(new Map)},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_tagTester.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js");function s(e){var o="[object "+e+"]";return function(e){return t.toString.call(e)===o}}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_toBufferView.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_getByteLength.js");function s(e){return new Uint8Array(e.buffer||e,e.byteOffset||0,(0,t.default)(e))}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_toPath.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/underscore.js");n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/toPath.js");function s(e){return t.default.toPath(e)}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_unescapeMap.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/invert.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_escapeMap.js");const r=(0,t.default)(s.default)},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/after.js":(e,o,n)=>{"use strict";function t(e,o){return function(){if(--e<1)return o.apply(this,arguments)}}n.r(o),n.d(o,{default:()=>t})},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/allKeys.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isObject.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_collectNonEnumProps.js");function d(e){if(!(0,t.default)(e))return[];var o=[];for(var n in e)o.push(n);return s.hasEnumBug&&(0,r.default)(e,o),o}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/before.js":(e,o,n)=>{"use strict";function t(e,o){var n;return function(){return--e>0&&(n=o.apply(this,arguments)),e<=1&&(o=null),n}}n.r(o),n.d(o,{default:()=>t})},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/bind.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/restArguments.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isFunction.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_executeBound.js");const d=(0,t.default)((function(e,o,n){if(!(0,s.default)(e))throw new TypeError("Bind must be called on a function");var d=(0,t.default)((function(t){return(0,r.default)(e,d,o,this,n.concat(t))}));return d}))},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/bindAll.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/restArguments.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_flatten.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/bind.js");const d=(0,t.default)((function(e,o){var n=(o=(0,s.default)(o,!1,!1)).length;if(n<1)throw new Error("bindAll must be passed function names");for(;n--;){var t=o[n];e[t]=(0,r.default)(e[t],e)}return e}))},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/chain.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/underscore.js");function s(e){var o=(0,t.default)(e);return o._chain=!0,o}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/chunk.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js");function s(e,o){if(null==o||o<1)return[];for(var n=[],s=0,r=e.length;s<r;)n.push(t.slice.call(e,s,s+=o));return n}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/clone.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isObject.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isArray.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/extend.js");function d(e){return(0,t.default)(e)?(0,s.default)(e)?e.slice():(0,r.default)({},e):e}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/compact.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/filter.js");function s(e){return(0,t.default)(e,Boolean)}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/compose.js":(e,o,n)=>{"use strict";function t(){var e=arguments,o=e.length-1;return function(){for(var n=o,t=e[o].apply(this,arguments);n--;)t=e[n].call(this,t);return t}}n.r(o),n.d(o,{default:()=>t})},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/constant.js":(e,o,n)=>{"use strict";function t(e){return function(){return e}}n.r(o),n.d(o,{default:()=>t})},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/contains.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_isArrayLike.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/values.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/indexOf.js");function d(e,o,n,d){return(0,t.default)(e)||(e=(0,s.default)(e)),("number"!=typeof n||d)&&(n=0),(0,r.default)(e,o,n)>=0}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/countBy.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_group.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_has.js");const r=(0,t.default)((function(e,o,n){(0,s.default)(e,n)?e[n]++:e[n]=1}))},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/create.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_baseCreate.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/extendOwn.js");function r(e,o){var n=(0,t.default)(e);return o&&(0,s.default)(n,o),n}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/debounce.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/restArguments.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/now.js");function r(e,o,n){var r,d,u,i,l,a=function(){var t=(0,s.default)()-d;o>t?r=setTimeout(a,o-t):(r=null,n||(i=e.apply(l,u)),r||(u=l=null))},c=(0,t.default)((function(t){return l=this,u=t,d=(0,s.default)(),r||(r=setTimeout(a,o),n&&(i=e.apply(l,u))),i}));return c.cancel=function(){clearTimeout(r),r=u=l=null},c}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/defaults.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_createAssigner.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/allKeys.js");const r=(0,t.default)(s.default,!0)},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/defer.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/partial.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/delay.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/underscore.js");const d=(0,t.default)(s.default,r.default,1)},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/delay.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t=(0,n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/restArguments.js").default)((function(e,o,n){return setTimeout((function(){return e.apply(null,n)}),o)}))},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/difference.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>u});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/restArguments.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_flatten.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/filter.js"),d=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/contains.js");const u=(0,t.default)((function(e,o){return o=(0,s.default)(o,!0,!0),(0,r.default)(e,(function(e){return!(0,d.default)(o,e)}))}))},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/each.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_optimizeCb.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_isArrayLike.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/keys.js");function d(e,o,n){var d,u;if(o=(0,t.default)(o,n),(0,s.default)(e))for(d=0,u=e.length;d<u;d++)o(e[d],d,e);else{var i=(0,r.default)(e);for(d=0,u=i.length;d<u;d++)o(e[i[d]],i[d],e)}return e}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/escape.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_createEscaper.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_escapeMap.js");const r=(0,t.default)(s.default)},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/every.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_cb.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_isArrayLike.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/keys.js");function d(e,o,n){o=(0,t.default)(o,n);for(var d=!(0,s.default)(e)&&(0,r.default)(e),u=(d||e).length,i=0;i<u;i++){var l=d?d[i]:i;if(!o(e[l],l,e))return!1}return!0}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/extend.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_createAssigner.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/allKeys.js");const r=(0,t.default)(s.default)},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/extendOwn.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_createAssigner.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/keys.js");const r=(0,t.default)(s.default)},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/filter.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_cb.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/each.js");function r(e,o,n){var r=[];return o=(0,t.default)(o,n),(0,s.default)(e,(function(e,n,t){o(e,n,t)&&r.push(e)})),r}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/find.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_isArrayLike.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/findIndex.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/findKey.js");function d(e,o,n){var d=((0,t.default)(e)?s.default:r.default)(e,o,n);if(void 0!==d&&-1!==d)return e[d]}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/findIndex.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t=(0,n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_createPredicateIndexFinder.js").default)(1)},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/findKey.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_cb.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/keys.js");function r(e,o,n){o=(0,t.default)(o,n);for(var r,d=(0,s.default)(e),u=0,i=d.length;u<i;u++)if(o(e[r=d[u]],r,e))return r}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/findLastIndex.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t=(0,n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_createPredicateIndexFinder.js").default)(-1)},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/findWhere.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/find.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/matcher.js");function r(e,o){return(0,t.default)(e,(0,s.default)(o))}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/first.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/initial.js");function s(e,o,n){return null==e||e.length<1?null==o||n?void 0:[]:null==o||n?e[0]:(0,t.default)(e,e.length-o)}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/flatten.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_flatten.js");function s(e,o){return(0,t.default)(e,o,!1)}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/functions.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isFunction.js");function s(e){var o=[];for(var n in e)(0,t.default)(e[n])&&o.push(n);return o.sort()}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/get.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_toPath.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_deepGet.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isUndefined.js");function d(e,o,n){var d=(0,s.default)(e,(0,t.default)(o));return(0,r.default)(d)?n:d}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/groupBy.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_group.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_has.js");const r=(0,t.default)((function(e,o,n){(0,s.default)(e,n)?e[n].push(o):e[n]=[o]}))},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/has.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_has.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_toPath.js");function r(e,o){for(var n=(o=(0,s.default)(o)).length,r=0;r<n;r++){var d=o[r];if(!(0,t.default)(e,d))return!1;e=e[d]}return!!n}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/identity.js":(e,o,n)=>{"use strict";function t(e){return e}n.r(o),n.d(o,{default:()=>t})},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/index-all.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{VERSION:()=>s.VERSION,after:()=>s.after,all:()=>s.all,allKeys:()=>s.allKeys,any:()=>s.any,assign:()=>s.assign,before:()=>s.before,bind:()=>s.bind,bindAll:()=>s.bindAll,chain:()=>s.chain,chunk:()=>s.chunk,clone:()=>s.clone,collect:()=>s.collect,compact:()=>s.compact,compose:()=>s.compose,constant:()=>s.constant,contains:()=>s.contains,countBy:()=>s.countBy,create:()=>s.create,debounce:()=>s.debounce,default:()=>t.default,defaults:()=>s.defaults,defer:()=>s.defer,delay:()=>s.delay,detect:()=>s.detect,difference:()=>s.difference,drop:()=>s.drop,each:()=>s.each,escape:()=>s.escape,every:()=>s.every,extend:()=>s.extend,extendOwn:()=>s.extendOwn,filter:()=>s.filter,find:()=>s.find,findIndex:()=>s.findIndex,findKey:()=>s.findKey,findLastIndex:()=>s.findLastIndex,findWhere:()=>s.findWhere,first:()=>s.first,flatten:()=>s.flatten,foldl:()=>s.foldl,foldr:()=>s.foldr,forEach:()=>s.forEach,functions:()=>s.functions,get:()=>s.get,groupBy:()=>s.groupBy,has:()=>s.has,head:()=>s.head,identity:()=>s.identity,include:()=>s.include,includes:()=>s.includes,indexBy:()=>s.indexBy,indexOf:()=>s.indexOf,initial:()=>s.initial,inject:()=>s.inject,intersection:()=>s.intersection,invert:()=>s.invert,invoke:()=>s.invoke,isArguments:()=>s.isArguments,isArray:()=>s.isArray,isArrayBuffer:()=>s.isArrayBuffer,isBoolean:()=>s.isBoolean,isDataView:()=>s.isDataView,isDate:()=>s.isDate,isElement:()=>s.isElement,isEmpty:()=>s.isEmpty,isEqual:()=>s.isEqual,isError:()=>s.isError,isFinite:()=>s.isFinite,isFunction:()=>s.isFunction,isMap:()=>s.isMap,isMatch:()=>s.isMatch,isNaN:()=>s.isNaN,isNull:()=>s.isNull,isNumber:()=>s.isNumber,isObject:()=>s.isObject,isRegExp:()=>s.isRegExp,isSet:()=>s.isSet,isString:()=>s.isString,isSymbol:()=>s.isSymbol,isTypedArray:()=>s.isTypedArray,isUndefined:()=>s.isUndefined,isWeakMap:()=>s.isWeakMap,isWeakSet:()=>s.isWeakSet,iteratee:()=>s.iteratee,keys:()=>s.keys,last:()=>s.last,lastIndexOf:()=>s.lastIndexOf,map:()=>s.map,mapObject:()=>s.mapObject,matcher:()=>s.matcher,matches:()=>s.matches,max:()=>s.max,memoize:()=>s.memoize,methods:()=>s.methods,min:()=>s.min,mixin:()=>s.mixin,negate:()=>s.negate,noop:()=>s.noop,now:()=>s.now,object:()=>s.object,omit:()=>s.omit,once:()=>s.once,pairs:()=>s.pairs,partial:()=>s.partial,partition:()=>s.partition,pick:()=>s.pick,pluck:()=>s.pluck,property:()=>s.property,propertyOf:()=>s.propertyOf,random:()=>s.random,range:()=>s.range,reduce:()=>s.reduce,reduceRight:()=>s.reduceRight,reject:()=>s.reject,rest:()=>s.rest,restArguments:()=>s.restArguments,result:()=>s.result,sample:()=>s.sample,select:()=>s.select,shuffle:()=>s.shuffle,size:()=>s.size,some:()=>s.some,sortBy:()=>s.sortBy,sortedIndex:()=>s.sortedIndex,tail:()=>s.tail,take:()=>s.take,tap:()=>s.tap,template:()=>s.template,templateSettings:()=>s.templateSettings,throttle:()=>s.throttle,times:()=>s.times,toArray:()=>s.toArray,toPath:()=>s.toPath,transpose:()=>s.transpose,unescape:()=>s.unescape,union:()=>s.union,uniq:()=>s.uniq,unique:()=>s.unique,uniqueId:()=>s.uniqueId,unzip:()=>s.unzip,values:()=>s.values,where:()=>s.where,without:()=>s.without,wrap:()=>s.wrap,zip:()=>s.zip});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/index-default.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/index.js")},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/index-default.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/index.js"),s=(0,t.mixin)(t);s._=s;const r=s},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/index.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{VERSION:()=>t.VERSION,after:()=>be.default,all:()=>Ne.default,allKeys:()=>I.default,any:()=>Fe.default,assign:()=>N.default,before:()=>Ee.default,bind:()=>ce.default,bindAll:()=>me.default,chain:()=>ie.default,chunk:()=>go.default,clone:()=>R.default,collect:()=>De.default,compact:()=>io.default,compose:()=>ye.default,constant:()=>G.default,contains:()=>qe.default,countBy:()=>Ke.default,create:()=>q.default,debounce:()=>ve.default,default:()=>bo.default,defaults:()=>F.default,defer:()=>he.default,delay:()=>fe.default,detect:()=>Te.default,difference:()=>fo.default,drop:()=>uo.default,each:()=>Ie.default,escape:()=>ne.default,every:()=>Ne.default,extend:()=>B.default,extendOwn:()=>N.default,filter:()=>ze.default,find:()=>Te.default,findIndex:()=>Se.default,findKey:()=>ke.default,findLastIndex:()=>xe.default,findWhere:()=>Pe.default,first:()=>to.default,flatten:()=>lo.default,foldl:()=>Oe.default,foldr:()=>Me.default,forEach:()=>Ie.default,functions:()=>z.default,get:()=>H.default,groupBy:()=>$e.default,has:()=>V.default,head:()=>to.default,identity:()=>X.default,include:()=>qe.default,includes:()=>qe.default,indexBy:()=>Qe.default,indexOf:()=>Le.default,initial:()=>so.default,inject:()=>Oe.default,intersection:()=>po.default,invert:()=>M.default,invoke:()=>Re.default,isArguments:()=>y.default,isArray:()=>j.default,isArrayBuffer:()=>_.default,isBoolean:()=>i.default,isDataView:()=>v.default,isDate:()=>m.default,isElement:()=>l.default,isEmpty:()=>k.default,isEqual:()=>x.default,isError:()=>f.default,isFinite:()=>b.default,isFunction:()=>g.default,isMap:()=>A.default,isMatch:()=>S.default,isNaN:()=>E.default,isNull:()=>d.default,isNumber:()=>c.default,isObject:()=>r.default,isRegExp:()=>p.default,isSet:()=>C.default,isString:()=>a.default,isSymbol:()=>h.default,isTypedArray:()=>w.default,isUndefined:()=>u.default,isWeakMap:()=>L.default,isWeakSet:()=>T.default,iteratee:()=>le.default,keys:()=>P.default,last:()=>ro.default,lastIndexOf:()=>Ce.default,map:()=>De.default,mapObject:()=>U.default,matcher:()=>J.default,matches:()=>J.default,max:()=>Ve.default,memoize:()=>pe.default,methods:()=>z.default,min:()=>Ue.default,mixin:()=>yo.default,negate:()=>ge.default,noop:()=>Y.default,now:()=>oe.default,object:()=>vo.default,omit:()=>no.default,once:()=>we.default,pairs:()=>O.default,partial:()=>ae.default,partition:()=>Je.default,pick:()=>oo.default,pluck:()=>We.default,property:()=>Q.default,propertyOf:()=>K.default,random:()=>ee.default,range:()=>jo.default,reduce:()=>Oe.default,reduceRight:()=>Me.default,reject:()=>Be.default,rest:()=>uo.default,restArguments:()=>s.default,result:()=>de.default,sample:()=>Ge.default,select:()=>ze.default,shuffle:()=>Xe.default,size:()=>eo.default,some:()=>Fe.default,sortBy:()=>Ye.default,sortedIndex:()=>Ae.default,tail:()=>uo.default,take:()=>to.default,tap:()=>W.default,template:()=>re.default,templateSettings:()=>se.default,throttle:()=>_e.default,times:()=>Z.default,toArray:()=>Ze.default,toPath:()=>$.default,transpose:()=>ho.default,unescape:()=>te.default,union:()=>mo.default,uniq:()=>co.default,unique:()=>co.default,uniqueId:()=>ue.default,unzip:()=>ho.default,values:()=>D.default,where:()=>He.default,without:()=>ao.default,wrap:()=>je.default,zip:()=>_o.default});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/restArguments.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isObject.js"),d=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isNull.js"),u=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isUndefined.js"),i=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isBoolean.js"),l=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isElement.js"),a=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isString.js"),c=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isNumber.js"),m=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isDate.js"),p=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isRegExp.js"),f=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isError.js"),h=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isSymbol.js"),_=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isArrayBuffer.js"),v=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isDataView.js"),j=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isArray.js"),g=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isFunction.js"),y=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isArguments.js"),b=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isFinite.js"),E=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isNaN.js"),w=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isTypedArray.js"),k=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isEmpty.js"),S=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isMatch.js"),x=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isEqual.js"),A=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isMap.js"),L=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isWeakMap.js"),C=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isSet.js"),T=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isWeakSet.js"),P=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/keys.js"),I=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/allKeys.js"),D=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/values.js"),O=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/pairs.js"),M=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/invert.js"),z=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/functions.js"),B=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/extend.js"),N=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/extendOwn.js"),F=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/defaults.js"),q=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/create.js"),R=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/clone.js"),W=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/tap.js"),H=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/get.js"),V=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/has.js"),U=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/mapObject.js"),X=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/identity.js"),G=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/constant.js"),Y=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/noop.js"),$=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/toPath.js"),Q=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/property.js"),K=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/propertyOf.js"),J=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/matcher.js"),Z=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/times.js"),ee=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/random.js"),oe=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/now.js"),ne=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/escape.js"),te=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/unescape.js"),se=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/templateSettings.js"),re=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/template.js"),de=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/result.js"),ue=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/uniqueId.js"),ie=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/chain.js"),le=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/iteratee.js"),ae=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/partial.js"),ce=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/bind.js"),me=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/bindAll.js"),pe=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/memoize.js"),fe=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/delay.js"),he=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/defer.js"),_e=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/throttle.js"),ve=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/debounce.js"),je=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/wrap.js"),ge=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/negate.js"),ye=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/compose.js"),be=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/after.js"),Ee=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/before.js"),we=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/once.js"),ke=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/findKey.js"),Se=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/findIndex.js"),xe=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/findLastIndex.js"),Ae=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/sortedIndex.js"),Le=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/indexOf.js"),Ce=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/lastIndexOf.js"),Te=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/find.js"),Pe=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/findWhere.js"),Ie=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/each.js"),De=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/map.js"),Oe=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/reduce.js"),Me=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/reduceRight.js"),ze=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/filter.js"),Be=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/reject.js"),Ne=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/every.js"),Fe=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/some.js"),qe=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/contains.js"),Re=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/invoke.js"),We=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/pluck.js"),He=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/where.js"),Ve=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/max.js"),Ue=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/min.js"),Xe=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/shuffle.js"),Ge=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/sample.js"),Ye=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/sortBy.js"),$e=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/groupBy.js"),Qe=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/indexBy.js"),Ke=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/countBy.js"),Je=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/partition.js"),Ze=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/toArray.js"),eo=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/size.js"),oo=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/pick.js"),no=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/omit.js"),to=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/first.js"),so=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/initial.js"),ro=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/last.js"),uo=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/rest.js"),io=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/compact.js"),lo=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/flatten.js"),ao=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/without.js"),co=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/uniq.js"),mo=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/union.js"),po=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/intersection.js"),fo=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/difference.js"),ho=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/unzip.js"),_o=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/zip.js"),vo=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/object.js"),jo=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/range.js"),go=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/chunk.js"),yo=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/mixin.js"),bo=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/underscore-array-methods.js")},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/indexBy.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t=(0,n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_group.js").default)((function(e,o,n){e[n]=o}))},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/indexOf.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/sortedIndex.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/findIndex.js");const r=(0,n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_createIndexFinder.js").default)(1,s.default,t.default)},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/initial.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js");function s(e,o,n){return t.slice.call(e,0,Math.max(0,e.length-(null==o||n?1:o)))}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/intersection.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_getLength.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/contains.js");function r(e){for(var o=[],n=arguments.length,r=0,d=(0,t.default)(e);r<d;r++){var u=e[r];if(!(0,s.default)(o,u)){var i;for(i=1;i<n&&(0,s.default)(arguments[i],u);i++);i===n&&o.push(u)}}return o}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/invert.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/keys.js");function s(e){for(var o={},n=(0,t.default)(e),s=0,r=n.length;s<r;s++)o[e[n[s]]]=n[s];return o}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/invoke.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>i});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/restArguments.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isFunction.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/map.js"),d=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_deepGet.js"),u=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_toPath.js");const i=(0,t.default)((function(e,o,n){var t,i;return(0,s.default)(o)?i=o:(o=(0,u.default)(o),t=o.slice(0,-1),o=o[o.length-1]),(0,r.default)(e,(function(e){var s=i;if(!s){if(t&&t.length&&(e=(0,d.default)(e,t)),null==e)return;s=e[o]}return null==s?s:s.apply(e,n)}))}))},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isArguments.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_tagTester.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_has.js"),r=(0,t.default)("Arguments");!function(){r(arguments)||(r=function(e){return(0,s.default)(e,"callee")})}();const d=r},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isArray.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_tagTester.js");const r=t.nativeIsArray||(0,s.default)("Array")},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isArrayBuffer.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t=(0,n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_tagTester.js").default)("ArrayBuffer")},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isBoolean.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js");function s(e){return!0===e||!1===e||"[object Boolean]"===t.toString.call(e)}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isDataView.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>i});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_tagTester.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isFunction.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isArrayBuffer.js"),d=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_stringTagBug.js"),u=(0,t.default)("DataView");const i=d.hasStringTagBug?function(e){return null!=e&&(0,s.default)(e.getInt8)&&(0,r.default)(e.buffer)}:u},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isDate.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t=(0,n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_tagTester.js").default)("Date")},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isElement.js":(e,o,n)=>{"use strict";function t(e){return!(!e||1!==e.nodeType)}n.r(o),n.d(o,{default:()=>t})},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isEmpty.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>i});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_getLength.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isArray.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isString.js"),d=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isArguments.js"),u=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/keys.js");function i(e){if(null==e)return!0;var o=(0,t.default)(e);return"number"==typeof o&&((0,s.default)(e)||(0,r.default)(e)||(0,d.default)(e))?0===o:0===(0,t.default)((0,u.default)(e))}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isEqual.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>_});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/underscore.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_getByteLength.js"),d=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isTypedArray.js"),u=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isFunction.js"),i=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_stringTagBug.js"),l=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isDataView.js"),a=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/keys.js"),c=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_has.js"),m=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_toBufferView.js"),p="[object DataView]";function f(e,o,n,t){if(e===o)return 0!==e||1/e==1/o;if(null==e||null==o)return!1;if(e!=e)return o!=o;var s=typeof e;return("function"===s||"object"===s||"object"==typeof o)&&h(e,o,n,t)}function h(e,o,n,_){e instanceof t.default&&(e=e._wrapped),o instanceof t.default&&(o=o._wrapped);var v=s.toString.call(e);if(v!==s.toString.call(o))return!1;if(i.hasStringTagBug&&"[object Object]"==v&&(0,l.default)(e)){if(!(0,l.default)(o))return!1;v=p}switch(v){case"[object RegExp]":case"[object String]":return""+e==""+o;case"[object Number]":return+e!=+e?+o!=+o:0==+e?1/+e==1/o:+e==+o;case"[object Date]":case"[object Boolean]":return+e==+o;case"[object Symbol]":return s.SymbolProto.valueOf.call(e)===s.SymbolProto.valueOf.call(o);case"[object ArrayBuffer]":case p:return h((0,m.default)(e),(0,m.default)(o),n,_)}var j="[object Array]"===v;if(!j&&(0,d.default)(e)){if((0,r.default)(e)!==(0,r.default)(o))return!1;if(e.buffer===o.buffer&&e.byteOffset===o.byteOffset)return!0;j=!0}if(!j){if("object"!=typeof e||"object"!=typeof o)return!1;var g=e.constructor,y=o.constructor;if(g!==y&&!((0,u.default)(g)&&g instanceof g&&(0,u.default)(y)&&y instanceof y)&&"constructor"in e&&"constructor"in o)return!1}_=_||[];for(var b=(n=n||[]).length;b--;)if(n[b]===e)return _[b]===o;if(n.push(e),_.push(o),j){if((b=e.length)!==o.length)return!1;for(;b--;)if(!f(e[b],o[b],n,_))return!1}else{var E,w=(0,a.default)(e);if(b=w.length,(0,a.default)(o).length!==b)return!1;for(;b--;)if(E=w[b],!(0,c.default)(o,E)||!f(e[E],o[E],n,_))return!1}return n.pop(),_.pop(),!0}function _(e,o){return f(e,o)}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isError.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t=(0,n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_tagTester.js").default)("Error")},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isFinite.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isSymbol.js");function r(e){return!(0,s.default)(e)&&(0,t._isFinite)(e)&&!isNaN(parseFloat(e))}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isFunction.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>u});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_tagTester.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js"),r=(0,t.default)("Function"),d=s.root.document&&s.root.document.childNodes;"object"!=typeof Int8Array&&"function"!=typeof d&&(r=function(e){return"function"==typeof e||!1});const u=r},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isMap.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_tagTester.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_stringTagBug.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_methodFingerprint.js");const d=s.isIE11?(0,r.ie11fingerprint)(r.mapMethods):(0,t.default)("Map")},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isMatch.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/keys.js");function s(e,o){var n=(0,t.default)(o),s=n.length;if(null==e)return!s;for(var r=Object(e),d=0;d<s;d++){var u=n[d];if(o[u]!==r[u]||!(u in r))return!1}return!0}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isNaN.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isNumber.js");function r(e){return(0,s.default)(e)&&(0,t._isNaN)(e)}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isNull.js":(e,o,n)=>{"use strict";function t(e){return null===e}n.r(o),n.d(o,{default:()=>t})},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isNumber.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t=(0,n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_tagTester.js").default)("Number")},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isObject.js":(e,o,n)=>{"use strict";function t(e){var o=typeof e;return"function"===o||"object"===o&&!!e}n.r(o),n.d(o,{default:()=>t})},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isRegExp.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t=(0,n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_tagTester.js").default)("RegExp")},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isSet.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_tagTester.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_stringTagBug.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_methodFingerprint.js");const d=s.isIE11?(0,r.ie11fingerprint)(r.setMethods):(0,t.default)("Set")},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isString.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t=(0,n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_tagTester.js").default)("String")},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isSymbol.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t=(0,n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_tagTester.js").default)("Symbol")},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isTypedArray.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>i});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isDataView.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/constant.js"),d=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_isBufferLike.js"),u=/\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;const i=t.supportsArrayBuffer?function(e){return t.nativeIsView?(0,t.nativeIsView)(e)&&!(0,s.default)(e):(0,d.default)(e)&&u.test(t.toString.call(e))}:(0,r.default)(!1)},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isUndefined.js":(e,o,n)=>{"use strict";function t(e){return void 0===e}n.r(o),n.d(o,{default:()=>t})},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isWeakMap.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_tagTester.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_stringTagBug.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_methodFingerprint.js");const d=s.isIE11?(0,r.ie11fingerprint)(r.weakMapMethods):(0,t.default)("WeakMap")},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isWeakSet.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t=(0,n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_tagTester.js").default)("WeakSet")},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/iteratee.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/underscore.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_baseIteratee.js");function r(e,o){return(0,s.default)(e,o,1/0)}t.default.iteratee=r},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/keys.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>u});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isObject.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_has.js"),d=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_collectNonEnumProps.js");function u(e){if(!(0,t.default)(e))return[];if(s.nativeKeys)return(0,s.nativeKeys)(e);var o=[];for(var n in e)(0,r.default)(e,n)&&o.push(n);return s.hasEnumBug&&(0,d.default)(e,o),o}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/last.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/rest.js");function s(e,o,n){return null==e||e.length<1?null==o||n?void 0:[]:null==o||n?e[e.length-1]:(0,t.default)(e,Math.max(0,e.length-o))}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/lastIndexOf.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/findLastIndex.js");const s=(0,n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_createIndexFinder.js").default)(-1,t.default)},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/map.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_cb.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_isArrayLike.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/keys.js");function d(e,o,n){o=(0,t.default)(o,n);for(var d=!(0,s.default)(e)&&(0,r.default)(e),u=(d||e).length,i=Array(u),l=0;l<u;l++){var a=d?d[l]:l;i[l]=o(e[a],a,e)}return i}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/mapObject.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_cb.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/keys.js");function r(e,o,n){o=(0,t.default)(o,n);for(var r=(0,s.default)(e),d=r.length,u={},i=0;i<d;i++){var l=r[i];u[l]=o(e[l],l,e)}return u}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/matcher.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/extendOwn.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isMatch.js");function r(e){return e=(0,t.default)({},e),function(o){return(0,s.default)(o,e)}}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/max.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>u});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_isArrayLike.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/values.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_cb.js"),d=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/each.js");function u(e,o,n){var u,i,l=-1/0,a=-1/0;if(null==o||"number"==typeof o&&"object"!=typeof e[0]&&null!=e)for(var c=0,m=(e=(0,t.default)(e)?e:(0,s.default)(e)).length;c<m;c++)null!=(u=e[c])&&u>l&&(l=u);else o=(0,r.default)(o,n),(0,d.default)(e,(function(e,n,t){((i=o(e,n,t))>a||i===-1/0&&l===-1/0)&&(l=e,a=i)}));return l}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/memoize.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_has.js");function s(e,o){var n=function(s){var r=n.cache,d=""+(o?o.apply(this,arguments):s);return(0,t.default)(r,d)||(r[d]=e.apply(this,arguments)),r[d]};return n.cache={},n}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/min.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>u});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_isArrayLike.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/values.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_cb.js"),d=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/each.js");function u(e,o,n){var u,i,l=1/0,a=1/0;if(null==o||"number"==typeof o&&"object"!=typeof e[0]&&null!=e)for(var c=0,m=(e=(0,t.default)(e)?e:(0,s.default)(e)).length;c<m;c++)null!=(u=e[c])&&u<l&&(l=u);else o=(0,r.default)(o,n),(0,d.default)(e,(function(e,n,t){((i=o(e,n,t))<a||i===1/0&&l===1/0)&&(l=e,a=i)}));return l}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/mixin.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>i});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/underscore.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/each.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/functions.js"),d=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js"),u=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_chainResult.js");function i(e){return(0,s.default)((0,r.default)(e),(function(o){var n=t.default[o]=e[o];t.default.prototype[o]=function(){var e=[this._wrapped];return d.push.apply(e,arguments),(0,u.default)(this,n.apply(t.default,e))}})),t.default}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/negate.js":(e,o,n)=>{"use strict";function t(e){return function(){return!e.apply(this,arguments)}}n.r(o),n.d(o,{default:()=>t})},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/noop.js":(e,o,n)=>{"use strict";function t(){}n.r(o),n.d(o,{default:()=>t})},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/now.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t=Date.now||function(){return(new Date).getTime()}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/object.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_getLength.js");function s(e,o){for(var n={},s=0,r=(0,t.default)(e);s<r;s++)o?n[e[s]]=o[s]:n[e[s][0]]=e[s][1];return n}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/omit.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>a});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/restArguments.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isFunction.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/negate.js"),d=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/map.js"),u=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_flatten.js"),i=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/contains.js"),l=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/pick.js");const a=(0,t.default)((function(e,o){var n,t=o[0];return(0,s.default)(t)?(t=(0,r.default)(t),o.length>1&&(n=o[1])):(o=(0,d.default)((0,u.default)(o,!1,!1),String),t=function(e,n){return!(0,i.default)(o,n)}),(0,l.default)(e,t,n)}))},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/once.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/partial.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/before.js");const r=(0,t.default)(s.default,2)},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/pairs.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/keys.js");function s(e){for(var o=(0,t.default)(e),n=o.length,s=Array(n),r=0;r<n;r++)s[r]=[o[r],e[o[r]]];return s}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/partial.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>u});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/restArguments.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_executeBound.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/underscore.js"),d=(0,t.default)((function(e,o){var n=d.placeholder,t=function(){for(var r=0,d=o.length,u=Array(d),i=0;i<d;i++)u[i]=o[i]===n?arguments[r++]:o[i];for(;r<arguments.length;)u.push(arguments[r++]);return(0,s.default)(e,t,this,this,u)};return t}));d.placeholder=r.default;const u=d},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/partition.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t=(0,n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_group.js").default)((function(e,o,n){e[n?0:1].push(o)}),!0)},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/pick.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>l});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/restArguments.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isFunction.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_optimizeCb.js"),d=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/allKeys.js"),u=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_keyInObj.js"),i=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_flatten.js");const l=(0,t.default)((function(e,o){var n={},t=o[0];if(null==e)return n;(0,s.default)(t)?(o.length>1&&(t=(0,r.default)(t,o[1])),o=(0,d.default)(e)):(t=u.default,o=(0,i.default)(o,!1,!1),e=Object(e));for(var l=0,a=o.length;l<a;l++){var c=o[l],m=e[c];t(m,c,e)&&(n[c]=m)}return n}))},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/pluck.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/map.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/property.js");function r(e,o){return(0,t.default)(e,(0,s.default)(o))}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/property.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_deepGet.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_toPath.js");function r(e){return e=(0,s.default)(e),function(o){return(0,t.default)(o,e)}}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/propertyOf.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/noop.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/get.js");function r(e){return null==e?t.default:function(o){return(0,s.default)(e,o)}}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/random.js":(e,o,n)=>{"use strict";function t(e,o){return null==o&&(o=e,e=0),e+Math.floor(Math.random()*(o-e+1))}n.r(o),n.d(o,{default:()=>t})},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/range.js":(e,o,n)=>{"use strict";function t(e,o,n){null==o&&(o=e||0,e=0),n||(n=o<e?-1:1);for(var t=Math.max(Math.ceil((o-e)/n),0),s=Array(t),r=0;r<t;r++,e+=n)s[r]=e;return s}n.r(o),n.d(o,{default:()=>t})},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/reduce.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t=(0,n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_createReduce.js").default)(1)},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/reduceRight.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t=(0,n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_createReduce.js").default)(-1)},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/reject.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/filter.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/negate.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_cb.js");function d(e,o,n){return(0,t.default)(e,(0,s.default)((0,r.default)(o)),n)}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/rest.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js");function s(e,o,n){return t.slice.call(e,null==o||n?1:o)}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/restArguments.js":(e,o,n)=>{"use strict";function t(e,o){return o=null==o?e.length-1:+o,function(){for(var n=Math.max(arguments.length-o,0),t=Array(n),s=0;s<n;s++)t[s]=arguments[s+o];switch(o){case 0:return e.call(this,t);case 1:return e.call(this,arguments[0],t);case 2:return e.call(this,arguments[0],arguments[1],t)}var r=Array(o+1);for(s=0;s<o;s++)r[s]=arguments[s];return r[o]=t,e.apply(this,r)}}n.r(o),n.d(o,{default:()=>t})},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/result.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isFunction.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_toPath.js");function r(e,o,n){var r=(o=(0,s.default)(o)).length;if(!r)return(0,t.default)(n)?n.call(e):n;for(var d=0;d<r;d++){var u=null==e?void 0:e[o[d]];void 0===u&&(u=n,d=r),e=(0,t.default)(u)?u.call(e):u}return e}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/sample.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>i});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_isArrayLike.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/values.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_getLength.js"),d=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/random.js"),u=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/toArray.js");function i(e,o,n){if(null==o||n)return(0,t.default)(e)||(e=(0,s.default)(e)),e[(0,d.default)(e.length-1)];var i=(0,u.default)(e),l=(0,r.default)(i);o=Math.max(Math.min(o,l),0);for(var a=l-1,c=0;c<o;c++){var m=(0,d.default)(c,a),p=i[c];i[c]=i[m],i[m]=p}return i.slice(0,o)}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/shuffle.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/sample.js");function s(e){return(0,t.default)(e,1/0)}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/size.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_isArrayLike.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/keys.js");function r(e){return null==e?0:(0,t.default)(e)?e.length:(0,s.default)(e).length}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/some.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_cb.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_isArrayLike.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/keys.js");function d(e,o,n){o=(0,t.default)(o,n);for(var d=!(0,s.default)(e)&&(0,r.default)(e),u=(d||e).length,i=0;i<u;i++){var l=d?d[i]:i;if(o(e[l],l,e))return!0}return!1}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/sortBy.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_cb.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/pluck.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/map.js");function d(e,o,n){var d=0;return o=(0,t.default)(o,n),(0,s.default)((0,r.default)(e,(function(e,n,t){return{value:e,index:d++,criteria:o(e,n,t)}})).sort((function(e,o){var n=e.criteria,t=o.criteria;if(n!==t){if(n>t||void 0===n)return 1;if(n<t||void 0===t)return-1}return e.index-o.index})),"value")}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/sortedIndex.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_cb.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_getLength.js");function r(e,o,n,r){for(var d=(n=(0,t.default)(n,r,1))(o),u=0,i=(0,s.default)(e);u<i;){var l=Math.floor((u+i)/2);n(e[l])<d?u=l+1:i=l}return u}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/tap.js":(e,o,n)=>{"use strict";function t(e,o){return o(e),e}n.r(o),n.d(o,{default:()=>t})},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/template.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>a});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/defaults.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/underscore.js"),r=(n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/templateSettings.js"),/(.)^/),d={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},u=/\\|'|\r|\n|\u2028|\u2029/g;function i(e){return"\\"+d[e]}var l=/^\s*(\w|\$)+\s*$/;function a(e,o,n){!o&&n&&(o=n),o=(0,t.default)({},o,s.default.templateSettings);var d=RegExp([(o.escape||r).source,(o.interpolate||r).source,(o.evaluate||r).source].join("|")+"|$","g"),a=0,c="__p+='";e.replace(d,(function(o,n,t,s,r){return c+=e.slice(a,r).replace(u,i),a=r+o.length,n?c+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'":t?c+="'+\n((__t=("+t+"))==null?'':__t)+\n'":s&&(c+="';\n"+s+"\n__p+='"),o})),c+="';\n";var m,p=o.variable;if(p){if(!l.test(p))throw new Error("variable is not a bare identifier: "+p)}else c="with(obj||{}){\n"+c+"}\n",p="obj";c="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+c+"return __p;\n";try{m=new Function(p,"_",c)}catch(e){throw e.source=c,e}var f=function(e){return m.call(this,e,s.default)};return f.source="function("+p+"){\n"+c+"}",f}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/templateSettings.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>t});const t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/underscore.js").default.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/throttle.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/now.js");function s(e,o,n){var s,r,d,u,i=0;n||(n={});var l=function(){i=!1===n.leading?0:(0,t.default)(),s=null,u=e.apply(r,d),s||(r=d=null)},a=function(){var a=(0,t.default)();i||!1!==n.leading||(i=a);var c=o-(a-i);return r=this,d=arguments,c<=0||c>o?(s&&(clearTimeout(s),s=null),i=a,u=e.apply(r,d),s||(r=d=null)):s||!1===n.trailing||(s=setTimeout(l,c)),u};return a.cancel=function(){clearTimeout(s),i=0,s=r=d=null},a}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/times.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_optimizeCb.js");function s(e,o,n){var s=Array(Math.max(0,e));o=(0,t.default)(o,n,1);for(var r=0;r<e;r++)s[r]=o(r);return s}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/toArray.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>c});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isArray.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isString.js"),d=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_isArrayLike.js"),u=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/map.js"),i=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/identity.js"),l=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/values.js"),a=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;function c(e){return e?(0,t.default)(e)?s.slice.call(e):(0,r.default)(e)?e.match(a):(0,d.default)(e)?(0,u.default)(e,i.default):(0,l.default)(e):[]}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/toPath.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/underscore.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isArray.js");function r(e){return(0,s.default)(e)?e:[e]}t.default.toPath=r},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/underscore-array-methods.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>u});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/underscore.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/each.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js"),d=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_chainResult.js");(0,s.default)(["pop","push","reverse","shift","sort","splice","unshift"],(function(e){var o=r.ArrayProto[e];t.default.prototype[e]=function(){var n=this._wrapped;return null!=n&&(o.apply(n,arguments),"shift"!==e&&"splice"!==e||0!==n.length||delete n[0]),(0,d.default)(this,n)}})),(0,s.default)(["concat","join","slice"],(function(e){var o=r.ArrayProto[e];t.default.prototype[e]=function(){var e=this._wrapped;return null!=e&&(e=o.apply(e,arguments)),(0,d.default)(this,e)}}));const u=t.default},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/underscore.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_setup.js");function s(e){return e instanceof s?e:this instanceof s?void(this._wrapped=e):new s(e)}s.VERSION=t.VERSION,s.prototype.value=function(){return this._wrapped},s.prototype.valueOf=s.prototype.toJSON=s.prototype.value,s.prototype.toString=function(){return String(this._wrapped)}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/unescape.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_createEscaper.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_unescapeMap.js");const r=(0,t.default)(s.default)},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/union.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/restArguments.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/uniq.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_flatten.js");const d=(0,t.default)((function(e){return(0,s.default)((0,r.default)(e,!0,!0))}))},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/uniq.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>u});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/isBoolean.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_cb.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_getLength.js"),d=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/contains.js");function u(e,o,n,u){(0,t.default)(o)||(u=n,n=o,o=!1),null!=n&&(n=(0,s.default)(n,u));for(var i=[],l=[],a=0,c=(0,r.default)(e);a<c;a++){var m=e[a],p=n?n(m,a,e):m;o&&!n?(a&&l===p||i.push(m),l=p):n?(0,d.default)(l,p)||(l.push(p),i.push(m)):(0,d.default)(i,m)||i.push(m)}return i}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/uniqueId.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=0;function s(e){var o=++t+"";return e?e+o:o}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/unzip.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>d});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/max.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/_getLength.js"),r=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/pluck.js");function d(e){for(var o=e&&(0,t.default)(e,s.default).length||0,n=Array(o),d=0;d<o;d++)n[d]=(0,r.default)(e,d);return n}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/values.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/keys.js");function s(e){for(var o=(0,t.default)(e),n=o.length,s=Array(n),r=0;r<n;r++)s[r]=e[o[r]];return s}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/where.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/filter.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/matcher.js");function r(e,o){return(0,t.default)(e,(0,s.default)(o))}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/without.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/restArguments.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/difference.js");const r=(0,t.default)((function(e,o){return(0,s.default)(e,o)}))},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/wrap.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/partial.js");function s(e,o){return(0,t.default)(o,e)}},"./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/zip.js":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>r});var t=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/restArguments.js"),s=n("./node_modules/.pnpm/underscore@1.13.4/node_modules/underscore/modules/unzip.js");const r=(0,t.default)(s.default)},"./src/global/global.mjs":(e,o,n)=>{"use strict";n.r(o),n.d(o,{default:()=>s});var t=n("./src/global/lazyload/lazyload.js");const s=function(){(0,t.default)()}}},o={};function n(t){var s=o[t];if(void 0!==s)return s.exports;var r=o[t]={exports:{}};return e[t].call(r.exports,r,r.exports,n),r.exports}n.n=e=>{var o=e&&e.__esModule?()=>e.default:()=>e;return n.d(o,{a:o}),o},n.d=(e,o)=>{for(var t in o)n.o(o,t)&&!n.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:o[t]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var t={};(()=>{"use strict";var e={};n.r(e),n.d(e,{AudioPlayer:()=>t.default,Musette:()=>u.default,carousel:()=>s.default,default:()=>a,global:()=>o.default,initializeAlert:()=>r.default,jumpLinkBanner:()=>d.default,videoSlide:()=>i.default,vimeoPlayToggle:()=>l.default});var o=n("./src/global/global.mjs"),t=n("./src/components/audio-player/audio-player.js"),s=n("./src/components/carousel/carousel.js"),r=n("./src/components/alert/index.js"),d=n("./src/components/jumplink-banner/jumplink-banner.js"),u=n("./src/components/musette/musette.js"),i=n("./src/components/carousel/slide/video-slide.js"),l=n("./src/components/vimeo-player/vimeo-controls.js");const a={global:o.default,AudioPlayer:t.default,carousel:s.default,initializeAlert:r.default,jumpLinkBanner:d.default,Musette:u.default,videoSlide:i.default,vimeoPlayToggle:l.default}})(),(()=>{"use strict";n.r(t)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LGFBQWMsQ0FBRXhHLE9BQU8scXBCQ0t2RCxNQVdBLEVBWGUsQ0FDZGlpQixPQUFNLFVBQ05xakMsWUFBVyxVQUNYdHJDLFNBQVEsVUFDUnVyQyxnQkFBZSxVQUNmQyxlQUFjLFVBQ2RucUMsUUFBTyxVQUNQYixXQUFVLFVBQ1ZpckMsZ0JBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AdmltZW8rcGxheWVyQDIuMTYuNC9ub2RlX21vZHVsZXMvQHZpbWVvL3BsYXllci9kaXN0L3BsYXllci5lcy5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL3NyYy9jb21wb25lbnRzL2FsZXJ0L2luZGV4LmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vc3JjL2NvbXBvbmVudHMvYW5hbHl0aWNzLWxvZ2dlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL3NyYy9jb21wb25lbnRzL2F1ZGlvLXBsYXllci9hdWRpby1wbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9zcmMvY29tcG9uZW50cy9hdWRpby1wbGF5ZXIvY292ZXItaW1hZ2UtdGVtcGxhdGUuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9zcmMvY29tcG9uZW50cy9hdWRpby1wbGF5ZXIvdGltZS1mb3JtYXR0ZXIuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9zcmMvY29tcG9uZW50cy9jYXJvdXNlbC9hcnJvd1NoYXBlLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vc3JjL2NvbXBvbmVudHMvY2Fyb3VzZWwvY2Fyb3VzZWwuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9zcmMvY29tcG9uZW50cy9jYXJvdXNlbC9zbGlkZS92aWRlby1zbGlkZS5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL3NyYy9jb21wb25lbnRzL2p1bXBsaW5rLWJhbm5lci9qdW1wbGluay1iYW5uZXIuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9zcmMvY29tcG9uZW50cy9tdXNldHRlL211c2V0dGUuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9zcmMvY29tcG9uZW50cy92aW1lby1wbGF5ZXIvdmltZW8tY29udHJvbHMuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9zcmMvZ2xvYmFsL2xhenlsb2FkL2xhenlsb2FkLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vc3JjL2dsb2JhbC9zZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1jYWxsYWJsZS5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1nbG9iYWwtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9leHBvcnQuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZS5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZS5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2h0bWwuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1jYWxsYWJsZS5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXB1cmUuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21ha2UtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hdGgtdHJ1bmMuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3JkaW5hcnktdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQtc3RvcmUuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5LmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXkuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RyeS10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VpZC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vY29yZS1qc0AzLjIyLjgvbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvcmUtanNAMy4yMi44L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jb3JlLWpzQDMuMjIuOC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3JAMi4wLjIvbm9kZV9tb2R1bGVzL2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9ldi1lbWl0dGVyQDEuMS4xL25vZGVfbW9kdWxlcy9ldi1lbWl0dGVyL2V2LWVtaXR0ZXIuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vZml6enktdWktdXRpbHNAMi4wLjcvbm9kZV9tb2R1bGVzL2Zpenp5LXVpLXV0aWxzL3V0aWxzLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZsaWNraXR5LWltYWdlc2xvYWRlZEAyLjAuMC9ub2RlX21vZHVsZXMvZmxpY2tpdHktaW1hZ2VzbG9hZGVkL2ZsaWNraXR5LWltYWdlc2xvYWRlZC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9mbGlja2l0eUAyLjMuMC9ub2RlX21vZHVsZXMvZmxpY2tpdHkvanMvYWRkLXJlbW92ZS1jZWxsLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZsaWNraXR5QDIuMy4wL25vZGVfbW9kdWxlcy9mbGlja2l0eS9qcy9hbmltYXRlLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZsaWNraXR5QDIuMy4wL25vZGVfbW9kdWxlcy9mbGlja2l0eS9qcy9jZWxsLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZsaWNraXR5QDIuMy4wL25vZGVfbW9kdWxlcy9mbGlja2l0eS9qcy9kcmFnLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZsaWNraXR5QDIuMy4wL25vZGVfbW9kdWxlcy9mbGlja2l0eS9qcy9mbGlja2l0eS5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9mbGlja2l0eUAyLjMuMC9ub2RlX21vZHVsZXMvZmxpY2tpdHkvanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vZmxpY2tpdHlAMi4zLjAvbm9kZV9tb2R1bGVzL2ZsaWNraXR5L2pzL2xhenlsb2FkLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZsaWNraXR5QDIuMy4wL25vZGVfbW9kdWxlcy9mbGlja2l0eS9qcy9wYWdlLWRvdHMuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vZmxpY2tpdHlAMi4zLjAvbm9kZV9tb2R1bGVzL2ZsaWNraXR5L2pzL3BsYXllci5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9mbGlja2l0eUAyLjMuMC9ub2RlX21vZHVsZXMvZmxpY2tpdHkvanMvcHJldi1uZXh0LWJ1dHRvbi5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9mbGlja2l0eUAyLjMuMC9ub2RlX21vZHVsZXMvZmxpY2tpdHkvanMvc2xpZGUuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vZ2V0LXNpemVAMi4wLjMvbm9kZV9tb2R1bGVzL2dldC1zaXplL2dldC1zaXplLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2ltYWdlc2xvYWRlZEA0LjEuNC9ub2RlX21vZHVsZXMvaW1hZ2VzbG9hZGVkL2ltYWdlc2xvYWRlZC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9zbW9vdGhzY3JvbGwtcG9seWZpbGxAMC40LjQvbm9kZV9tb2R1bGVzL3Ntb290aHNjcm9sbC1wb2x5ZmlsbC9kaXN0L3Ntb290aHNjcm9sbC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmlkcmFnZ2VyQDIuNC4wL25vZGVfbW9kdWxlcy91bmlkcmFnZ2VyL3VuaWRyYWdnZXIuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5pcG9pbnRlckAyLjQuMC9ub2RlX21vZHVsZXMvdW5pcG9pbnRlci91bmlwb2ludGVyLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3ZhbmlsbGEtbGF6eWxvYWRAMTcuOC4yL25vZGVfbW9kdWxlcy92YW5pbGxhLWxhenlsb2FkL2Rpc3QvbGF6eWxvYWQubWluLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2Jhc2VDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fYmFzZUl0ZXJhdGVlLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2NiLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2NoYWluUmVzdWx0LmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2NvbGxlY3ROb25FbnVtUHJvcHMuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fY3JlYXRlQXNzaWduZXIuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fY3JlYXRlRXNjYXBlci5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19jcmVhdGVJbmRleEZpbmRlci5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19jcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlci5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19jcmVhdGVSZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fY3JlYXRlU2l6ZVByb3BlcnR5Q2hlY2suanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fZGVlcEdldC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19lc2NhcGVNYXAuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fZXhlY3V0ZUJvdW5kLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2ZsYXR0ZW4uanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fZ2V0Qnl0ZUxlbmd0aC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19nZXRMZW5ndGguanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fZ3JvdXAuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX2hhc09iamVjdFRhZy5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19pc0FycmF5TGlrZS5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19pc0J1ZmZlckxpa2UuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fa2V5SW5PYmouanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fbWV0aG9kRmluZ2VycHJpbnQuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fb3B0aW1pemVDYi5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19zZXR1cC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL19zaGFsbG93UHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fc3RyaW5nVGFnQnVnLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX3RhZ1Rlc3Rlci5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL190b0J1ZmZlclZpZXcuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9fdG9QYXRoLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvX3VuZXNjYXBlTWFwLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvYWZ0ZXIuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9hbGxLZXlzLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvYmVmb3JlLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvYmluZC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2JpbmRBbGwuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9jaGFpbi5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2NodW5rLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvY2xvbmUuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9jb21wYWN0LmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvY29tcG9zZS5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2NvbnN0YW50LmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvY29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9jb3VudEJ5LmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvY3JlYXRlLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2RlZmVyLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvZGVsYXkuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9kaWZmZXJlbmNlLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvZWFjaC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2VzY2FwZS5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2V2ZXJ5LmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvZXh0ZW5kLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvZXh0ZW5kT3duLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvZmlsdGVyLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvZmluZC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2ZpbmRJbmRleC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2ZpbmRLZXkuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9maW5kTGFzdEluZGV4LmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvZmluZFdoZXJlLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvZmlyc3QuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9mbGF0dGVuLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvZnVuY3Rpb25zLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvZ2V0LmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvZ3JvdXBCeS5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2hhcy5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lkZW50aXR5LmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaW5kZXgtZGVmYXVsdC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2luZGV4QnkuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pbmRleE9mLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaW5pdGlhbC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2ludGVyc2VjdGlvbi5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2ludmVydC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2ludm9rZS5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzQXJndW1lbnRzLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzQXJyYXlCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc0Jvb2xlYW4uanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc0RhdGFWaWV3LmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNEYXRlLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNFbGVtZW50LmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNFbXB0eS5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzRXF1YWwuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc0Vycm9yLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNGaW5pdGUuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNNYXAuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc01hdGNoLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNOYU4uanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc051bGwuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc051bWJlci5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzT2JqZWN0LmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNSZWdFeHAuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc1NldC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzU3RyaW5nLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvaXNTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9pc1VuZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzV2Vha01hcC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2lzV2Vha1NldC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2l0ZXJhdGVlLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMva2V5cy5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL2xhc3QuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9sYXN0SW5kZXhPZi5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL21hcC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL21hcE9iamVjdC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL21hdGNoZXIuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9tYXguanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9tZW1vaXplLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvbWluLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvbWl4aW4uanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9uZWdhdGUuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9ub29wLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvbm93LmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvb2JqZWN0LmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvb21pdC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL29uY2UuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9wYWlycy5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3BhcnRpYWwuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9wYXJ0aXRpb24uanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9waWNrLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvcGx1Y2suanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3Byb3BlcnR5T2YuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9yYW5kb20uanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9yYW5nZS5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3JlZHVjZS5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3JlZHVjZVJpZ2h0LmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvcmVqZWN0LmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvcmVzdC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3Jlc3RBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9yZXN1bHQuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9zYW1wbGUuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9zaHVmZmxlLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvc2l6ZS5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3NvbWUuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9zb3J0QnkuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy9zb3J0ZWRJbmRleC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3RhcC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3RlbXBsYXRlLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvdGVtcGxhdGVTZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3Rocm90dGxlLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvdGltZXMuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy90b0FycmF5LmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvdG9QYXRoLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvdW5kZXJzY29yZS1hcnJheS1tZXRob2RzLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvdW5kZXJzY29yZS5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3VuZXNjYXBlLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvdW5pb24uanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy91bmlxLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvdW5pcXVlSWQuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy91bnppcC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3ZhbHVlcy5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3doZXJlLmpzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuZGVyc2NvcmVAMS4xMy40L25vZGVfbW9kdWxlcy91bmRlcnNjb3JlL21vZHVsZXMvd2l0aG91dC5qcyIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS8uL25vZGVfbW9kdWxlcy8ucG5wbS91bmRlcnNjb3JlQDEuMTMuNC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS9tb2R1bGVzL3dyYXAuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9ub2RlX21vZHVsZXMvLnBucG0vdW5kZXJzY29yZUAxLjEzLjQvbm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvbW9kdWxlcy96aXAuanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvLi9zcmMvZ2xvYmFsL2dsb2JhbC5tanMiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vQG1ldG11c2V1bS9tYXJibGUvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9AbWV0bXVzZXVtL21hcmJsZS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL0BtZXRtdXNldW0vbWFyYmxlLy4vc3JjL2luZGV4Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQHZpbWVvL3BsYXllciB2Mi4xNi40IHwgKGMpIDIwMjIgVmltZW8gfCBNSVQgTGljZW5zZSB8IGh0dHBzOi8vZ2l0aHViLmNvbS92aW1lby9wbGF5ZXIuanMgKi9cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxuLyoqXG4gKiBAbW9kdWxlIGxpYi9mdW5jdGlvbnNcbiAqL1xuXG4vKipcbiAqIENoZWNrIHRvIHNlZSB0aGlzIGlzIGEgbm9kZSBlbnZpcm9ubWVudC5cbiAqIEB0eXBlIHtCb29sZWFufVxuICovXG5cbi8qIGdsb2JhbCBnbG9iYWwgKi9cbnZhciBpc05vZGUgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiB7fS50b1N0cmluZy5jYWxsKGdsb2JhbCkgPT09ICdbb2JqZWN0IGdsb2JhbF0nO1xuLyoqXG4gKiBHZXQgdGhlIG5hbWUgb2YgdGhlIG1ldGhvZCBmb3IgYSBnaXZlbiBnZXR0ZXIgb3Igc2V0dGVyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIEVpdGhlciDigJxnZXTigJ0gb3Ig4oCcc2V04oCdLlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIGdldE1ldGhvZE5hbWUocHJvcCwgdHlwZSkge1xuICBpZiAocHJvcC5pbmRleE9mKHR5cGUudG9Mb3dlckNhc2UoKSkgPT09IDApIHtcbiAgICByZXR1cm4gcHJvcDtcbiAgfVxuXG4gIHJldHVybiBcIlwiLmNvbmNhdCh0eXBlLnRvTG93ZXJDYXNlKCkpLmNvbmNhdChwcm9wLnN1YnN0cigwLCAxKS50b1VwcGVyQ2FzZSgpKS5jb25jYXQocHJvcC5zdWJzdHIoMSkpO1xufVxuLyoqXG4gKiBDaGVjayB0byBzZWUgaWYgdGhlIG9iamVjdCBpcyBhIERPTSBFbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7Kn0gZWxlbWVudCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBpc0RvbUVsZW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gQm9vbGVhbihlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgPT09IDEgJiYgJ25vZGVOYW1lJyBpbiBlbGVtZW50ICYmIGVsZW1lbnQub3duZXJEb2N1bWVudCAmJiBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpO1xufVxuLyoqXG4gKiBDaGVjayB0byBzZWUgd2hldGhlciB0aGUgdmFsdWUgaXMgYSBudW1iZXIuXG4gKlxuICogQHNlZSBodHRwOi8vZGwuZHJvcGJveHVzZXJjb250ZW50LmNvbS91LzM1MTQ2L2pzL3Rlc3RzL2lzTnVtYmVyLmh0bWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtib29sZWFufSBpbnRlZ2VyIENoZWNrIGlmIHRoZSB2YWx1ZSBpcyBhbiBpbnRlZ2VyLlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKSAmJiBpc0Zpbml0ZSh2YWx1ZSkgJiYgTWF0aC5mbG9vcih2YWx1ZSkgPT0gdmFsdWU7XG59XG4vKipcbiAqIENoZWNrIHRvIHNlZSBpZiB0aGUgVVJMIGlzIGEgVmltZW8gdXJsLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIHVybCBzdHJpbmcuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5cbmZ1bmN0aW9uIGlzVmltZW9VcmwodXJsKSB7XG4gIHJldHVybiAvXihodHRwcz86KT9cXC9cXC8oKHBsYXllcnx3d3cpXFwuKT92aW1lb1xcLmNvbSg/PSR8XFwvKS8udGVzdCh1cmwpO1xufVxuLyoqXG4gKiBHZXQgdGhlIFZpbWVvIFVSTCBmcm9tIGFuIGVsZW1lbnQuXG4gKiBUaGUgZWxlbWVudCBtdXN0IGhhdmUgZWl0aGVyIGEgZGF0YS12aW1lby1pZCBvciBkYXRhLXZpbWVvLXVybCBhdHRyaWJ1dGUuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9FbWJlZFBhcmFtZXRlcnMgVGhlIG9FbWJlZCBwYXJhbWV0ZXJzLlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIGdldFZpbWVvVXJsKCkge1xuICB2YXIgb0VtYmVkUGFyYW1ldGVycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBpZCA9IG9FbWJlZFBhcmFtZXRlcnMuaWQ7XG4gIHZhciB1cmwgPSBvRW1iZWRQYXJhbWV0ZXJzLnVybDtcbiAgdmFyIGlkT3JVcmwgPSBpZCB8fCB1cmw7XG5cbiAgaWYgKCFpZE9yVXJsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBbiBpZCBvciB1cmwgbXVzdCBiZSBwYXNzZWQsIGVpdGhlciBpbiBhbiBvcHRpb25zIG9iamVjdCBvciBhcyBhIGRhdGEtdmltZW8taWQgb3IgZGF0YS12aW1lby11cmwgYXR0cmlidXRlLicpO1xuICB9XG5cbiAgaWYgKGlzSW50ZWdlcihpZE9yVXJsKSkge1xuICAgIHJldHVybiBcImh0dHBzOi8vdmltZW8uY29tL1wiLmNvbmNhdChpZE9yVXJsKTtcbiAgfVxuXG4gIGlmIChpc1ZpbWVvVXJsKGlkT3JVcmwpKSB7XG4gICAgcmV0dXJuIGlkT3JVcmwucmVwbGFjZSgnaHR0cDonLCAnaHR0cHM6Jyk7XG4gIH1cblxuICBpZiAoaWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiXFx1MjAxQ1wiLmNvbmNhdChpZCwgXCJcXHUyMDFEIGlzIG5vdCBhIHZhbGlkIHZpZGVvIGlkLlwiKSk7XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiXFx1MjAxQ1wiLmNvbmNhdChpZE9yVXJsLCBcIlxcdTIwMUQgaXMgbm90IGEgdmltZW8uY29tIHVybC5cIikpO1xufVxuXG52YXIgYXJyYXlJbmRleE9mU3VwcG9ydCA9IHR5cGVvZiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgcG9zdE1lc3NhZ2VTdXBwb3J0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5wb3N0TWVzc2FnZSAhPT0gJ3VuZGVmaW5lZCc7XG5cbmlmICghaXNOb2RlICYmICghYXJyYXlJbmRleE9mU3VwcG9ydCB8fCAhcG9zdE1lc3NhZ2VTdXBwb3J0KSkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ1NvcnJ5LCB0aGUgVmltZW8gUGxheWVyIEFQSSBpcyBub3QgYXZhaWxhYmxlIGluIHRoaXMgYnJvd3Nlci4nKTtcbn1cblxudmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBtb2R1bGUpIHtcblx0cmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vKiFcbiAqIHdlYWttYXAtcG9seWZpbGwgdjIuMC4xIC0gRUNNQVNjcmlwdDYgV2Vha01hcCBwb2x5ZmlsbFxuICogaHR0cHM6Ly9naXRodWIuY29tL3BvbHlnb25wbGFuZXQvd2Vha21hcC1wb2x5ZmlsbFxuICogQ29weXJpZ2h0IChjKSAyMDE1LTIwMjAgUG9seWdvbiBQbGFuZXQgPHBvbHlnb24ucGxhbmV0LmFxdWFAZ21haWwuY29tPlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbihmdW5jdGlvbiAoc2VsZikge1xuXG4gIGlmIChzZWxmLldlYWtNYXApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgbmFtZSwge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmplY3RbbmFtZV0gPSB2YWx1ZTtcbiAgICB9XG4gIH07XG5cbiAgc2VsZi5XZWFrTWFwID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIEVDTUEtMjYyIDIzLjMgV2Vha01hcCBPYmplY3RzXG4gICAgZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICAgIGlmICh0aGlzID09PSB2b2lkIDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNvbnN0cnVjdG9yIFdlYWtNYXAgcmVxdWlyZXMgJ25ldydcIik7XG4gICAgICB9XG5cbiAgICAgIGRlZmluZVByb3BlcnR5KHRoaXMsICdfaWQnLCBnZW5JZCgnX1dlYWtNYXAnKSk7IC8vIEVDTUEtMjYyIDIzLjMuMS4xIFdlYWtNYXAoW2l0ZXJhYmxlXSlcblxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIEN1cnJlbnRseSwgV2Vha01hcCBgaXRlcmFibGVgIGFyZ3VtZW50IGlzIG5vdCBzdXBwb3J0ZWRcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignV2Vha01hcCBpdGVyYWJsZSBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICB9XG4gICAgfSAvLyBFQ01BLTI2MiAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuXG5cbiAgICBkZWZpbmVQcm9wZXJ0eShXZWFrTWFwLnByb3RvdHlwZSwgJ2RlbGV0ZScsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGNoZWNrSW5zdGFuY2UodGhpcywgJ2RlbGV0ZScpO1xuXG4gICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZW50cnkgPSBrZXlbdGhpcy5faWRdO1xuXG4gICAgICBpZiAoZW50cnkgJiYgZW50cnlbMF0gPT09IGtleSkge1xuICAgICAgICBkZWxldGUga2V5W3RoaXMuX2lkXTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTsgLy8gRUNNQS0yNjIgMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlcblxuICAgIGRlZmluZVByb3BlcnR5KFdlYWtNYXAucHJvdG90eXBlLCAnZ2V0JywgZnVuY3Rpb24gKGtleSkge1xuICAgICAgY2hlY2tJbnN0YW5jZSh0aGlzLCAnZ2V0Jyk7XG5cbiAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgZW50cnkgPSBrZXlbdGhpcy5faWRdO1xuXG4gICAgICBpZiAoZW50cnkgJiYgZW50cnlbMF0gPT09IGtleSkge1xuICAgICAgICByZXR1cm4gZW50cnlbMV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfSk7IC8vIEVDTUEtMjYyIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG5cbiAgICBkZWZpbmVQcm9wZXJ0eShXZWFrTWFwLnByb3RvdHlwZSwgJ2hhcycsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGNoZWNrSW5zdGFuY2UodGhpcywgJ2hhcycpO1xuXG4gICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZW50cnkgPSBrZXlbdGhpcy5faWRdO1xuXG4gICAgICBpZiAoZW50cnkgJiYgZW50cnlbMF0gPT09IGtleSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pOyAvLyBFQ01BLTI2MiAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcblxuICAgIGRlZmluZVByb3BlcnR5KFdlYWtNYXAucHJvdG90eXBlLCAnc2V0JywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGNoZWNrSW5zdGFuY2UodGhpcywgJ3NldCcpO1xuXG4gICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCB2YWx1ZSB1c2VkIGFzIHdlYWsgbWFwIGtleScpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZW50cnkgPSBrZXlbdGhpcy5faWRdO1xuXG4gICAgICBpZiAoZW50cnkgJiYgZW50cnlbMF0gPT09IGtleSkge1xuICAgICAgICBlbnRyeVsxXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgZGVmaW5lUHJvcGVydHkoa2V5LCB0aGlzLl9pZCwgW2tleSwgdmFsdWVdKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gY2hlY2tJbnN0YW5jZSh4LCBtZXRob2ROYW1lKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHgpIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdfaWQnKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKG1ldGhvZE5hbWUgKyAnIG1ldGhvZCBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyICcgKyB0eXBlb2YgeCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuSWQocHJlZml4KSB7XG4gICAgICByZXR1cm4gcHJlZml4ICsgJ18nICsgcmFuZCgpICsgJy4nICsgcmFuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJhbmQoKSB7XG4gICAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygpLnN1YnN0cmluZygyKTtcbiAgICB9XG5cbiAgICBkZWZpbmVQcm9wZXJ0eShXZWFrTWFwLCAnX3BvbHlmaWxsJywgdHJ1ZSk7XG4gICAgcmV0dXJuIFdlYWtNYXA7XG4gIH0oKTtcblxuICBmdW5jdGlvbiBpc09iamVjdCh4KSB7XG4gICAgcmV0dXJuIE9iamVjdCh4KSA9PT0geDtcbiAgfVxufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGNvbW1vbmpzR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGNvbW1vbmpzR2xvYmFsIDogY29tbW9uanNHbG9iYWwpO1xuXG52YXIgbnBvX3NyYyA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcbi8qISBOYXRpdmUgUHJvbWlzZSBPbmx5XG4gICAgdjAuOC4xIChjKSBLeWxlIFNpbXBzb25cbiAgICBNSVQgTGljZW5zZTogaHR0cDovL2dldGlmeS5taXQtbGljZW5zZS5vcmdcbiovXG4oZnVuY3Rpb24gVU1EKG5hbWUsIGNvbnRleHQsIGRlZmluaXRpb24pIHtcbiAgLy8gc3BlY2lhbCBmb3JtIG9mIFVNRCBmb3IgcG9seWZpbGxpbmcgYWNyb3NzIGV2aXJvbm1lbnRzXG4gIGNvbnRleHRbbmFtZV0gPSBjb250ZXh0W25hbWVdIHx8IGRlZmluaXRpb24oKTtcblxuICBpZiAobW9kdWxlLmV4cG9ydHMpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGNvbnRleHRbbmFtZV07XG4gIH1cbn0pKFwiUHJvbWlzZVwiLCB0eXBlb2YgY29tbW9uanNHbG9iYWwgIT0gXCJ1bmRlZmluZWRcIiA/IGNvbW1vbmpzR2xvYmFsIDogY29tbW9uanNHbG9iYWwsIGZ1bmN0aW9uIERFRigpIHtcblxuICB2YXIgYnVpbHRJblByb3AsXG4gICAgICBjeWNsZSxcbiAgICAgIHNjaGVkdWxpbmdfcXVldWUsXG4gICAgICBUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsXG4gICAgICB0aW1lciA9IHR5cGVvZiBzZXRJbW1lZGlhdGUgIT0gXCJ1bmRlZmluZWRcIiA/IGZ1bmN0aW9uIHRpbWVyKGZuKSB7XG4gICAgcmV0dXJuIHNldEltbWVkaWF0ZShmbik7XG4gIH0gOiBzZXRUaW1lb3V0OyAvLyBkYW1taXQsIElFOC5cblxuICB0cnkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgXCJ4XCIsIHt9KTtcblxuICAgIGJ1aWx0SW5Qcm9wID0gZnVuY3Rpb24gYnVpbHRJblByb3Aob2JqLCBuYW1lLCB2YWwsIGNvbmZpZykge1xuICAgICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG5hbWUsIHtcbiAgICAgICAgdmFsdWU6IHZhbCxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogY29uZmlnICE9PSBmYWxzZVxuICAgICAgfSk7XG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgYnVpbHRJblByb3AgPSBmdW5jdGlvbiBidWlsdEluUHJvcChvYmosIG5hbWUsIHZhbCkge1xuICAgICAgb2JqW25hbWVdID0gdmFsO1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9O1xuICB9IC8vIE5vdGU6IHVzaW5nIGEgcXVldWUgaW5zdGVhZCBvZiBhcnJheSBmb3IgZWZmaWNpZW5jeVxuXG5cbiAgc2NoZWR1bGluZ19xdWV1ZSA9IGZ1bmN0aW9uIFF1ZXVlKCkge1xuICAgIHZhciBmaXJzdCwgbGFzdCwgaXRlbTtcblxuICAgIGZ1bmN0aW9uIEl0ZW0oZm4sIHNlbGYpIHtcbiAgICAgIHRoaXMuZm4gPSBmbjtcbiAgICAgIHRoaXMuc2VsZiA9IHNlbGY7XG4gICAgICB0aGlzLm5leHQgPSB2b2lkIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGFkZDogZnVuY3Rpb24gYWRkKGZuLCBzZWxmKSB7XG4gICAgICAgIGl0ZW0gPSBuZXcgSXRlbShmbiwgc2VsZik7XG5cbiAgICAgICAgaWYgKGxhc3QpIHtcbiAgICAgICAgICBsYXN0Lm5leHQgPSBpdGVtO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpcnN0ID0gaXRlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3QgPSBpdGVtO1xuICAgICAgICBpdGVtID0gdm9pZCAwO1xuICAgICAgfSxcbiAgICAgIGRyYWluOiBmdW5jdGlvbiBkcmFpbigpIHtcbiAgICAgICAgdmFyIGYgPSBmaXJzdDtcbiAgICAgICAgZmlyc3QgPSBsYXN0ID0gY3ljbGUgPSB2b2lkIDA7XG5cbiAgICAgICAgd2hpbGUgKGYpIHtcbiAgICAgICAgICBmLmZuLmNhbGwoZi5zZWxmKTtcbiAgICAgICAgICBmID0gZi5uZXh0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlKGZuLCBzZWxmKSB7XG4gICAgc2NoZWR1bGluZ19xdWV1ZS5hZGQoZm4sIHNlbGYpO1xuXG4gICAgaWYgKCFjeWNsZSkge1xuICAgICAgY3ljbGUgPSB0aW1lcihzY2hlZHVsaW5nX3F1ZXVlLmRyYWluKTtcbiAgICB9XG4gIH0gLy8gcHJvbWlzZSBkdWNrIHR5cGluZ1xuXG5cbiAgZnVuY3Rpb24gaXNUaGVuYWJsZShvKSB7XG4gICAgdmFyIF90aGVuLFxuICAgICAgICBvX3R5cGUgPSB0eXBlb2YgbztcblxuICAgIGlmIChvICE9IG51bGwgJiYgKG9fdHlwZSA9PSBcIm9iamVjdFwiIHx8IG9fdHlwZSA9PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgICBfdGhlbiA9IG8udGhlbjtcbiAgICB9XG5cbiAgICByZXR1cm4gdHlwZW9mIF90aGVuID09IFwiZnVuY3Rpb25cIiA/IF90aGVuIDogZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoYWluLmxlbmd0aDsgaSsrKSB7XG4gICAgICBub3RpZnlJc29sYXRlZCh0aGlzLCB0aGlzLnN0YXRlID09PSAxID8gdGhpcy5jaGFpbltpXS5zdWNjZXNzIDogdGhpcy5jaGFpbltpXS5mYWlsdXJlLCB0aGlzLmNoYWluW2ldKTtcbiAgICB9XG5cbiAgICB0aGlzLmNoYWluLmxlbmd0aCA9IDA7XG4gIH0gLy8gTk9URTogVGhpcyBpcyBhIHNlcGFyYXRlIGZ1bmN0aW9uIHRvIGlzb2xhdGVcbiAgLy8gdGhlIGB0cnkuLmNhdGNoYCBzbyB0aGF0IG90aGVyIGNvZGUgY2FuIGJlXG4gIC8vIG9wdGltaXplZCBiZXR0ZXJcblxuXG4gIGZ1bmN0aW9uIG5vdGlmeUlzb2xhdGVkKHNlbGYsIGNiLCBjaGFpbikge1xuICAgIHZhciByZXQsIF90aGVuO1xuXG4gICAgdHJ5IHtcbiAgICAgIGlmIChjYiA9PT0gZmFsc2UpIHtcbiAgICAgICAgY2hhaW4ucmVqZWN0KHNlbGYubXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjYiA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldCA9IHNlbGYubXNnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldCA9IGNiLmNhbGwodm9pZCAwLCBzZWxmLm1zZyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmV0ID09PSBjaGFpbi5wcm9taXNlKSB7XG4gICAgICAgICAgY2hhaW4ucmVqZWN0KFR5cGVFcnJvcihcIlByb21pc2UtY2hhaW4gY3ljbGVcIikpO1xuICAgICAgICB9IGVsc2UgaWYgKF90aGVuID0gaXNUaGVuYWJsZShyZXQpKSB7XG4gICAgICAgICAgX3RoZW4uY2FsbChyZXQsIGNoYWluLnJlc29sdmUsIGNoYWluLnJlamVjdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhaW4ucmVzb2x2ZShyZXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjaGFpbi5yZWplY3QoZXJyKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlKG1zZykge1xuICAgIHZhciBfdGhlbixcbiAgICAgICAgc2VsZiA9IHRoaXM7IC8vIGFscmVhZHkgdHJpZ2dlcmVkP1xuXG5cbiAgICBpZiAoc2VsZi50cmlnZ2VyZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZWxmLnRyaWdnZXJlZCA9IHRydWU7IC8vIHVud3JhcFxuXG4gICAgaWYgKHNlbGYuZGVmKSB7XG4gICAgICBzZWxmID0gc2VsZi5kZWY7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlmIChfdGhlbiA9IGlzVGhlbmFibGUobXNnKSkge1xuICAgICAgICBzY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGRlZl93cmFwcGVyID0gbmV3IE1ha2VEZWZXcmFwcGVyKHNlbGYpO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIF90aGVuLmNhbGwobXNnLCBmdW5jdGlvbiAkcmVzb2x2ZSQoKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUuYXBwbHkoZGVmX3dyYXBwZXIsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAkcmVqZWN0JCgpIHtcbiAgICAgICAgICAgICAgcmVqZWN0LmFwcGx5KGRlZl93cmFwcGVyLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QuY2FsbChkZWZfd3JhcHBlciwgZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5tc2cgPSBtc2c7XG4gICAgICAgIHNlbGYuc3RhdGUgPSAxO1xuXG4gICAgICAgIGlmIChzZWxmLmNoYWluLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBzY2hlZHVsZShub3RpZnksIHNlbGYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZWplY3QuY2FsbChuZXcgTWFrZURlZldyYXBwZXIoc2VsZiksIGVycik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVqZWN0KG1zZykge1xuICAgIHZhciBzZWxmID0gdGhpczsgLy8gYWxyZWFkeSB0cmlnZ2VyZWQ/XG5cbiAgICBpZiAoc2VsZi50cmlnZ2VyZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZWxmLnRyaWdnZXJlZCA9IHRydWU7IC8vIHVud3JhcFxuXG4gICAgaWYgKHNlbGYuZGVmKSB7XG4gICAgICBzZWxmID0gc2VsZi5kZWY7XG4gICAgfVxuXG4gICAgc2VsZi5tc2cgPSBtc2c7XG4gICAgc2VsZi5zdGF0ZSA9IDI7XG5cbiAgICBpZiAoc2VsZi5jaGFpbi5sZW5ndGggPiAwKSB7XG4gICAgICBzY2hlZHVsZShub3RpZnksIHNlbGYpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGl0ZXJhdGVQcm9taXNlcyhDb25zdHJ1Y3RvciwgYXJyLCByZXNvbHZlciwgcmVqZWN0ZXIpIHtcbiAgICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBhcnIubGVuZ3RoOyBpZHgrKykge1xuICAgICAgKGZ1bmN0aW9uIElJRkUoaWR4KSB7XG4gICAgICAgIENvbnN0cnVjdG9yLnJlc29sdmUoYXJyW2lkeF0pLnRoZW4oZnVuY3Rpb24gJHJlc29sdmVyJChtc2cpIHtcbiAgICAgICAgICByZXNvbHZlcihpZHgsIG1zZyk7XG4gICAgICAgIH0sIHJlamVjdGVyKTtcbiAgICAgIH0pKGlkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gTWFrZURlZldyYXBwZXIoc2VsZikge1xuICAgIHRoaXMuZGVmID0gc2VsZjtcbiAgICB0aGlzLnRyaWdnZXJlZCA9IGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gTWFrZURlZihzZWxmKSB7XG4gICAgdGhpcy5wcm9taXNlID0gc2VsZjtcbiAgICB0aGlzLnN0YXRlID0gMDtcbiAgICB0aGlzLnRyaWdnZXJlZCA9IGZhbHNlO1xuICAgIHRoaXMuY2hhaW4gPSBbXTtcbiAgICB0aGlzLm1zZyA9IHZvaWQgMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKFwiTm90IGEgZnVuY3Rpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX19OUE9fXyAhPT0gMCkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKFwiTm90IGEgcHJvbWlzZVwiKTtcbiAgICB9IC8vIGluc3RhbmNlIHNoYWRvd2luZyB0aGUgaW5oZXJpdGVkIFwiYnJhbmRcIlxuICAgIC8vIHRvIHNpZ25hbCBhbiBhbHJlYWR5IFwiaW5pdGlhbGl6ZWRcIiBwcm9taXNlXG5cblxuICAgIHRoaXMuX19OUE9fXyA9IDE7XG4gICAgdmFyIGRlZiA9IG5ldyBNYWtlRGVmKHRoaXMpO1xuXG4gICAgdGhpc1tcInRoZW5cIl0gPSBmdW5jdGlvbiB0aGVuKHN1Y2Nlc3MsIGZhaWx1cmUpIHtcbiAgICAgIHZhciBvID0ge1xuICAgICAgICBzdWNjZXNzOiB0eXBlb2Ygc3VjY2VzcyA9PSBcImZ1bmN0aW9uXCIgPyBzdWNjZXNzIDogdHJ1ZSxcbiAgICAgICAgZmFpbHVyZTogdHlwZW9mIGZhaWx1cmUgPT0gXCJmdW5jdGlvblwiID8gZmFpbHVyZSA6IGZhbHNlXG4gICAgICB9OyAvLyBOb3RlOiBgdGhlbiguLilgIGl0c2VsZiBjYW4gYmUgYm9ycm93ZWQgdG8gYmUgdXNlZCBhZ2FpbnN0XG4gICAgICAvLyBhIGRpZmZlcmVudCBwcm9taXNlIGNvbnN0cnVjdG9yIGZvciBtYWtpbmcgdGhlIGNoYWluZWQgcHJvbWlzZSxcbiAgICAgIC8vIGJ5IHN1YnN0aXR1dGluZyBhIGRpZmZlcmVudCBgdGhpc2AgYmluZGluZy5cblxuICAgICAgby5wcm9taXNlID0gbmV3IHRoaXMuY29uc3RydWN0b3IoZnVuY3Rpb24gZXh0cmFjdENoYWluKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBpZiAodHlwZW9mIHJlc29sdmUgIT0gXCJmdW5jdGlvblwiIHx8IHR5cGVvZiByZWplY3QgIT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiTm90IGEgZnVuY3Rpb25cIik7XG4gICAgICAgIH1cblxuICAgICAgICBvLnJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICBvLnJlamVjdCA9IHJlamVjdDtcbiAgICAgIH0pO1xuICAgICAgZGVmLmNoYWluLnB1c2gobyk7XG5cbiAgICAgIGlmIChkZWYuc3RhdGUgIT09IDApIHtcbiAgICAgICAgc2NoZWR1bGUobm90aWZ5LCBkZWYpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gby5wcm9taXNlO1xuICAgIH07XG5cbiAgICB0aGlzW1wiY2F0Y2hcIl0gPSBmdW5jdGlvbiAkY2F0Y2gkKGZhaWx1cmUpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odm9pZCAwLCBmYWlsdXJlKTtcbiAgICB9O1xuXG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yLmNhbGwodm9pZCAwLCBmdW5jdGlvbiBwdWJsaWNSZXNvbHZlKG1zZykge1xuICAgICAgICByZXNvbHZlLmNhbGwoZGVmLCBtc2cpO1xuICAgICAgfSwgZnVuY3Rpb24gcHVibGljUmVqZWN0KG1zZykge1xuICAgICAgICByZWplY3QuY2FsbChkZWYsIG1zZyk7XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJlamVjdC5jYWxsKGRlZiwgZXJyKTtcbiAgICB9XG4gIH1cblxuICB2YXIgUHJvbWlzZVByb3RvdHlwZSA9IGJ1aWx0SW5Qcm9wKHt9LCBcImNvbnN0cnVjdG9yXCIsIFByb21pc2UsXG4gIC8qY29uZmlndXJhYmxlPSovXG4gIGZhbHNlKTsgLy8gTm90ZTogQW5kcm9pZCA0IGNhbm5vdCB1c2UgYE9iamVjdC5kZWZpbmVQcm9wZXJ0eSguLilgIGhlcmVcblxuICBQcm9taXNlLnByb3RvdHlwZSA9IFByb21pc2VQcm90b3R5cGU7IC8vIGJ1aWx0LWluIFwiYnJhbmRcIiB0byBzaWduYWwgYW4gXCJ1bmluaXRpYWxpemVkXCIgcHJvbWlzZVxuXG4gIGJ1aWx0SW5Qcm9wKFByb21pc2VQcm90b3R5cGUsIFwiX19OUE9fX1wiLCAwLFxuICAvKmNvbmZpZ3VyYWJsZT0qL1xuICBmYWxzZSk7XG4gIGJ1aWx0SW5Qcm9wKFByb21pc2UsIFwicmVzb2x2ZVwiLCBmdW5jdGlvbiBQcm9taXNlJHJlc29sdmUobXNnKSB7XG4gICAgdmFyIENvbnN0cnVjdG9yID0gdGhpczsgLy8gc3BlYyBtYW5kYXRlZCBjaGVja3NcbiAgICAvLyBub3RlOiBiZXN0IFwiaXNQcm9taXNlXCIgY2hlY2sgdGhhdCdzIHByYWN0aWNhbCBmb3Igbm93XG5cbiAgICBpZiAobXNnICYmIHR5cGVvZiBtc2cgPT0gXCJvYmplY3RcIiAmJiBtc2cuX19OUE9fXyA9PT0gMSkge1xuICAgICAgcmV0dXJuIG1zZztcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKGZ1bmN0aW9uIGV4ZWN1dG9yKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgaWYgKHR5cGVvZiByZXNvbHZlICE9IFwiZnVuY3Rpb25cIiB8fCB0eXBlb2YgcmVqZWN0ICE9IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJOb3QgYSBmdW5jdGlvblwiKTtcbiAgICAgIH1cblxuICAgICAgcmVzb2x2ZShtc2cpO1xuICAgIH0pO1xuICB9KTtcbiAgYnVpbHRJblByb3AoUHJvbWlzZSwgXCJyZWplY3RcIiwgZnVuY3Rpb24gUHJvbWlzZSRyZWplY3QobXNnKSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzKGZ1bmN0aW9uIGV4ZWN1dG9yKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgaWYgKHR5cGVvZiByZXNvbHZlICE9IFwiZnVuY3Rpb25cIiB8fCB0eXBlb2YgcmVqZWN0ICE9IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJOb3QgYSBmdW5jdGlvblwiKTtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KG1zZyk7XG4gICAgfSk7XG4gIH0pO1xuICBidWlsdEluUHJvcChQcm9taXNlLCBcImFsbFwiLCBmdW5jdGlvbiBQcm9taXNlJGFsbChhcnIpIHtcbiAgICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzOyAvLyBzcGVjIG1hbmRhdGVkIGNoZWNrc1xuXG4gICAgaWYgKFRvU3RyaW5nLmNhbGwoYXJyKSAhPSBcIltvYmplY3QgQXJyYXldXCIpIHtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3Rvci5yZWplY3QoVHlwZUVycm9yKFwiTm90IGFuIGFycmF5XCIpKTtcbiAgICB9XG5cbiAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yLnJlc29sdmUoW10pO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IoZnVuY3Rpb24gZXhlY3V0b3IocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBpZiAodHlwZW9mIHJlc29sdmUgIT0gXCJmdW5jdGlvblwiIHx8IHR5cGVvZiByZWplY3QgIT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcIk5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVuID0gYXJyLmxlbmd0aCxcbiAgICAgICAgICBtc2dzID0gQXJyYXkobGVuKSxcbiAgICAgICAgICBjb3VudCA9IDA7XG4gICAgICBpdGVyYXRlUHJvbWlzZXMoQ29uc3RydWN0b3IsIGFyciwgZnVuY3Rpb24gcmVzb2x2ZXIoaWR4LCBtc2cpIHtcbiAgICAgICAgbXNnc1tpZHhdID0gbXNnO1xuXG4gICAgICAgIGlmICgrK2NvdW50ID09PSBsZW4pIHtcbiAgICAgICAgICByZXNvbHZlKG1zZ3MpO1xuICAgICAgICB9XG4gICAgICB9LCByZWplY3QpO1xuICAgIH0pO1xuICB9KTtcbiAgYnVpbHRJblByb3AoUHJvbWlzZSwgXCJyYWNlXCIsIGZ1bmN0aW9uIFByb21pc2UkcmFjZShhcnIpIHtcbiAgICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzOyAvLyBzcGVjIG1hbmRhdGVkIGNoZWNrc1xuXG4gICAgaWYgKFRvU3RyaW5nLmNhbGwoYXJyKSAhPSBcIltvYmplY3QgQXJyYXldXCIpIHtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3Rvci5yZWplY3QoVHlwZUVycm9yKFwiTm90IGFuIGFycmF5XCIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKGZ1bmN0aW9uIGV4ZWN1dG9yKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgaWYgKHR5cGVvZiByZXNvbHZlICE9IFwiZnVuY3Rpb25cIiB8fCB0eXBlb2YgcmVqZWN0ICE9IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJOb3QgYSBmdW5jdGlvblwiKTtcbiAgICAgIH1cblxuICAgICAgaXRlcmF0ZVByb21pc2VzKENvbnN0cnVjdG9yLCBhcnIsIGZ1bmN0aW9uIHJlc29sdmVyKGlkeCwgbXNnKSB7XG4gICAgICAgIHJlc29sdmUobXNnKTtcbiAgICAgIH0sIHJlamVjdCk7XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gUHJvbWlzZTtcbn0pO1xufSk7XG5cbi8qKlxuICogQG1vZHVsZSBsaWIvY2FsbGJhY2tzXG4gKi9cbnZhciBjYWxsYmFja01hcCA9IG5ldyBXZWFrTWFwKCk7XG4vKipcbiAqIFN0b3JlIGEgY2FsbGJhY2sgZm9yIGEgbWV0aG9kIG9yIGV2ZW50IGZvciBhIHBsYXllci5cbiAqXG4gKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyIFRoZSBwbGF5ZXIgb2JqZWN0LlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG1ldGhvZCBvciBldmVudCBuYW1lLlxuICogQHBhcmFtIHsoZnVuY3Rpb24odGhpczpQbGF5ZXIsICopOiB2b2lkfHtyZXNvbHZlOiBmdW5jdGlvbiwgcmVqZWN0OiBmdW5jdGlvbn0pfSBjYWxsYmFja1xuICogICAgICAgIFRoZSBjYWxsYmFjayB0byBjYWxsIG9yIGFuIG9iamVjdCB3aXRoIHJlc29sdmUgYW5kIHJlamVjdCBmdW5jdGlvbnMgZm9yIGEgcHJvbWlzZS5cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cblxuZnVuY3Rpb24gc3RvcmVDYWxsYmFjayhwbGF5ZXIsIG5hbWUsIGNhbGxiYWNrKSB7XG4gIHZhciBwbGF5ZXJDYWxsYmFja3MgPSBjYWxsYmFja01hcC5nZXQocGxheWVyLmVsZW1lbnQpIHx8IHt9O1xuXG4gIGlmICghKG5hbWUgaW4gcGxheWVyQ2FsbGJhY2tzKSkge1xuICAgIHBsYXllckNhbGxiYWNrc1tuYW1lXSA9IFtdO1xuICB9XG5cbiAgcGxheWVyQ2FsbGJhY2tzW25hbWVdLnB1c2goY2FsbGJhY2spO1xuICBjYWxsYmFja01hcC5zZXQocGxheWVyLmVsZW1lbnQsIHBsYXllckNhbGxiYWNrcyk7XG59XG4vKipcbiAqIEdldCB0aGUgY2FsbGJhY2tzIGZvciBhIHBsYXllciBhbmQgZXZlbnQgb3IgbWV0aG9kLlxuICpcbiAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXIgVGhlIHBsYXllciBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbWV0aG9kIG9yIGV2ZW50IG5hbWVcbiAqIEByZXR1cm4ge2Z1bmN0aW9uW119XG4gKi9cblxuZnVuY3Rpb24gZ2V0Q2FsbGJhY2tzKHBsYXllciwgbmFtZSkge1xuICB2YXIgcGxheWVyQ2FsbGJhY2tzID0gY2FsbGJhY2tNYXAuZ2V0KHBsYXllci5lbGVtZW50KSB8fCB7fTtcbiAgcmV0dXJuIHBsYXllckNhbGxiYWNrc1tuYW1lXSB8fCBbXTtcbn1cbi8qKlxuICogUmVtb3ZlIGEgc3RvcmVkIGNhbGxiYWNrIGZvciBhIG1ldGhvZCBvciBldmVudCBmb3IgYSBwbGF5ZXIuXG4gKlxuICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllciBUaGUgcGxheWVyIG9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBtZXRob2Qgb3IgZXZlbnQgbmFtZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSBUaGUgc3BlY2lmaWMgY2FsbGJhY2sgdG8gcmVtb3ZlLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2FzIHRoaXMgdGhlIGxhc3QgY2FsbGJhY2s/XG4gKi9cblxuZnVuY3Rpb24gcmVtb3ZlQ2FsbGJhY2socGxheWVyLCBuYW1lLCBjYWxsYmFjaykge1xuICB2YXIgcGxheWVyQ2FsbGJhY2tzID0gY2FsbGJhY2tNYXAuZ2V0KHBsYXllci5lbGVtZW50KSB8fCB7fTtcblxuICBpZiAoIXBsYXllckNhbGxiYWNrc1tuYW1lXSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIElmIG5vIGNhbGxiYWNrIGlzIHBhc3NlZCwgcmVtb3ZlIGFsbCBjYWxsYmFja3MgZm9yIHRoZSBldmVudFxuXG5cbiAgaWYgKCFjYWxsYmFjaykge1xuICAgIHBsYXllckNhbGxiYWNrc1tuYW1lXSA9IFtdO1xuICAgIGNhbGxiYWNrTWFwLnNldChwbGF5ZXIuZWxlbWVudCwgcGxheWVyQ2FsbGJhY2tzKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciBpbmRleCA9IHBsYXllckNhbGxiYWNrc1tuYW1lXS5pbmRleE9mKGNhbGxiYWNrKTtcblxuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgcGxheWVyQ2FsbGJhY2tzW25hbWVdLnNwbGljZShpbmRleCwgMSk7XG4gIH1cblxuICBjYWxsYmFja01hcC5zZXQocGxheWVyLmVsZW1lbnQsIHBsYXllckNhbGxiYWNrcyk7XG4gIHJldHVybiBwbGF5ZXJDYWxsYmFja3NbbmFtZV0gJiYgcGxheWVyQ2FsbGJhY2tzW25hbWVdLmxlbmd0aCA9PT0gMDtcbn1cbi8qKlxuICogUmV0dXJuIHRoZSBmaXJzdCBzdG9yZWQgY2FsbGJhY2sgZm9yIGEgcGxheWVyIGFuZCBldmVudCBvciBtZXRob2QuXG4gKlxuICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllciBUaGUgcGxheWVyIG9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBtZXRob2Qgb3IgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSBUaGUgY2FsbGJhY2ssIG9yIGZhbHNlIGlmIHRoZXJlIHdlcmUgbm9uZVxuICovXG5cbmZ1bmN0aW9uIHNoaWZ0Q2FsbGJhY2tzKHBsYXllciwgbmFtZSkge1xuICB2YXIgcGxheWVyQ2FsbGJhY2tzID0gZ2V0Q2FsbGJhY2tzKHBsYXllciwgbmFtZSk7XG5cbiAgaWYgKHBsYXllckNhbGxiYWNrcy5sZW5ndGggPCAxKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGNhbGxiYWNrID0gcGxheWVyQ2FsbGJhY2tzLnNoaWZ0KCk7XG4gIHJlbW92ZUNhbGxiYWNrKHBsYXllciwgbmFtZSwgY2FsbGJhY2spO1xuICByZXR1cm4gY2FsbGJhY2s7XG59XG4vKipcbiAqIE1vdmUgY2FsbGJhY2tzIGFzc29jaWF0ZWQgd2l0aCBhbiBlbGVtZW50IHRvIGFub3RoZXIgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBvbGRFbGVtZW50IFRoZSBvbGQgZWxlbWVudC5cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5ld0VsZW1lbnQgVGhlIG5ldyBlbGVtZW50LlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuXG5mdW5jdGlvbiBzd2FwQ2FsbGJhY2tzKG9sZEVsZW1lbnQsIG5ld0VsZW1lbnQpIHtcbiAgdmFyIHBsYXllckNhbGxiYWNrcyA9IGNhbGxiYWNrTWFwLmdldChvbGRFbGVtZW50KTtcbiAgY2FsbGJhY2tNYXAuc2V0KG5ld0VsZW1lbnQsIHBsYXllckNhbGxiYWNrcyk7XG4gIGNhbGxiYWNrTWFwLmRlbGV0ZShvbGRFbGVtZW50KTtcbn1cblxuLyoqXG4gKiBAbW9kdWxlIGxpYi9lbWJlZFxuICovXG52YXIgb0VtYmVkUGFyYW1ldGVycyA9IFsnYXV0b3BhdXNlJywgJ2F1dG9wbGF5JywgJ2JhY2tncm91bmQnLCAnYnlsaW5lJywgJ2NvbG9yJywgJ2NvbnRyb2xzJywgJ2RudCcsICdoZWlnaHQnLCAnaWQnLCAnaW50ZXJhY3RpdmVfcGFyYW1zJywgJ2tleWJvYXJkJywgJ2xvb3AnLCAnbWF4aGVpZ2h0JywgJ21heHdpZHRoJywgJ211dGVkJywgJ3BsYXlzaW5saW5lJywgJ3BvcnRyYWl0JywgJ3Jlc3BvbnNpdmUnLCAnc3BlZWQnLCAndGV4dHRyYWNrJywgJ3RpdGxlJywgJ3RyYW5zcGFyZW50JywgJ3VybCcsICd3aWR0aCddO1xuLyoqXG4gKiBHZXQgdGhlICdkYXRhLXZpbWVvJy1wcmVmaXhlZCBhdHRyaWJ1dGVzIGZyb20gYW4gZWxlbWVudCBhcyBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbZGVmYXVsdHM9e31dIFRoZSBkZWZhdWx0IHZhbHVlcyB0byB1c2UuXG4gKiBAcmV0dXJuIHtPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fVxuICovXG5cbmZ1bmN0aW9uIGdldE9FbWJlZFBhcmFtZXRlcnMoZWxlbWVudCkge1xuICB2YXIgZGVmYXVsdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICByZXR1cm4gb0VtYmVkUGFyYW1ldGVycy5yZWR1Y2UoZnVuY3Rpb24gKHBhcmFtcywgcGFyYW0pIHtcbiAgICB2YXIgdmFsdWUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtdmltZW8tXCIuY29uY2F0KHBhcmFtKSk7XG5cbiAgICBpZiAodmFsdWUgfHwgdmFsdWUgPT09ICcnKSB7XG4gICAgICBwYXJhbXNbcGFyYW1dID0gdmFsdWUgPT09ICcnID8gMSA6IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJhbXM7XG4gIH0sIGRlZmF1bHRzKTtcbn1cbi8qKlxuICogQ3JlYXRlIGFuIGVtYmVkIGZyb20gb0VtYmVkIGRhdGEgaW5zaWRlIGFuIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGRhdGEgVGhlIG9FbWJlZCBkYXRhLlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBwdXQgdGhlIGlmcmFtZSBpbi5cbiAqIEByZXR1cm4ge0hUTUxJRnJhbWVFbGVtZW50fSBUaGUgaWZyYW1lIGVtYmVkLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUVtYmVkKF9yZWYsIGVsZW1lbnQpIHtcbiAgdmFyIGh0bWwgPSBfcmVmLmh0bWw7XG5cbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQW4gZWxlbWVudCBtdXN0IGJlIHByb3ZpZGVkJyk7XG4gIH1cblxuICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmltZW8taW5pdGlhbGl6ZWQnKSAhPT0gbnVsbCkge1xuICAgIHJldHVybiBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lmcmFtZScpO1xuICB9XG5cbiAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuaW5uZXJIVE1MID0gaHRtbDtcbiAgZWxlbWVudC5hcHBlbmRDaGlsZChkaXYuZmlyc3RDaGlsZCk7XG4gIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXZpbWVvLWluaXRpYWxpemVkJywgJ3RydWUnKTtcbiAgcmV0dXJuIGVsZW1lbnQucXVlcnlTZWxlY3RvcignaWZyYW1lJyk7XG59XG4vKipcbiAqIE1ha2UgYW4gb0VtYmVkIGNhbGwgZm9yIHRoZSBzcGVjaWZpZWQgVVJMLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2aWRlb1VybCBUaGUgdmltZW8uY29tIHVybCBmb3IgdGhlIHZpZGVvLlxuICogQHBhcmFtIHtPYmplY3R9IFtwYXJhbXNdIFBhcmFtZXRlcnMgdG8gcGFzcyB0byBvRW1iZWQuXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50LlxuICogQHJldHVybiB7UHJvbWlzZX1cbiAqL1xuXG5mdW5jdGlvbiBnZXRPRW1iZWREYXRhKHZpZGVvVXJsKSB7XG4gIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgZWxlbWVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGlmICghaXNWaW1lb1VybCh2aWRlb1VybCkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJcXHUyMDFDXCIuY29uY2F0KHZpZGVvVXJsLCBcIlxcdTIwMUQgaXMgbm90IGEgdmltZW8uY29tIHVybC5cIikpO1xuICAgIH1cblxuICAgIHZhciB1cmwgPSBcImh0dHBzOi8vdmltZW8uY29tL2FwaS9vZW1iZWQuanNvbj91cmw9XCIuY29uY2F0KGVuY29kZVVSSUNvbXBvbmVudCh2aWRlb1VybCkpO1xuXG4gICAgZm9yICh2YXIgcGFyYW0gaW4gcGFyYW1zKSB7XG4gICAgICBpZiAocGFyYW1zLmhhc093blByb3BlcnR5KHBhcmFtKSkge1xuICAgICAgICB1cmwgKz0gXCImXCIuY29uY2F0KHBhcmFtLCBcIj1cIikuY29uY2F0KGVuY29kZVVSSUNvbXBvbmVudChwYXJhbXNbcGFyYW1dKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHhociA9ICdYRG9tYWluUmVxdWVzdCcgaW4gd2luZG93ID8gbmV3IFhEb21haW5SZXF1ZXN0KCkgOiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4aHIub3BlbignR0VUJywgdXJsLCB0cnVlKTtcblxuICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gNDA0KSB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJcXHUyMDFDXCIuY29uY2F0KHZpZGVvVXJsLCBcIlxcdTIwMUQgd2FzIG5vdCBmb3VuZC5cIikpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gNDAzKSB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJcXHUyMDFDXCIuY29uY2F0KHZpZGVvVXJsLCBcIlxcdTIwMUQgaXMgbm90IGVtYmVkZGFibGUuXCIpKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGpzb24gPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpOyAvLyBDaGVjayBhcGkgcmVzcG9uc2UgZm9yIDQwMyBvbiBvZW1iZWRcblxuICAgICAgICBpZiAoanNvbi5kb21haW5fc3RhdHVzX2NvZGUgPT09IDQwMykge1xuICAgICAgICAgIC8vIFdlIHN0aWxsIHdhbnQgdG8gY3JlYXRlIHRoZSBlbWJlZCB0byBnaXZlIHVzZXJzIHZpc3VhbCBmZWVkYmFja1xuICAgICAgICAgIGNyZWF0ZUVtYmVkKGpzb24sIGVsZW1lbnQpO1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJcXHUyMDFDXCIuY29uY2F0KHZpZGVvVXJsLCBcIlxcdTIwMUQgaXMgbm90IGVtYmVkZGFibGUuXCIpKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzb2x2ZShqc29uKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0YXR1cyA9IHhoci5zdGF0dXMgPyBcIiAoXCIuY29uY2F0KHhoci5zdGF0dXMsIFwiKVwiKSA6ICcnO1xuICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIlRoZXJlIHdhcyBhbiBlcnJvciBmZXRjaGluZyB0aGUgZW1iZWQgY29kZSBmcm9tIFZpbWVvXCIuY29uY2F0KHN0YXR1cywgXCIuXCIpKSk7XG4gICAgfTtcblxuICAgIHhoci5zZW5kKCk7XG4gIH0pO1xufVxuLyoqXG4gKiBJbml0aWFsaXplIGFsbCBlbWJlZHMgd2l0aGluIGEgc3BlY2lmaWMgZWxlbWVudFxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IFtwYXJlbnQ9ZG9jdW1lbnRdIFRoZSBwYXJlbnQgZWxlbWVudC5cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cblxuZnVuY3Rpb24gaW5pdGlhbGl6ZUVtYmVkcygpIHtcbiAgdmFyIHBhcmVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZG9jdW1lbnQ7XG4gIHZhciBlbGVtZW50cyA9IFtdLnNsaWNlLmNhbGwocGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXZpbWVvLWlkXSwgW2RhdGEtdmltZW8tdXJsXScpKTtcblxuICB2YXIgaGFuZGxlRXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcihlcnJvcikge1xuICAgIGlmICgnY29uc29sZScgaW4gd2luZG93ICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGVyZSB3YXMgYW4gZXJyb3IgY3JlYXRpbmcgYW4gZW1iZWQ6IFwiLmNvbmNhdChlcnJvcikpO1xuICAgIH1cbiAgfTtcblxuICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFNraXAgYW55IHRoYXQgaGF2ZSBkYXRhLXZpbWVvLWRlZmVyXG4gICAgICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmltZW8tZGVmZXInKSAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJhbXMgPSBnZXRPRW1iZWRQYXJhbWV0ZXJzKGVsZW1lbnQpO1xuICAgICAgdmFyIHVybCA9IGdldFZpbWVvVXJsKHBhcmFtcyk7XG4gICAgICBnZXRPRW1iZWREYXRhKHVybCwgcGFyYW1zLCBlbGVtZW50KS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVFbWJlZChkYXRhLCBlbGVtZW50KTtcbiAgICAgIH0pLmNhdGNoKGhhbmRsZUVycm9yKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFJlc2l6ZSBlbWJlZHMgd2hlbiBtZXNzYWdlZCBieSB0aGUgcGxheWVyLlxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IFtwYXJlbnQ9ZG9jdW1lbnRdIFRoZSBwYXJlbnQgZWxlbWVudC5cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cblxuZnVuY3Rpb24gcmVzaXplRW1iZWRzKCkge1xuICB2YXIgcGFyZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBkb2N1bWVudDtcblxuICAvLyBQcmV2ZW50IGV4ZWN1dGlvbiBpZiB1c2VycyBpbmNsdWRlIHRoZSBwbGF5ZXIuanMgc2NyaXB0IG11bHRpcGxlIHRpbWVzLlxuICBpZiAod2luZG93LlZpbWVvUGxheWVyUmVzaXplRW1iZWRzXykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHdpbmRvdy5WaW1lb1BsYXllclJlc2l6ZUVtYmVkc18gPSB0cnVlO1xuXG4gIHZhciBvbk1lc3NhZ2UgPSBmdW5jdGlvbiBvbk1lc3NhZ2UoZXZlbnQpIHtcbiAgICBpZiAoIWlzVmltZW9VcmwoZXZlbnQub3JpZ2luKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gJ3NwYWNlY2hhbmdlJyBpcyBmaXJlZCBvbmx5IG9uIGVtYmVkcyB3aXRoIGNhcmRzXG5cblxuICAgIGlmICghZXZlbnQuZGF0YSB8fCBldmVudC5kYXRhLmV2ZW50ICE9PSAnc3BhY2VjaGFuZ2UnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGlmcmFtZXMgPSBwYXJlbnQucXVlcnlTZWxlY3RvckFsbCgnaWZyYW1lJyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlmcmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChpZnJhbWVzW2ldLmNvbnRlbnRXaW5kb3cgIT09IGV2ZW50LnNvdXJjZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gLy8gQ2hhbmdlIHBhZGRpbmctYm90dG9tIG9mIHRoZSBlbmNsb3NpbmcgZGl2IHRvIGFjY29tbW9kYXRlXG4gICAgICAvLyBjYXJkIGNhcm91c2VsIHdpdGhvdXQgZGlzdG9ydGluZyBhc3BlY3QgcmF0aW9cblxuXG4gICAgICB2YXIgc3BhY2UgPSBpZnJhbWVzW2ldLnBhcmVudEVsZW1lbnQ7XG4gICAgICBzcGFjZS5zdHlsZS5wYWRkaW5nQm90dG9tID0gXCJcIi5jb25jYXQoZXZlbnQuZGF0YS5kYXRhWzBdLmJvdHRvbSwgXCJweFwiKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfTtcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIG9uTWVzc2FnZSk7XG59XG5cbi8qKlxuICogQG1vZHVsZSBsaWIvcG9zdG1lc3NhZ2VcbiAqL1xuLyoqXG4gKiBQYXJzZSBhIG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBwb3N0TWVzc2FnZS5cbiAqXG4gKiBAcGFyYW0geyp9IGRhdGEgVGhlIGRhdGEgcmVjZWl2ZWQgZnJvbSBwb3N0TWVzc2FnZS5cbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBwYXJzZU1lc3NhZ2VEYXRhKGRhdGEpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIHRyeSB7XG4gICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gSWYgdGhlIG1lc3NhZ2UgY2Fubm90IGJlIHBhcnNlZCwgdGhyb3cgdGhlIGVycm9yIGFzIGEgd2FybmluZ1xuICAgICAgY29uc29sZS53YXJuKGVycm9yKTtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cbi8qKlxuICogUG9zdCBhIG1lc3NhZ2UgdG8gdGhlIHNwZWNpZmllZCB0YXJnZXQuXG4gKlxuICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllciBUaGUgcGxheWVyIG9iamVjdCB0byB1c2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kIFRoZSBBUEkgbWV0aG9kIHRvIGNhbGwuXG4gKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zIFRoZSBwYXJhbWV0ZXJzIHRvIHNlbmQgdG8gdGhlIHBsYXllci5cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cblxuZnVuY3Rpb24gcG9zdE1lc3NhZ2UocGxheWVyLCBtZXRob2QsIHBhcmFtcykge1xuICBpZiAoIXBsYXllci5lbGVtZW50LmNvbnRlbnRXaW5kb3cgfHwgIXBsYXllci5lbGVtZW50LmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2UpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbWVzc2FnZSA9IHtcbiAgICBtZXRob2Q6IG1ldGhvZFxuICB9O1xuXG4gIGlmIChwYXJhbXMgIT09IHVuZGVmaW5lZCkge1xuICAgIG1lc3NhZ2UudmFsdWUgPSBwYXJhbXM7XG4gIH0gLy8gSUUgOCBhbmQgOSBkbyBub3Qgc3VwcG9ydCBwYXNzaW5nIG1lc3NhZ2VzLCBzbyBzdHJpbmdpZnkgdGhlbVxuXG5cbiAgdmFyIGllVmVyc2lvbiA9IHBhcnNlRmxvYXQobmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL14uKm1zaWUgKFxcZCspLiokLywgJyQxJykpO1xuXG4gIGlmIChpZVZlcnNpb24gPj0gOCAmJiBpZVZlcnNpb24gPCAxMCkge1xuICAgIG1lc3NhZ2UgPSBKU09OLnN0cmluZ2lmeShtZXNzYWdlKTtcbiAgfVxuXG4gIHBsYXllci5lbGVtZW50LmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2UobWVzc2FnZSwgcGxheWVyLm9yaWdpbik7XG59XG4vKipcbiAqIFBhcnNlIHRoZSBkYXRhIHJlY2VpdmVkIGZyb20gYSBtZXNzYWdlIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7UGxheWVyfSBwbGF5ZXIgVGhlIHBsYXllciB0aGF0IHJlY2VpdmVkIHRoZSBtZXNzYWdlLlxuICogQHBhcmFtIHsoT2JqZWN0fHN0cmluZyl9IGRhdGEgVGhlIG1lc3NhZ2UgZGF0YS4gU3RyaW5ncyB3aWxsIGJlIHBhcnNlZCBpbnRvIEpTT04uXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5cbmZ1bmN0aW9uIHByb2Nlc3NEYXRhKHBsYXllciwgZGF0YSkge1xuICBkYXRhID0gcGFyc2VNZXNzYWdlRGF0YShkYXRhKTtcbiAgdmFyIGNhbGxiYWNrcyA9IFtdO1xuICB2YXIgcGFyYW07XG5cbiAgaWYgKGRhdGEuZXZlbnQpIHtcbiAgICBpZiAoZGF0YS5ldmVudCA9PT0gJ2Vycm9yJykge1xuICAgICAgdmFyIHByb21pc2VzID0gZ2V0Q2FsbGJhY2tzKHBsYXllciwgZGF0YS5kYXRhLm1ldGhvZCk7XG4gICAgICBwcm9taXNlcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihkYXRhLmRhdGEubWVzc2FnZSk7XG4gICAgICAgIGVycm9yLm5hbWUgPSBkYXRhLmRhdGEubmFtZTtcbiAgICAgICAgcHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICByZW1vdmVDYWxsYmFjayhwbGF5ZXIsIGRhdGEuZGF0YS5tZXRob2QsIHByb21pc2UpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2FsbGJhY2tzID0gZ2V0Q2FsbGJhY2tzKHBsYXllciwgXCJldmVudDpcIi5jb25jYXQoZGF0YS5ldmVudCkpO1xuICAgIHBhcmFtID0gZGF0YS5kYXRhO1xuICB9IGVsc2UgaWYgKGRhdGEubWV0aG9kKSB7XG4gICAgdmFyIGNhbGxiYWNrID0gc2hpZnRDYWxsYmFja3MocGxheWVyLCBkYXRhLm1ldGhvZCk7XG5cbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgIHBhcmFtID0gZGF0YS52YWx1ZTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB0cnkge1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYWxsYmFjay5jYWxsKHBsYXllciwgcGFyYW0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrLnJlc29sdmUocGFyYW0pO1xuICAgIH0gY2F0Y2ggKGUpIHsvLyBlbXB0eVxuICAgIH1cbiAgfSk7XG59XG5cbi8qIE1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgU2luZHJlIFNvcmh1cyA8c2luZHJlc29yaHVzQGdtYWlsLmNvbT4gKHNpbmRyZXNvcmh1cy5jb20pXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblRlcm1zICovXG5mdW5jdGlvbiBpbml0aWFsaXplU2NyZWVuZnVsbCgpIHtcbiAgdmFyIGZuID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWw7XG4gICAgdmFyIGZuTWFwID0gW1sncmVxdWVzdEZ1bGxzY3JlZW4nLCAnZXhpdEZ1bGxzY3JlZW4nLCAnZnVsbHNjcmVlbkVsZW1lbnQnLCAnZnVsbHNjcmVlbkVuYWJsZWQnLCAnZnVsbHNjcmVlbmNoYW5nZScsICdmdWxsc2NyZWVuZXJyb3InXSwgLy8gTmV3IFdlYktpdFxuICAgIFsnd2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4nLCAnd2Via2l0RXhpdEZ1bGxzY3JlZW4nLCAnd2Via2l0RnVsbHNjcmVlbkVsZW1lbnQnLCAnd2Via2l0RnVsbHNjcmVlbkVuYWJsZWQnLCAnd2Via2l0ZnVsbHNjcmVlbmNoYW5nZScsICd3ZWJraXRmdWxsc2NyZWVuZXJyb3InXSwgLy8gT2xkIFdlYktpdFxuICAgIFsnd2Via2l0UmVxdWVzdEZ1bGxTY3JlZW4nLCAnd2Via2l0Q2FuY2VsRnVsbFNjcmVlbicsICd3ZWJraXRDdXJyZW50RnVsbFNjcmVlbkVsZW1lbnQnLCAnd2Via2l0Q2FuY2VsRnVsbFNjcmVlbicsICd3ZWJraXRmdWxsc2NyZWVuY2hhbmdlJywgJ3dlYmtpdGZ1bGxzY3JlZW5lcnJvciddLCBbJ21velJlcXVlc3RGdWxsU2NyZWVuJywgJ21vekNhbmNlbEZ1bGxTY3JlZW4nLCAnbW96RnVsbFNjcmVlbkVsZW1lbnQnLCAnbW96RnVsbFNjcmVlbkVuYWJsZWQnLCAnbW96ZnVsbHNjcmVlbmNoYW5nZScsICdtb3pmdWxsc2NyZWVuZXJyb3InXSwgWydtc1JlcXVlc3RGdWxsc2NyZWVuJywgJ21zRXhpdEZ1bGxzY3JlZW4nLCAnbXNGdWxsc2NyZWVuRWxlbWVudCcsICdtc0Z1bGxzY3JlZW5FbmFibGVkJywgJ01TRnVsbHNjcmVlbkNoYW5nZScsICdNU0Z1bGxzY3JlZW5FcnJvciddXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGwgPSBmbk1hcC5sZW5ndGg7XG4gICAgdmFyIHJldCA9IHt9O1xuXG4gICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhbCA9IGZuTWFwW2ldO1xuXG4gICAgICBpZiAodmFsICYmIHZhbFsxXSBpbiBkb2N1bWVudCkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdmFsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgcmV0W2ZuTWFwWzBdW2ldXSA9IHZhbFtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KCk7XG5cbiAgdmFyIGV2ZW50TmFtZU1hcCA9IHtcbiAgICBmdWxsc2NyZWVuY2hhbmdlOiBmbi5mdWxsc2NyZWVuY2hhbmdlLFxuICAgIGZ1bGxzY3JlZW5lcnJvcjogZm4uZnVsbHNjcmVlbmVycm9yXG4gIH07XG4gIHZhciBzY3JlZW5mdWxsID0ge1xuICAgIHJlcXVlc3Q6IGZ1bmN0aW9uIHJlcXVlc3QoZWxlbWVudCkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIG9uRnVsbFNjcmVlbkVudGVyZWQgPSBmdW5jdGlvbiBvbkZ1bGxTY3JlZW5FbnRlcmVkKCkge1xuICAgICAgICAgIHNjcmVlbmZ1bGwub2ZmKCdmdWxsc2NyZWVuY2hhbmdlJywgb25GdWxsU2NyZWVuRW50ZXJlZCk7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNjcmVlbmZ1bGwub24oJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBvbkZ1bGxTY3JlZW5FbnRlcmVkKTtcbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICB2YXIgcmV0dXJuUHJvbWlzZSA9IGVsZW1lbnRbZm4ucmVxdWVzdEZ1bGxzY3JlZW5dKCk7XG5cbiAgICAgICAgaWYgKHJldHVyblByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgcmV0dXJuUHJvbWlzZS50aGVuKG9uRnVsbFNjcmVlbkVudGVyZWQpLmNhdGNoKHJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZXhpdDogZnVuY3Rpb24gZXhpdCgpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGlmICghc2NyZWVuZnVsbC5pc0Z1bGxzY3JlZW4pIHtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9uRnVsbFNjcmVlbkV4aXQgPSBmdW5jdGlvbiBvbkZ1bGxTY3JlZW5FeGl0KCkge1xuICAgICAgICAgIHNjcmVlbmZ1bGwub2ZmKCdmdWxsc2NyZWVuY2hhbmdlJywgb25GdWxsU2NyZWVuRXhpdCk7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNjcmVlbmZ1bGwub24oJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBvbkZ1bGxTY3JlZW5FeGl0KTtcbiAgICAgICAgdmFyIHJldHVyblByb21pc2UgPSBkb2N1bWVudFtmbi5leGl0RnVsbHNjcmVlbl0oKTtcblxuICAgICAgICBpZiAocmV0dXJuUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICByZXR1cm5Qcm9taXNlLnRoZW4ob25GdWxsU2NyZWVuRXhpdCkuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjogZnVuY3Rpb24gb24oZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgZXZlbnROYW1lID0gZXZlbnROYW1lTWFwW2V2ZW50XTtcblxuICAgICAgaWYgKGV2ZW50TmFtZSkge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgb2ZmOiBmdW5jdGlvbiBvZmYoZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgZXZlbnROYW1lID0gZXZlbnROYW1lTWFwW2V2ZW50XTtcblxuICAgICAgaWYgKGV2ZW50TmFtZSkge1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc2NyZWVuZnVsbCwge1xuICAgIGlzRnVsbHNjcmVlbjoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKGRvY3VtZW50W2ZuLmZ1bGxzY3JlZW5FbGVtZW50XSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBlbGVtZW50OiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudFtmbi5mdWxsc2NyZWVuRWxlbWVudF07XG4gICAgICB9XG4gICAgfSxcbiAgICBpc0VuYWJsZWQ6IHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgLy8gQ29lcmNlIHRvIGJvb2xlYW4gaW4gY2FzZSBvZiBvbGQgV2ViS2l0XG4gICAgICAgIHJldHVybiBCb29sZWFuKGRvY3VtZW50W2ZuLmZ1bGxzY3JlZW5FbmFibGVkXSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHNjcmVlbmZ1bGw7XG59XG5cbnZhciBwbGF5ZXJNYXAgPSBuZXcgV2Vha01hcCgpO1xudmFyIHJlYWR5TWFwID0gbmV3IFdlYWtNYXAoKTtcbnZhciBzY3JlZW5mdWxsID0ge307XG5cbnZhciBQbGF5ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ3JlYXRlIGEgUGxheWVyLlxuICAgKlxuICAgKiBAcGFyYW0geyhIVE1MSUZyYW1lRWxlbWVudHxIVE1MRWxlbWVudHxzdHJpbmd8alF1ZXJ5KX0gZWxlbWVudCBBIHJlZmVyZW5jZSB0byB0aGUgVmltZW9cbiAgICogICAgICAgIHBsYXllciBpZnJhbWUsIGFuZCBpZCwgb3IgYSBqUXVlcnkgb2JqZWN0LlxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIG9FbWJlZCBwYXJhbWV0ZXJzIHRvIHVzZSB3aGVuIGNyZWF0aW5nIGFuIGVtYmVkIGluIHRoZSBlbGVtZW50LlxuICAgKiBAcmV0dXJuIHtQbGF5ZXJ9XG4gICAqL1xuICBmdW5jdGlvbiBQbGF5ZXIoZWxlbWVudCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGxheWVyKTtcblxuICAgIC8qIGdsb2JhbCBqUXVlcnkgKi9cbiAgICBpZiAod2luZG93LmpRdWVyeSAmJiBlbGVtZW50IGluc3RhbmNlb2YgalF1ZXJ5KSB7XG4gICAgICBpZiAoZWxlbWVudC5sZW5ndGggPiAxICYmIHdpbmRvdy5jb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0EgalF1ZXJ5IG9iamVjdCB3aXRoIG11bHRpcGxlIGVsZW1lbnRzIHdhcyBwYXNzZWQsIHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50LicpO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50ID0gZWxlbWVudFswXTtcbiAgICB9IC8vIEZpbmQgYW4gZWxlbWVudCBieSBJRFxuXG5cbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50KTtcbiAgICB9IC8vIE5vdCBhbiBlbGVtZW50IVxuXG5cbiAgICBpZiAoIWlzRG9tRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignWW91IG11c3QgcGFzcyBlaXRoZXIgYSB2YWxpZCBlbGVtZW50IG9yIGEgdmFsaWQgaWQuJyk7XG4gICAgfSAvLyBBbHJlYWR5IGluaXRpYWxpemVkIGFuIGVtYmVkIGluIHRoaXMgZGl2LCBzbyBncmFiIHRoZSBpZnJhbWVcblxuXG4gICAgaWYgKGVsZW1lbnQubm9kZU5hbWUgIT09ICdJRlJBTUUnKSB7XG4gICAgICB2YXIgaWZyYW1lID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpZnJhbWUnKTtcblxuICAgICAgaWYgKGlmcmFtZSkge1xuICAgICAgICBlbGVtZW50ID0gaWZyYW1lO1xuICAgICAgfVxuICAgIH0gLy8gaWZyYW1lIHVybCBpcyBub3QgYSBWaW1lbyB1cmxcblxuXG4gICAgaWYgKGVsZW1lbnQubm9kZU5hbWUgPT09ICdJRlJBTUUnICYmICFpc1ZpbWVvVXJsKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdzcmMnKSB8fCAnJykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHBsYXllciBlbGVtZW50IHBhc3NlZCBpc27igJl0IGEgVmltZW8gZW1iZWQuJyk7XG4gICAgfSAvLyBJZiB0aGVyZSBpcyBhbHJlYWR5IGEgcGxheWVyIG9iamVjdCBpbiB0aGUgbWFwLCByZXR1cm4gdGhhdFxuXG5cbiAgICBpZiAocGxheWVyTWFwLmhhcyhlbGVtZW50KSkge1xuICAgICAgcmV0dXJuIHBsYXllck1hcC5nZXQoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgdGhpcy5fd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcmlnaW4gPSAnKic7XG4gICAgdmFyIHJlYWR5UHJvbWlzZSA9IG5ldyBucG9fc3JjKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIF90aGlzLl9vbk1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKCFpc1ZpbWVvVXJsKGV2ZW50Lm9yaWdpbikgfHwgX3RoaXMuZWxlbWVudC5jb250ZW50V2luZG93ICE9PSBldmVudC5zb3VyY2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3RoaXMub3JpZ2luID09PSAnKicpIHtcbiAgICAgICAgICBfdGhpcy5vcmlnaW4gPSBldmVudC5vcmlnaW47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGF0YSA9IHBhcnNlTWVzc2FnZURhdGEoZXZlbnQuZGF0YSk7XG4gICAgICAgIHZhciBpc0Vycm9yID0gZGF0YSAmJiBkYXRhLmV2ZW50ID09PSAnZXJyb3InO1xuICAgICAgICB2YXIgaXNSZWFkeUVycm9yID0gaXNFcnJvciAmJiBkYXRhLmRhdGEgJiYgZGF0YS5kYXRhLm1ldGhvZCA9PT0gJ3JlYWR5JztcblxuICAgICAgICBpZiAoaXNSZWFkeUVycm9yKSB7XG4gICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKGRhdGEuZGF0YS5tZXNzYWdlKTtcbiAgICAgICAgICBlcnJvci5uYW1lID0gZGF0YS5kYXRhLm5hbWU7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaXNSZWFkeUV2ZW50ID0gZGF0YSAmJiBkYXRhLmV2ZW50ID09PSAncmVhZHknO1xuICAgICAgICB2YXIgaXNQaW5nUmVzcG9uc2UgPSBkYXRhICYmIGRhdGEubWV0aG9kID09PSAncGluZyc7XG5cbiAgICAgICAgaWYgKGlzUmVhZHlFdmVudCB8fCBpc1BpbmdSZXNwb25zZSkge1xuICAgICAgICAgIF90aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXJlYWR5JywgJ3RydWUnKTtcblxuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBwcm9jZXNzRGF0YShfdGhpcywgZGF0YSk7XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBfdGhpcy5fb25NZXNzYWdlKTtcblxuICAgICAgaWYgKF90aGlzLmVsZW1lbnQubm9kZU5hbWUgIT09ICdJRlJBTUUnKSB7XG4gICAgICAgIHZhciBwYXJhbXMgPSBnZXRPRW1iZWRQYXJhbWV0ZXJzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICB2YXIgdXJsID0gZ2V0VmltZW9VcmwocGFyYW1zKTtcbiAgICAgICAgZ2V0T0VtYmVkRGF0YSh1cmwsIHBhcmFtcywgZWxlbWVudCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIHZhciBpZnJhbWUgPSBjcmVhdGVFbWJlZChkYXRhLCBlbGVtZW50KTsgLy8gT3ZlcndyaXRlIGVsZW1lbnQgd2l0aCB0aGUgbmV3IGlmcmFtZSxcbiAgICAgICAgICAvLyBidXQgc3RvcmUgcmVmZXJlbmNlIHRvIHRoZSBvcmlnaW5hbCBlbGVtZW50XG5cbiAgICAgICAgICBfdGhpcy5lbGVtZW50ID0gaWZyYW1lO1xuICAgICAgICAgIF90aGlzLl9vcmlnaW5hbEVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICAgIHN3YXBDYWxsYmFja3MoZWxlbWVudCwgaWZyYW1lKTtcbiAgICAgICAgICBwbGF5ZXJNYXAuc2V0KF90aGlzLmVsZW1lbnQsIF90aGlzKTtcbiAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSkuY2F0Y2gocmVqZWN0KTtcbiAgICAgIH1cbiAgICB9KTsgLy8gU3RvcmUgYSBjb3B5IG9mIHRoaXMgUGxheWVyIGluIHRoZSBtYXBcblxuICAgIHJlYWR5TWFwLnNldCh0aGlzLCByZWFkeVByb21pc2UpO1xuICAgIHBsYXllck1hcC5zZXQodGhpcy5lbGVtZW50LCB0aGlzKTsgLy8gU2VuZCBhIHBpbmcgdG8gdGhlIGlmcmFtZSBzbyB0aGUgcmVhZHkgcHJvbWlzZSB3aWxsIGJlIHJlc29sdmVkIGlmXG4gICAgLy8gdGhlIHBsYXllciBpcyBhbHJlYWR5IHJlYWR5LlxuXG4gICAgaWYgKHRoaXMuZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0lGUkFNRScpIHtcbiAgICAgIHBvc3RNZXNzYWdlKHRoaXMsICdwaW5nJyk7XG4gICAgfVxuXG4gICAgaWYgKHNjcmVlbmZ1bGwuaXNFbmFibGVkKSB7XG4gICAgICB2YXIgZXhpdEZ1bGxzY3JlZW4gPSBmdW5jdGlvbiBleGl0RnVsbHNjcmVlbigpIHtcbiAgICAgICAgcmV0dXJuIHNjcmVlbmZ1bGwuZXhpdCgpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5mdWxsc2NyZWVuY2hhbmdlSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHNjcmVlbmZ1bGwuaXNGdWxsc2NyZWVuKSB7XG4gICAgICAgICAgc3RvcmVDYWxsYmFjayhfdGhpcywgJ2V2ZW50OmV4aXRGdWxsc2NyZWVuJywgZXhpdEZ1bGxzY3JlZW4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlbW92ZUNhbGxiYWNrKF90aGlzLCAnZXZlbnQ6ZXhpdEZ1bGxzY3JlZW4nLCBleGl0RnVsbHNjcmVlbik7XG4gICAgICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cblxuICAgICAgICBfdGhpcy5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHBvc3RNZXNzYWdlKF90aGlzLCAnZnVsbHNjcmVlbmNoYW5nZScsIHNjcmVlbmZ1bGwuaXNGdWxsc2NyZWVuKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBzY3JlZW5mdWxsLm9uKCdmdWxsc2NyZWVuY2hhbmdlJywgdGhpcy5mdWxsc2NyZWVuY2hhbmdlSGFuZGxlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHByb21pc2UgZm9yIGEgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgQVBJIG1ldGhvZCB0byBjYWxsLlxuICAgKiBAcGFyYW0ge09iamVjdH0gW2FyZ3M9e31dIEFyZ3VtZW50cyB0byBzZW5kIHZpYSBwb3N0TWVzc2FnZS5cbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoUGxheWVyLCBbe1xuICAgIGtleTogXCJjYWxsTWV0aG9kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbGxNZXRob2QobmFtZSkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHJldHVybiBuZXcgbnBvX3NyYyhmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIC8vIFdlIGFyZSBzdG9yaW5nIHRoZSByZXNvbHZlL3JlamVjdCBoYW5kbGVycyB0byBjYWxsIGxhdGVyLCBzbyB3ZVxuICAgICAgICAvLyBjYW7igJl0IHJldHVybiBoZXJlLlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJvbWlzZS9hbHdheXMtcmV0dXJuXG4gICAgICAgIHJldHVybiBfdGhpczIucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdG9yZUNhbGxiYWNrKF90aGlzMiwgbmFtZSwge1xuICAgICAgICAgICAgcmVzb2x2ZTogcmVzb2x2ZSxcbiAgICAgICAgICAgIHJlamVjdDogcmVqZWN0XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcG9zdE1lc3NhZ2UoX3RoaXMyLCBuYW1lLCBhcmdzKTtcbiAgICAgICAgfSkuY2F0Y2gocmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYSBwcm9taXNlIGZvciB0aGUgdmFsdWUgb2YgYSBwbGF5ZXIgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgcHJvcGVydHkgbmFtZVxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0KG5hbWUpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gbmV3IG5wb19zcmMoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBuYW1lID0gZ2V0TWV0aG9kTmFtZShuYW1lLCAnZ2V0Jyk7IC8vIFdlIGFyZSBzdG9yaW5nIHRoZSByZXNvbHZlL3JlamVjdCBoYW5kbGVycyB0byBjYWxsIGxhdGVyLCBzbyB3ZVxuICAgICAgICAvLyBjYW7igJl0IHJldHVybiBoZXJlLlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJvbWlzZS9hbHdheXMtcmV0dXJuXG5cbiAgICAgICAgcmV0dXJuIF90aGlzMy5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0b3JlQ2FsbGJhY2soX3RoaXMzLCBuYW1lLCB7XG4gICAgICAgICAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgICAgICAgICAgcmVqZWN0OiByZWplY3RcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBwb3N0TWVzc2FnZShfdGhpczMsIG5hbWUpO1xuICAgICAgICB9KS5jYXRjaChyZWplY3QpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIHByb21pc2UgZm9yIHNldHRpbmcgdGhlIHZhbHVlIG9mIGEgcGxheWVyIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIEFQSSBtZXRob2QgdG8gY2FsbC5cbiAgICAgKiBAcGFyYW0ge21peGVkfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KG5hbWUsIHZhbHVlKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgcmV0dXJuIG5ldyBucG9fc3JjKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgbmFtZSA9IGdldE1ldGhvZE5hbWUobmFtZSwgJ3NldCcpO1xuXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlcmUgbXVzdCBiZSBhIHZhbHVlIHRvIHNldC4nKTtcbiAgICAgICAgfSAvLyBXZSBhcmUgc3RvcmluZyB0aGUgcmVzb2x2ZS9yZWplY3QgaGFuZGxlcnMgdG8gY2FsbCBsYXRlciwgc28gd2VcbiAgICAgICAgLy8gY2Fu4oCZdCByZXR1cm4gaGVyZS5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByb21pc2UvYWx3YXlzLXJldHVyblxuXG5cbiAgICAgICAgcmV0dXJuIF90aGlzNC5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0b3JlQ2FsbGJhY2soX3RoaXM0LCBuYW1lLCB7XG4gICAgICAgICAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgICAgICAgICAgcmVqZWN0OiByZWplY3RcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBwb3N0TWVzc2FnZShfdGhpczQsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfSkuY2F0Y2gocmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYW4gZXZlbnQgbGlzdGVuZXIgZm9yIHRoZSBzcGVjaWZpZWQgZXZlbnQuIFdpbGwgY2FsbCB0aGVcbiAgICAgKiBjYWxsYmFjayB3aXRoIGEgc2luZ2xlIHBhcmFtZXRlciwgYGRhdGFgLCB0aGF0IGNvbnRhaW5zIHRoZSBkYXRhIGZvclxuICAgICAqIHRoYXQgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudC5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCopfSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBldmVudCBmaXJlcy5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwib25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb24oZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgaWYgKCFldmVudE5hbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignWW91IG11c3QgcGFzcyBhbiBldmVudCBuYW1lLicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYSBjYWxsYmFjayBmdW5jdGlvbi4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2FsbGJhY2tzID0gZ2V0Q2FsbGJhY2tzKHRoaXMsIFwiZXZlbnQ6XCIuY29uY2F0KGV2ZW50TmFtZSkpO1xuXG4gICAgICBpZiAoY2FsbGJhY2tzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLmNhbGxNZXRob2QoJ2FkZEV2ZW50TGlzdGVuZXInLCBldmVudE5hbWUpLmNhdGNoKGZ1bmN0aW9uICgpIHsvLyBJZ25vcmUgdGhlIGVycm9yLiBUaGVyZSB3aWxsIGJlIGFuIGVycm9yIGV2ZW50IGZpcmVkIHRoYXRcbiAgICAgICAgICAvLyB3aWxsIHRyaWdnZXIgdGhlIGVycm9yIGNhbGxiYWNrIGlmIHRoZXkgYXJlIGxpc3RlbmluZy5cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHN0b3JlQ2FsbGJhY2sodGhpcywgXCJldmVudDpcIi5jb25jYXQoZXZlbnROYW1lKSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYW4gZXZlbnQgbGlzdGVuZXIgZm9yIHRoZSBzcGVjaWZpZWQgZXZlbnQuIFdpbGwgcmVtb3ZlIGFsbFxuICAgICAqIGxpc3RlbmVycyBmb3IgdGhhdCBldmVudCBpZiBhIGBjYWxsYmFja2AgaXNu4oCZdCBwYXNzZWQsIG9yIG9ubHkgdGhhdFxuICAgICAqIHNwZWNpZmljIGNhbGxiYWNrIGlmIGl0IGlzIHBhc3NlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50LlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gVGhlIHNwZWNpZmljIGNhbGxiYWNrIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwib2ZmXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9mZihldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICBpZiAoIWV2ZW50TmFtZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwYXNzIGFuIGV2ZW50IG5hbWUuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYWxsYmFjayAmJiB0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxhc3RDYWxsYmFjayA9IHJlbW92ZUNhbGxiYWNrKHRoaXMsIFwiZXZlbnQ6XCIuY29uY2F0KGV2ZW50TmFtZSksIGNhbGxiYWNrKTsgLy8gSWYgdGhlcmUgYXJlIG5vIGNhbGxiYWNrcyBsZWZ0LCByZW1vdmUgdGhlIGxpc3RlbmVyXG5cbiAgICAgIGlmIChsYXN0Q2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5jYWxsTWV0aG9kKCdyZW1vdmVFdmVudExpc3RlbmVyJywgZXZlbnROYW1lKS5jYXRjaChmdW5jdGlvbiAoZSkgey8vIElnbm9yZSB0aGUgZXJyb3IuIFRoZXJlIHdpbGwgYmUgYW4gZXJyb3IgZXZlbnQgZmlyZWQgdGhhdFxuICAgICAgICAgIC8vIHdpbGwgdHJpZ2dlciB0aGUgZXJyb3IgY2FsbGJhY2sgaWYgdGhleSBhcmUgbGlzdGVuaW5nLlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGxvYWQgYSBuZXcgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBMb2FkVmlkZW9Qcm9taXNlXG4gICAgICogQGZ1bGZpbGwge251bWJlcn0gVGhlIHZpZGVvIHdpdGggdGhpcyBpZCBvciB1cmwgc3VjY2Vzc2Z1bGx5IGxvYWRlZC5cbiAgICAgKiBAcmVqZWN0IHtUeXBlRXJyb3J9IFRoZSBpZCB3YXMgbm90IGEgbnVtYmVyLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogTG9hZCBhIG5ldyB2aWRlbyBpbnRvIHRoaXMgZW1iZWQuIFRoZSBwcm9taXNlIHdpbGwgYmUgcmVzb2x2ZWQgaWZcbiAgICAgKiB0aGUgdmlkZW8gaXMgc3VjY2Vzc2Z1bGx5IGxvYWRlZCwgb3IgaXQgd2lsbCBiZSByZWplY3RlZCBpZiBpdCBjb3VsZFxuICAgICAqIG5vdCBiZSBsb2FkZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd8b2JqZWN0fSBvcHRpb25zIFRoZSBpZCBvZiB0aGUgdmlkZW8sIHRoZSB1cmwgb2YgdGhlIHZpZGVvLCBvciBhbiBvYmplY3Qgd2l0aCBlbWJlZCBvcHRpb25zLlxuICAgICAqIEByZXR1cm4ge0xvYWRWaWRlb1Byb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJsb2FkVmlkZW9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZFZpZGVvKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2xvYWRWaWRlbycsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gcGVyZm9ybSBhbiBhY3Rpb24gd2hlbiB0aGUgUGxheWVyIGlzIHJlYWR5LlxuICAgICAqXG4gICAgICogQHRvZG8gZG9jdW1lbnQgZXJyb3JzXG4gICAgICogQHByb21pc2UgTG9hZFZpZGVvUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHt2b2lkfVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBhIGZ1bmN0aW9uIHdoZW4gdGhlIHBsYXllciBpZnJhbWUgaGFzIGluaXRpYWxpemVkLiBZb3UgZG8gbm90XG4gICAgICogbmVlZCB0byB3YWl0IGZvciBgcmVhZHlgIHRvIHRyaWdnZXIgdG8gYmVnaW4gYWRkaW5nIGV2ZW50IGxpc3RlbmVyc1xuICAgICAqIG9yIGNhbGxpbmcgb3RoZXIgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1JlYWR5UHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJlYWR5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWR5KCkge1xuICAgICAgdmFyIHJlYWR5UHJvbWlzZSA9IHJlYWR5TWFwLmdldCh0aGlzKSB8fCBuZXcgbnBvX3NyYyhmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1Vua25vd24gcGxheWVyLiBQcm9iYWJseSB1bmxvYWRlZC4nKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBucG9fc3JjLnJlc29sdmUocmVhZHlQcm9taXNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGFkZCBhIGN1ZSBwb2ludCB0byB0aGUgcGxheWVyLlxuICAgICAqXG4gICAgICogQHByb21pc2UgQWRkQ3VlUG9pbnRQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge3N0cmluZ30gVGhlIGlkIG9mIHRoZSBjdWUgcG9pbnQgdG8gdXNlIGZvciByZW1vdmVDdWVQb2ludC5cbiAgICAgKiBAcmVqZWN0IHtSYW5nZUVycm9yfSB0aGUgdGltZSB3YXMgbGVzcyB0aGFuIDAgb3IgZ3JlYXRlciB0aGFuIHRoZVxuICAgICAqICAgICAgICAgdmlkZW/igJlzIGR1cmF0aW9uLlxuICAgICAqIEByZWplY3Qge1Vuc3VwcG9ydGVkRXJyb3J9IEN1ZSBwb2ludHMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCB0aGUgY3VycmVudFxuICAgICAqICAgICAgICAgcGxheWVyIG9yIGJyb3dzZXIuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBjdWUgcG9pbnQgdG8gdGhlIHBsYXllci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lIFRoZSB0aW1lIGZvciB0aGUgY3VlIHBvaW50LlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbZGF0YV0gQXJiaXRyYXJ5IGRhdGEgdG8gYmUgcmV0dXJuZWQgd2l0aCB0aGUgY3VlIHBvaW50LlxuICAgICAqIEByZXR1cm4ge0FkZEN1ZVBvaW50UHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImFkZEN1ZVBvaW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEN1ZVBvaW50KHRpbWUpIHtcbiAgICAgIHZhciBkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2FkZEN1ZVBvaW50Jywge1xuICAgICAgICB0aW1lOiB0aW1lLFxuICAgICAgICBkYXRhOiBkYXRhXG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIHJlbW92ZSBhIGN1ZSBwb2ludCBmcm9tIHRoZSBwbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBBZGRDdWVQb2ludFByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7c3RyaW5nfSBUaGUgaWQgb2YgdGhlIGN1ZSBwb2ludCB0aGF0IHdhcyByZW1vdmVkLlxuICAgICAqIEByZWplY3Qge0ludmFsaWRDdWVQb2ludH0gVGhlIGN1ZSBwb2ludCB3aXRoIHRoZSBzcGVjaWZpZWQgaWQgd2FzIG5vdFxuICAgICAqICAgICAgICAgZm91bmQuXG4gICAgICogQHJlamVjdCB7VW5zdXBwb3J0ZWRFcnJvcn0gQ3VlIHBvaW50cyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIHRoZSBjdXJyZW50XG4gICAgICogICAgICAgICBwbGF5ZXIgb3IgYnJvd3Nlci5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIGN1ZSBwb2ludCBmcm9tIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgaWQgb2YgdGhlIGN1ZSBwb2ludCB0byByZW1vdmUuXG4gICAgICogQHJldHVybiB7UmVtb3ZlQ3VlUG9pbnRQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVtb3ZlQ3VlUG9pbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlQ3VlUG9pbnQoaWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ3JlbW92ZUN1ZVBvaW50JywgaWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHJlcHJlc2VudGF0aW9uIG9mIGEgdGV4dCB0cmFjayBvbiBhIHZpZGVvLlxuICAgICAqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gVmltZW9UZXh0VHJhY2tcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gbGFuZ3VhZ2UgVGhlIElTTyBsYW5ndWFnZSBjb2RlLlxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBraW5kIFRoZSBraW5kIG9mIHRyYWNrIGl0IGlzIChjYXB0aW9ucyBvciBzdWJ0aXRsZXMpLlxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBsYWJlbCBUaGUgaHVtYW7igJByZWFkYWJsZSBsYWJlbCBmb3IgdGhlIHRyYWNrLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGVuYWJsZSBhIHRleHQgdHJhY2suXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBFbmFibGVUZXh0VHJhY2tQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge1ZpbWVvVGV4dFRyYWNrfSBUaGUgdGV4dCB0cmFjayB0aGF0IHdhcyBlbmFibGVkLlxuICAgICAqIEByZWplY3Qge0ludmFsaWRUcmFja0xhbmd1YWdlRXJyb3J9IE5vIHRyYWNrIHdhcyBhdmFpbGFibGUgd2l0aCB0aGVcbiAgICAgKiAgICAgICAgIHNwZWNpZmllZCBsYW5ndWFnZS5cbiAgICAgKiBAcmVqZWN0IHtJbnZhbGlkVHJhY2tFcnJvcn0gTm8gdHJhY2sgd2FzIGF2YWlsYWJsZSB3aXRoIHRoZSBzcGVjaWZpZWRcbiAgICAgKiAgICAgICAgIGxhbmd1YWdlIGFuZCBraW5kLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogRW5hYmxlIHRoZSB0ZXh0IHRyYWNrIHdpdGggdGhlIHNwZWNpZmllZCBsYW5ndWFnZSwgYW5kIG9wdGlvbmFsbHkgdGhlXG4gICAgICogc3BlY2lmaWVkIGtpbmQgKGNhcHRpb25zIG9yIHN1YnRpdGxlcykuXG4gICAgICpcbiAgICAgKiBXaGVuIHNldCB2aWEgdGhlIEFQSSwgdGhlIHRyYWNrIGxhbmd1YWdlIHdpbGwgbm90IGNoYW5nZSB0aGUgdmlld2Vy4oCZc1xuICAgICAqIHN0b3JlZCBwcmVmZXJlbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxhbmd1YWdlIFRoZSB0d2/igJBsZXR0ZXIgbGFuZ3VhZ2UgY29kZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2tpbmRdIFRoZSBraW5kIG9mIHRyYWNrIHRvIGVuYWJsZSAoY2FwdGlvbnMgb3Igc3VidGl0bGVzKS5cbiAgICAgKiBAcmV0dXJuIHtFbmFibGVUZXh0VHJhY2tQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZW5hYmxlVGV4dFRyYWNrXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZVRleHRUcmFjayhsYW5ndWFnZSwga2luZCkge1xuICAgICAgaWYgKCFsYW5ndWFnZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwYXNzIGEgbGFuZ3VhZ2UuJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2VuYWJsZVRleHRUcmFjaycsIHtcbiAgICAgICAgbGFuZ3VhZ2U6IGxhbmd1YWdlLFxuICAgICAgICBraW5kOiBraW5kXG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGRpc2FibGUgdGhlIGFjdGl2ZSB0ZXh0IHRyYWNrLlxuICAgICAqXG4gICAgICogQHByb21pc2UgRGlzYWJsZVRleHRUcmFja1Byb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7dm9pZH0gVGhlIHRyYWNrIHdhcyBkaXNhYmxlZC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIERpc2FibGUgdGhlIGN1cnJlbnRseS1hY3RpdmUgdGV4dCB0cmFjay5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0Rpc2FibGVUZXh0VHJhY2tQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZGlzYWJsZVRleHRUcmFja1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNhYmxlVGV4dFRyYWNrKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsbE1ldGhvZCgnZGlzYWJsZVRleHRUcmFjaycpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gcGF1c2UgdGhlIHZpZGVvLlxuICAgICAqXG4gICAgICogQHByb21pc2UgUGF1c2VQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge3ZvaWR9IFRoZSB2aWRlbyB3YXMgcGF1c2VkLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogUGF1c2UgdGhlIHZpZGVvIGlmIGl04oCZcyBwbGF5aW5nLlxuICAgICAqXG4gICAgICogQHJldHVybiB7UGF1c2VQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicGF1c2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCdwYXVzZScpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gcGxheSB0aGUgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBQbGF5UHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHt2b2lkfSBUaGUgdmlkZW8gd2FzIHBsYXllZC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFBsYXkgdGhlIHZpZGVvIGlmIGl04oCZcyBwYXVzZWQuICoqTm90ZToqKiBvbiBpT1MgYW5kIHNvbWUgb3RoZXJcbiAgICAgKiBtb2JpbGUgZGV2aWNlcywgeW91IGNhbm5vdCBwcm9ncmFtbWF0aWNhbGx5IHRyaWdnZXIgcGxheS4gT25jZSB0aGVcbiAgICAgKiB2aWV3ZXIgaGFzIHRhcHBlZCBvbiB0aGUgcGxheSBidXR0b24gaW4gdGhlIHBsYXllciwgaG93ZXZlciwgeW91XG4gICAgICogd2lsbCBiZSBhYmxlIHRvIHVzZSB0aGlzIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybiB7UGxheVByb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJwbGF5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCdwbGF5Jyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlcXVlc3QgdGhhdCB0aGUgcGxheWVyIGVudGVycyBmdWxsc2NyZWVuLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJyZXF1ZXN0RnVsbHNjcmVlblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXF1ZXN0RnVsbHNjcmVlbigpIHtcbiAgICAgIGlmIChzY3JlZW5mdWxsLmlzRW5hYmxlZCkge1xuICAgICAgICByZXR1cm4gc2NyZWVuZnVsbC5yZXF1ZXN0KHRoaXMuZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ3JlcXVlc3RGdWxsc2NyZWVuJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlcXVlc3QgdGhhdCB0aGUgcGxheWVyIGV4aXRzIGZ1bGxzY3JlZW4uXG4gICAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImV4aXRGdWxsc2NyZWVuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4aXRGdWxsc2NyZWVuKCkge1xuICAgICAgaWYgKHNjcmVlbmZ1bGwuaXNFbmFibGVkKSB7XG4gICAgICAgIHJldHVybiBzY3JlZW5mdWxsLmV4aXQoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY2FsbE1ldGhvZCgnZXhpdEZ1bGxzY3JlZW4nKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBwbGF5ZXIgaXMgY3VycmVudGx5IGZ1bGxzY3JlZW4uXG4gICAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldEZ1bGxzY3JlZW5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RnVsbHNjcmVlbigpIHtcbiAgICAgIGlmIChzY3JlZW5mdWxsLmlzRW5hYmxlZCkge1xuICAgICAgICByZXR1cm4gbnBvX3NyYy5yZXNvbHZlKHNjcmVlbmZ1bGwuaXNGdWxsc2NyZWVuKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdmdWxsc2NyZWVuJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlcXVlc3QgdGhhdCB0aGUgcGxheWVyIGVudGVycyBwaWN0dXJlLWluLXBpY3R1cmUuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJlcXVlc3RQaWN0dXJlSW5QaWN0dXJlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlcXVlc3RQaWN0dXJlSW5QaWN0dXJlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsbE1ldGhvZCgncmVxdWVzdFBpY3R1cmVJblBpY3R1cmUnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVxdWVzdCB0aGF0IHRoZSBwbGF5ZXIgZXhpdHMgcGljdHVyZS1pbi1waWN0dXJlLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJleGl0UGljdHVyZUluUGljdHVyZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleGl0UGljdHVyZUluUGljdHVyZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2V4aXRQaWN0dXJlSW5QaWN0dXJlJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcGxheWVyIGlzIGN1cnJlbnRseSBwaWN0dXJlLWluLXBpY3R1cmUuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFBpY3R1cmVJblBpY3R1cmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGljdHVyZUluUGljdHVyZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgncGljdHVyZUluUGljdHVyZScpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gdW5sb2FkIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIFVubG9hZFByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7dm9pZH0gVGhlIHZpZGVvIHdhcyB1bmxvYWRlZC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgcGxheWVyIHRvIGl0cyBpbml0aWFsIHN0YXRlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7VW5sb2FkUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInVubG9hZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bmxvYWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCd1bmxvYWQnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYW51cCB0aGUgcGxheWVyIGFuZCByZW1vdmUgaXQgZnJvbSB0aGUgRE9NXG4gICAgICpcbiAgICAgKiBJdCB3b24ndCBiZSB1c2FibGUgYW5kIGEgbmV3IG9uZSBzaG91bGQgYmUgY29uc3RydWN0ZWRcbiAgICAgKiAgaW4gb3JkZXIgdG8gZG8gYW55IG9wZXJhdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZGVzdHJveVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIHJldHVybiBuZXcgbnBvX3NyYyhmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICByZWFkeU1hcC5kZWxldGUoX3RoaXM1KTtcbiAgICAgICAgcGxheWVyTWFwLmRlbGV0ZShfdGhpczUuZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKF90aGlzNS5fb3JpZ2luYWxFbGVtZW50KSB7XG4gICAgICAgICAgcGxheWVyTWFwLmRlbGV0ZShfdGhpczUuX29yaWdpbmFsRWxlbWVudCk7XG5cbiAgICAgICAgICBfdGhpczUuX29yaWdpbmFsRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtdmltZW8taW5pdGlhbGl6ZWQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfdGhpczUuZWxlbWVudCAmJiBfdGhpczUuZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0lGUkFNRScgJiYgX3RoaXM1LmVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICAgIC8vIElmIHdlJ3ZlIGFkZGVkIGFuIGFkZGl0aW9uYWwgd3JhcHBlciBkaXYsIHJlbW92ZSB0aGF0IGZyb20gdGhlIERPTS5cbiAgICAgICAgICAvLyBJZiBub3QsIGp1c3QgcmVtb3ZlIHRoZSBpZnJhbWUgZWxlbWVudC5cbiAgICAgICAgICBpZiAoX3RoaXM1LmVsZW1lbnQucGFyZW50Tm9kZS5wYXJlbnROb2RlICYmIF90aGlzNS5fb3JpZ2luYWxFbGVtZW50ICYmIF90aGlzNS5fb3JpZ2luYWxFbGVtZW50ICE9PSBfdGhpczUuZWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICBfdGhpczUuZWxlbWVudC5wYXJlbnROb2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoX3RoaXM1LmVsZW1lbnQucGFyZW50Tm9kZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzNS5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoX3RoaXM1LmVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBJZiB0aGUgY2xpcCBpcyBwcml2YXRlIHRoZXJlIGlzIGEgY2FzZSB3aGVyZSB0aGUgZWxlbWVudCBzdGF5cyB0aGVcbiAgICAgICAgLy8gZGl2IGVsZW1lbnQuIERlc3Ryb3kgc2hvdWxkIHJlc2V0IHRoZSBkaXYgYW5kIHJlbW92ZSB0aGUgaWZyYW1lIGNoaWxkLlxuXG5cbiAgICAgICAgaWYgKF90aGlzNS5lbGVtZW50ICYmIF90aGlzNS5lbGVtZW50Lm5vZGVOYW1lID09PSAnRElWJyAmJiBfdGhpczUuZWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgX3RoaXM1LmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXZpbWVvLWluaXRpYWxpemVkJyk7XG5cbiAgICAgICAgICB2YXIgaWZyYW1lID0gX3RoaXM1LmVsZW1lbnQucXVlcnlTZWxlY3RvcignaWZyYW1lJyk7XG5cbiAgICAgICAgICBpZiAoaWZyYW1lICYmIGlmcmFtZS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSd2ZSBhZGRlZCBhbiBhZGRpdGlvbmFsIHdyYXBwZXIgZGl2LCByZW1vdmUgdGhhdCBmcm9tIHRoZSBET00uXG4gICAgICAgICAgICAvLyBJZiBub3QsIGp1c3QgcmVtb3ZlIHRoZSBpZnJhbWUgZWxlbWVudC5cbiAgICAgICAgICAgIGlmIChpZnJhbWUucGFyZW50Tm9kZS5wYXJlbnROb2RlICYmIF90aGlzNS5fb3JpZ2luYWxFbGVtZW50ICYmIF90aGlzNS5fb3JpZ2luYWxFbGVtZW50ICE9PSBpZnJhbWUucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICBpZnJhbWUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGlmcmFtZS5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmcmFtZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXM1Ll93aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIF90aGlzNS5fb25NZXNzYWdlKTtcblxuICAgICAgICBpZiAoc2NyZWVuZnVsbC5pc0VuYWJsZWQpIHtcbiAgICAgICAgICBzY3JlZW5mdWxsLm9mZignZnVsbHNjcmVlbmNoYW5nZScsIF90aGlzNS5mdWxsc2NyZWVuY2hhbmdlSGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGdldCB0aGUgYXV0b3BhdXNlIGJlaGF2aW9yIG9mIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIEdldEF1dG9wYXVzZVByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7Ym9vbGVhbn0gV2hldGhlciBhdXRvcGF1c2UgaXMgdHVybmVkIG9uIG9yIG9mZi5cbiAgICAgKiBAcmVqZWN0IHtVbnN1cHBvcnRlZEVycm9yfSBBdXRvcGF1c2UgaXMgbm90IHN1cHBvcnRlZCB3aXRoIHRoZSBjdXJyZW50XG4gICAgICogICAgICAgICBwbGF5ZXIgb3IgYnJvd3Nlci5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgYXV0b3BhdXNlIGJlaGF2aW9yIGZvciB0aGlzIHBsYXllci5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0dldEF1dG9wYXVzZVByb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRBdXRvcGF1c2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QXV0b3BhdXNlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdhdXRvcGF1c2UnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIHNldCB0aGUgYXV0b3BhdXNlIGJlaGF2aW9yIG9mIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIFNldEF1dG9wYXVzZVByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7Ym9vbGVhbn0gV2hldGhlciBhdXRvcGF1c2UgaXMgdHVybmVkIG9uIG9yIG9mZi5cbiAgICAgKiBAcmVqZWN0IHtVbnN1cHBvcnRlZEVycm9yfSBBdXRvcGF1c2UgaXMgbm90IHN1cHBvcnRlZCB3aXRoIHRoZSBjdXJyZW50XG4gICAgICogICAgICAgICBwbGF5ZXIgb3IgYnJvd3Nlci5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZSBvciBkaXNhYmxlIHRoZSBhdXRvcGF1c2UgYmVoYXZpb3Igb2YgdGhpcyBwbGF5ZXIuXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0LCB3aGVuIGFub3RoZXIgdmlkZW8gaXMgcGxheWVkIGluIHRoZSBzYW1lIGJyb3dzZXIsIHRoaXNcbiAgICAgKiBwbGF5ZXIgd2lsbCBhdXRvbWF0aWNhbGx5IHBhdXNlLiBVbmxlc3MgeW91IGhhdmUgYSBzcGVjaWZpYyByZWFzb25cbiAgICAgKiBmb3IgZG9pbmcgc28sIHdlIHJlY29tbWVuZCB0aGF0IHlvdSBsZWF2ZSBhdXRvcGF1c2Ugc2V0IHRvIHRoZVxuICAgICAqIGRlZmF1bHQgKGB0cnVlYCkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGF1dG9wYXVzZVxuICAgICAqIEByZXR1cm4ge1NldEF1dG9wYXVzZVByb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzZXRBdXRvcGF1c2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0QXV0b3BhdXNlKGF1dG9wYXVzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0KCdhdXRvcGF1c2UnLCBhdXRvcGF1c2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gZ2V0IHRoZSBidWZmZXJlZCBwcm9wZXJ0eSBvZiB0aGUgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBHZXRCdWZmZXJlZFByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7QXJyYXl9IEJ1ZmZlcmVkIFRpbWVyYW5nZXMgY29udmVydGVkIHRvIGFuIEFycmF5LlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBidWZmZXJlZCBwcm9wZXJ0eSBvZiB0aGUgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtHZXRCdWZmZXJlZFByb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRCdWZmZXJlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCdWZmZXJlZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgnYnVmZmVyZWQnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gQ2FtZXJhUHJvcGVydGllc1xuICAgICAqIEBwcm9wIHtudW1iZXJ9IHByb3BzLnlhdyAtIE51bWJlciBiZXR3ZWVuIDAgYW5kIDM2MC5cbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwcm9wcy5waXRjaCAtIE51bWJlciBiZXR3ZWVuIC05MCBhbmQgOTAuXG4gICAgICogQHByb3Age251bWJlcn0gcHJvcHMucm9sbCAtIE51bWJlciBiZXR3ZWVuIC0xODAgYW5kIDE4MC5cbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwcm9wcy5mb3YgLSBUaGUgZmllbGQgb2YgdmlldyBpbiBkZWdyZWVzLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGdldCB0aGUgY2FtZXJhIHByb3BlcnRpZXMgb2YgdGhlIHBsYXllci5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIEdldENhbWVyYVByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7Q2FtZXJhUHJvcGVydGllc30gVGhlIGNhbWVyYSBwcm9wZXJ0aWVzLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogRm9yIDM2MMKwIHZpZGVvcyBnZXQgdGhlIGNhbWVyYSBwcm9wZXJ0aWVzIGZvciB0aGlzIHBsYXllci5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0dldENhbWVyYVByb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRDYW1lcmFQcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDYW1lcmFQcm9wcygpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgnY2FtZXJhUHJvcHMnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIHNldCB0aGUgY2FtZXJhIHByb3BlcnRpZXMgb2YgdGhlIHBsYXllci5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIFNldENhbWVyYVByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7T2JqZWN0fSBUaGUgY2FtZXJhIHdhcyBzdWNjZXNzZnVsbHkgc2V0LlxuICAgICAqIEByZWplY3Qge1JhbmdlRXJyb3J9IFRoZSByYW5nZSB3YXMgb3V0IG9mIGJvdW5kcy5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEZvciAzNjDCsCB2aWRlb3Mgc2V0IHRoZSBjYW1lcmEgcHJvcGVydGllcyBmb3IgdGhpcyBwbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0NhbWVyYVByb3BlcnRpZXN9IGNhbWVyYSBUaGUgY2FtZXJhIHByb3BlcnRpZXNcbiAgICAgKiBAcmV0dXJuIHtTZXRDYW1lcmFQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2V0Q2FtZXJhUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q2FtZXJhUHJvcHMoY2FtZXJhKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXQoJ2NhbWVyYVByb3BzJywgY2FtZXJhKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSByZXByZXNlbnRhdGlvbiBvZiBhIGNoYXB0ZXIuXG4gICAgICpcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBWaW1lb0NoYXB0ZXJcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gc3RhcnRUaW1lIFRoZSBzdGFydCB0aW1lIG9mIHRoZSBjaGFwdGVyLlxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSB0aXRsZSBUaGUgdGl0bGUgb2YgdGhlIGNoYXB0ZXIuXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGluZGV4IFRoZSBwbGFjZSBpbiB0aGUgb3JkZXIgb2YgQ2hhcHRlcnMuIFN0YXJ0cyBhdCAxLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGdldCBjaGFwdGVycyBmb3IgdGhlIHZpZGVvLlxuICAgICAqXG4gICAgICogQHByb21pc2UgR2V0Q2hhcHRlcnNQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge1ZpbWVvQ2hhcHRlcltdfSBUaGUgY2hhcHRlcnMgZm9yIHRoZSB2aWRlby5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEdldCBhbiBhcnJheSBvZiBhbGwgdGhlIGNoYXB0ZXJzIGZvciB0aGUgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtHZXRDaGFwdGVyc1Byb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRDaGFwdGVyc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDaGFwdGVycygpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgnY2hhcHRlcnMnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGdldCB0aGUgY3VycmVudGx5IGFjdGl2ZSBjaGFwdGVyLlxuICAgICAqXG4gICAgICogQHByb21pc2UgR2V0Q3VycmVudENoYXB0ZXJzUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtWaW1lb0NoYXB0ZXJ8dW5kZWZpbmVkfSBUaGUgY3VycmVudCBjaGFwdGVyIGZvciB0aGUgdmlkZW8uXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnRseSBhY3RpdmUgY2hhcHRlciBmb3IgdGhlIHZpZGVvLlxuICAgICAqXG4gICAgICogQHJldHVybiB7R2V0Q3VycmVudENoYXB0ZXJzUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldEN1cnJlbnRDaGFwdGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEN1cnJlbnRDaGFwdGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdjdXJyZW50Q2hhcHRlcicpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gZ2V0IHRoZSBjb2xvciBvZiB0aGUgcGxheWVyLlxuICAgICAqXG4gICAgICogQHByb21pc2UgR2V0Q29sb3JQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge3N0cmluZ30gVGhlIGhleCBjb2xvciBvZiB0aGUgcGxheWVyLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjb2xvciBmb3IgdGhpcyBwbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtHZXRDb2xvclByb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRDb2xvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDb2xvcigpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgnY29sb3InKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIHNldCB0aGUgY29sb3Igb2YgdGhlIHBsYXllci5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIFNldENvbG9yUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtzdHJpbmd9IFRoZSBjb2xvciB3YXMgc3VjY2Vzc2Z1bGx5IHNldC5cbiAgICAgKiBAcmVqZWN0IHtUeXBlRXJyb3J9IFRoZSBzdHJpbmcgd2FzIG5vdCBhIHZhbGlkIGhleCBvciByZ2IgY29sb3IuXG4gICAgICogQHJlamVjdCB7Q29udHJhc3RFcnJvcn0gVGhlIGNvbG9yIHdhcyBzZXQsIGJ1dCB0aGUgY29udHJhc3QgaXNcbiAgICAgKiAgICAgICAgIG91dHNpZGUgb2YgdGhlIGFjY2VwdGFibGUgcmFuZ2UuXG4gICAgICogQHJlamVjdCB7RW1iZWRTZXR0aW5nc0Vycm9yfSBUaGUgb3duZXIgb2YgdGhlIHBsYXllciBoYXMgY2hvc2VuIHRvXG4gICAgICogICAgICAgICB1c2UgYSBzcGVjaWZpYyBjb2xvci5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgY29sb3Igb2YgdGhpcyBwbGF5ZXIgdG8gYSBoZXggb3IgcmdiIHN0cmluZy4gU2V0dGluZyB0aGVcbiAgICAgKiBjb2xvciBtYXkgZmFpbCBpZiB0aGUgb3duZXIgb2YgdGhlIHZpZGVvIGhhcyBzZXQgdGhlaXIgZW1iZWRcbiAgICAgKiBwcmVmZXJlbmNlcyB0byBmb3JjZSBhIHNwZWNpZmljIGNvbG9yLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIFRoZSBoZXggb3IgcmdiIGNvbG9yIHN0cmluZyB0byBzZXQuXG4gICAgICogQHJldHVybiB7U2V0Q29sb3JQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2V0Q29sb3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q29sb3IoY29sb3IpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldCgnY29sb3InLCBjb2xvcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcmVwcmVzZW50YXRpb24gb2YgYSBjdWUgcG9pbnQuXG4gICAgICpcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBWaW1lb0N1ZVBvaW50XG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHRpbWUgVGhlIHRpbWUgb2YgdGhlIGN1ZSBwb2ludC5cbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gZGF0YSBUaGUgZGF0YSBwYXNzZWQgd2hlbiBhZGRpbmcgdGhlIGN1ZSBwb2ludC5cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gaWQgVGhlIHVuaXF1ZSBpZCBmb3IgdXNlIHdpdGggcmVtb3ZlQ3VlUG9pbnQuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gZ2V0IHRoZSBjdWUgcG9pbnRzIG9mIGEgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBHZXRDdWVQb2ludHNQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge1ZpbWVvQ3VlUG9pbnRbXX0gVGhlIGN1ZSBwb2ludHMgYWRkZWQgdG8gdGhlIHZpZGVvLlxuICAgICAqIEByZWplY3Qge1Vuc3VwcG9ydGVkRXJyb3J9IEN1ZSBwb2ludHMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCB0aGUgY3VycmVudFxuICAgICAqICAgICAgICAgcGxheWVyIG9yIGJyb3dzZXIuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBHZXQgYW4gYXJyYXkgb2YgdGhlIGN1ZSBwb2ludHMgYWRkZWQgdG8gdGhlIHZpZGVvLlxuICAgICAqXG4gICAgICogQHJldHVybiB7R2V0Q3VlUG9pbnRzUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldEN1ZVBvaW50c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdWVQb2ludHMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ2N1ZVBvaW50cycpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gZ2V0IHRoZSBjdXJyZW50IHRpbWUgb2YgdGhlIHZpZGVvLlxuICAgICAqXG4gICAgICogQHByb21pc2UgR2V0Q3VycmVudFRpbWVQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge251bWJlcn0gVGhlIGN1cnJlbnQgdGltZSBpbiBzZWNvbmRzLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IHBsYXliYWNrIHBvc2l0aW9uIGluIHNlY29uZHMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtHZXRDdXJyZW50VGltZVByb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRDdXJyZW50VGltZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50VGltZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgnY3VycmVudFRpbWUnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIHNldCB0aGUgY3VycmVudCB0aW1lIG9mIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIFNldEN1cnJlbnRUaW1lUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtudW1iZXJ9IFRoZSBhY3R1YWwgY3VycmVudCB0aW1lIHRoYXQgd2FzIHNldC5cbiAgICAgKiBAcmVqZWN0IHtSYW5nZUVycm9yfSB0aGUgdGltZSB3YXMgbGVzcyB0aGFuIDAgb3IgZ3JlYXRlciB0aGFuIHRoZVxuICAgICAqICAgICAgICAgdmlkZW/igJlzIGR1cmF0aW9uLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBjdXJyZW50IHBsYXliYWNrIHBvc2l0aW9uIGluIHNlY29uZHMuIElmIHRoZSBwbGF5ZXIgd2FzXG4gICAgICogcGF1c2VkLCBpdCB3aWxsIHJlbWFpbiBwYXVzZWQuIExpa2V3aXNlLCBpZiB0aGUgcGxheWVyIHdhcyBwbGF5aW5nLFxuICAgICAqIGl0IHdpbGwgcmVzdW1lIHBsYXlpbmcgb25jZSB0aGUgdmlkZW8gaGFzIGJ1ZmZlcmVkLlxuICAgICAqXG4gICAgICogWW91IGNhbiBwcm92aWRlIGFuIGFjY3VyYXRlIHRpbWUgYW5kIHRoZSBwbGF5ZXIgd2lsbCBhdHRlbXB0IHRvIHNlZWtcbiAgICAgKiB0byBhcyBjbG9zZSB0byB0aGF0IHRpbWUgYXMgcG9zc2libGUuIFRoZSBleGFjdCB0aW1lIHdpbGwgYmUgdGhlXG4gICAgICogZnVsZmlsbGVkIHZhbHVlIG9mIHRoZSBwcm9taXNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGN1cnJlbnRUaW1lXG4gICAgICogQHJldHVybiB7U2V0Q3VycmVudFRpbWVQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2V0Q3VycmVudFRpbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q3VycmVudFRpbWUoY3VycmVudFRpbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldCgnY3VycmVudFRpbWUnLCBjdXJyZW50VGltZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBnZXQgdGhlIGR1cmF0aW9uIG9mIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIEdldER1cmF0aW9uUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtudW1iZXJ9IFRoZSBkdXJhdGlvbiBpbiBzZWNvbmRzLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkdXJhdGlvbiBvZiB0aGUgdmlkZW8gaW4gc2Vjb25kcy4gSXQgd2lsbCBiZSByb3VuZGVkIHRvIHRoZVxuICAgICAqIG5lYXJlc3Qgc2Vjb25kIGJlZm9yZSBwbGF5YmFjayBiZWdpbnMsIGFuZCB0byB0aGUgbmVhcmVzdCB0aG91c2FuZHRoXG4gICAgICogb2YgYSBzZWNvbmQgYWZ0ZXIgcGxheWJhY2sgYmVnaW5zLlxuICAgICAqXG4gICAgICogQHJldHVybiB7R2V0RHVyYXRpb25Qcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RHVyYXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RHVyYXRpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ2R1cmF0aW9uJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBnZXQgdGhlIGVuZGVkIHN0YXRlIG9mIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIEdldEVuZGVkUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgdmlkZW8gaGFzIGVuZGVkLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBlbmRlZCBzdGF0ZSBvZiB0aGUgdmlkZW8uIFRoZSB2aWRlbyBoYXMgZW5kZWQgaWZcbiAgICAgKiBgY3VycmVudFRpbWUgPT09IGR1cmF0aW9uYC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0dldEVuZGVkUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldEVuZGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEVuZGVkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdlbmRlZCcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gZ2V0IHRoZSBsb29wIHN0YXRlIG9mIHRoZSBwbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBHZXRMb29wUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgcGxheWVyIGlzIHNldCB0byBsb29wLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBsb29wIHN0YXRlIG9mIHRoZSBwbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtHZXRMb29wUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldExvb3BcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TG9vcCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgnbG9vcCcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gc2V0IHRoZSBsb29wIHN0YXRlIG9mIHRoZSBwbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBTZXRMb29wUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtib29sZWFufSBUaGUgbG9vcCBzdGF0ZSB0aGF0IHdhcyBzZXQuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGxvb3Agc3RhdGUgb2YgdGhlIHBsYXllci4gV2hlbiBzZXQgdG8gYHRydWVgLCB0aGUgcGxheWVyXG4gICAgICogd2lsbCBzdGFydCBvdmVyIGltbWVkaWF0ZWx5IG9uY2UgcGxheWJhY2sgZW5kcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gbG9vcFxuICAgICAqIEByZXR1cm4ge1NldExvb3BQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2V0TG9vcFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRMb29wKGxvb3ApIHtcbiAgICAgIHJldHVybiB0aGlzLnNldCgnbG9vcCcsIGxvb3ApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gc2V0IHRoZSBtdXRlZCBzdGF0ZSBvZiB0aGUgcGxheWVyLlxuICAgICAqXG4gICAgICogQHByb21pc2UgU2V0TXV0ZWRQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge2Jvb2xlYW59IFRoZSBtdXRlZCBzdGF0ZSB0aGF0IHdhcyBzZXQuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIG11dGVkIHN0YXRlIG9mIHRoZSBwbGF5ZXIuIFdoZW4gc2V0IHRvIGB0cnVlYCwgdGhlIHBsYXllclxuICAgICAqIHZvbHVtZSB3aWxsIGJlIG11dGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtib29sZWFufSBtdXRlZFxuICAgICAqIEByZXR1cm4ge1NldE11dGVkUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldE11dGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldE11dGVkKG11dGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXQoJ211dGVkJywgbXV0ZWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gZ2V0IHRoZSBtdXRlZCBzdGF0ZSBvZiB0aGUgcGxheWVyLlxuICAgICAqXG4gICAgICogQHByb21pc2UgR2V0TXV0ZWRQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBwbGF5ZXIgaXMgbXV0ZWQuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG11dGVkIHN0YXRlIG9mIHRoZSBwbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtHZXRNdXRlZFByb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRNdXRlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNdXRlZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgnbXV0ZWQnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGdldCB0aGUgcGF1c2VkIHN0YXRlIG9mIHRoZSBwbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBHZXRMb29wUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgdmlkZW8gaXMgcGF1c2VkLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBwYXVzZWQgc3RhdGUgb2YgdGhlIHBsYXllci5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0dldExvb3BQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UGF1c2VkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBhdXNlZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgncGF1c2VkJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBnZXQgdGhlIHBsYXliYWNrIHJhdGUgb2YgdGhlIHBsYXllci5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIEdldFBsYXliYWNrUmF0ZVByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7bnVtYmVyfSBUaGUgcGxheWJhY2sgcmF0ZSBvZiB0aGUgcGxheWVyIG9uIGEgc2NhbGUgZnJvbSAwLjUgdG8gMi5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgcGxheWJhY2sgcmF0ZSBvZiB0aGUgcGxheWVyIG9uIGEgc2NhbGUgZnJvbSBgMC41YCB0byBgMmAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtHZXRQbGF5YmFja1JhdGVQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UGxheWJhY2tSYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBsYXliYWNrUmF0ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgncGxheWJhY2tSYXRlJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBzZXQgdGhlIHBsYXliYWNrcmF0ZSBvZiB0aGUgcGxheWVyLlxuICAgICAqXG4gICAgICogQHByb21pc2UgU2V0UGxheWJhY2tSYXRlUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtudW1iZXJ9IFRoZSBwbGF5YmFjayByYXRlIHdhcyBzZXQuXG4gICAgICogQHJlamVjdCB7UmFuZ2VFcnJvcn0gVGhlIHBsYXliYWNrIHJhdGUgd2FzIGxlc3MgdGhhbiAwLjUgb3IgZ3JlYXRlciB0aGFuIDIuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHBsYXliYWNrIHJhdGUgb2YgdGhlIHBsYXllciBvbiBhIHNjYWxlIGZyb20gYDAuNWAgdG8gYDJgLiBXaGVuIHNldFxuICAgICAqIHZpYSB0aGUgQVBJLCB0aGUgcGxheWJhY2sgcmF0ZSB3aWxsIG5vdCBiZSBzeW5jaHJvbml6ZWQgdG8gb3RoZXJcbiAgICAgKiBwbGF5ZXJzIG9yIHN0b3JlZCBhcyB0aGUgdmlld2VyJ3MgcHJlZmVyZW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwbGF5YmFja1JhdGVcbiAgICAgKiBAcmV0dXJuIHtTZXRQbGF5YmFja1JhdGVQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2V0UGxheWJhY2tSYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFBsYXliYWNrUmF0ZShwbGF5YmFja1JhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldCgncGxheWJhY2tSYXRlJywgcGxheWJhY2tSYXRlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGdldCB0aGUgcGxheWVkIHByb3BlcnR5IG9mIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIEdldFBsYXllZFByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7QXJyYXl9IFBsYXllZCBUaW1lcmFuZ2VzIGNvbnZlcnRlZCB0byBhbiBBcnJheS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgcGxheWVkIHByb3BlcnR5IG9mIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0dldFBsYXllZFByb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRQbGF5ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGxheWVkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdwbGF5ZWQnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGdldCB0aGUgcXVhbGl0aWVzIGF2YWlsYWJsZSBvZiB0aGUgY3VycmVudCB2aWRlby5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIEdldFF1YWxpdGllc1Byb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7QXJyYXl9IFRoZSBxdWFsaXRpZXMgb2YgdGhlIHZpZGVvLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBxdWFsaXRpZXMgb2YgdGhlIGN1cnJlbnQgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtHZXRRdWFsaXRpZXNQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UXVhbGl0aWVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFF1YWxpdGllcygpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgncXVhbGl0aWVzJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBnZXQgdGhlIGN1cnJlbnQgc2V0IHF1YWxpdHkgb2YgdGhlIHZpZGVvLlxuICAgICAqXG4gICAgICogQHByb21pc2UgR2V0UXVhbGl0eVByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7c3RyaW5nfSBUaGUgY3VycmVudCBzZXQgcXVhbGl0eS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCBzZXQgcXVhbGl0eSBvZiB0aGUgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtHZXRRdWFsaXR5UHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFF1YWxpdHlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UXVhbGl0eSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgncXVhbGl0eScpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gc2V0IHRoZSB2aWRlbyBxdWFsaXR5LlxuICAgICAqXG4gICAgICogQHByb21pc2UgU2V0UXVhbGl0eVByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7bnVtYmVyfSBUaGUgcXVhbGl0eSB3YXMgc2V0LlxuICAgICAqIEByZWplY3Qge1JhbmdlRXJyb3J9IFRoZSBxdWFsaXR5IGlzIG5vdCBhdmFpbGFibGUuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBTZXQgYSB2aWRlbyBxdWFsaXR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHF1YWxpdHlcbiAgICAgKiBAcmV0dXJuIHtTZXRRdWFsaXR5UHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldFF1YWxpdHlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UXVhbGl0eShxdWFsaXR5KSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXQoJ3F1YWxpdHknLCBxdWFsaXR5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGdldCB0aGUgc2Vla2FibGUgcHJvcGVydHkgb2YgdGhlIHZpZGVvLlxuICAgICAqXG4gICAgICogQHByb21pc2UgR2V0U2Vla2FibGVQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge0FycmF5fSBTZWVrYWJsZSBUaW1lcmFuZ2VzIGNvbnZlcnRlZCB0byBhbiBBcnJheS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgc2Vla2FibGUgcHJvcGVydHkgb2YgdGhlIHZpZGVvLlxuICAgICAqXG4gICAgICogQHJldHVybiB7R2V0U2Vla2FibGVQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0U2Vla2FibGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2Vla2FibGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ3NlZWthYmxlJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBnZXQgdGhlIHNlZWtpbmcgcHJvcGVydHkgb2YgdGhlIHBsYXllci5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIEdldFNlZWtpbmdQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBwbGF5ZXIgaXMgY3VycmVudGx5IHNlZWtpbmcuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBHZXQgaWYgdGhlIHBsYXllciBpcyBjdXJyZW50bHkgc2Vla2luZy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0dldFNlZWtpbmdQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0U2Vla2luZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZWVraW5nKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdzZWVraW5nJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBnZXQgdGhlIHRleHQgdHJhY2tzIG9mIGEgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBHZXRUZXh0VHJhY2tzUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtWaW1lb1RleHRUcmFja1tdfSBUaGUgdGV4dCB0cmFja3MgYXNzb2NpYXRlZCB3aXRoIHRoZSB2aWRlby5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEdldCBhbiBhcnJheSBvZiB0aGUgdGV4dCB0cmFja3MgdGhhdCBleGlzdCBmb3IgdGhlIHZpZGVvLlxuICAgICAqXG4gICAgICogQHJldHVybiB7R2V0VGV4dFRyYWNrc1Byb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRUZXh0VHJhY2tzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRleHRUcmFja3MoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ3RleHRUcmFja3MnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGdldCB0aGUgZW1iZWQgY29kZSBmb3IgdGhlIHZpZGVvLlxuICAgICAqXG4gICAgICogQHByb21pc2UgR2V0VmlkZW9FbWJlZENvZGVQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge3N0cmluZ30gVGhlIGA8aWZyYW1lPmAgZW1iZWQgY29kZSBmb3IgdGhlIHZpZGVvLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBgPGlmcmFtZT5gIGVtYmVkIGNvZGUgZm9yIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0dldFZpZGVvRW1iZWRDb2RlUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFZpZGVvRW1iZWRDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZpZGVvRW1iZWRDb2RlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KCd2aWRlb0VtYmVkQ29kZScpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gZ2V0IHRoZSBpZCBvZiB0aGUgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBHZXRWaWRlb0lkUHJvbWlzZVxuICAgICAqIEBmdWxmaWxsIHtudW1iZXJ9IFRoZSBpZCBvZiB0aGUgdmlkZW8uXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGlkIG9mIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0dldFZpZGVvSWRQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VmlkZW9JZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWaWRlb0lkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KCd2aWRlb0lkJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBnZXQgdGhlIHRpdGxlIG9mIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIEdldFZpZGVvVGl0bGVQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge251bWJlcn0gVGhlIHRpdGxlIG9mIHRoZSB2aWRlby5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdGl0bGUgb2YgdGhlIHZpZGVvLlxuICAgICAqXG4gICAgICogQHJldHVybiB7R2V0VmlkZW9UaXRsZVByb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRWaWRlb1RpdGxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZpZGVvVGl0bGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ3ZpZGVvVGl0bGUnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGdldCB0aGUgbmF0aXZlIHdpZHRoIG9mIHRoZSB2aWRlby5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIEdldFZpZGVvV2lkdGhQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge251bWJlcn0gVGhlIG5hdGl2ZSB3aWR0aCBvZiB0aGUgdmlkZW8uXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG5hdGl2ZSB3aWR0aCBvZiB0aGUgY3VycmVudGx54oCQcGxheWluZyB2aWRlby4gVGhlIHdpZHRoIG9mXG4gICAgICogdGhlIGhpZ2hlc3TigJByZXNvbHV0aW9uIGF2YWlsYWJsZSB3aWxsIGJlIHVzZWQgYmVmb3JlIHBsYXliYWNrIGJlZ2lucy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0dldFZpZGVvV2lkdGhQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VmlkZW9XaWR0aFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWaWRlb1dpZHRoKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KCd2aWRlb1dpZHRoJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0byBnZXQgdGhlIG5hdGl2ZSBoZWlnaHQgb2YgdGhlIHZpZGVvLlxuICAgICAqXG4gICAgICogQHByb21pc2UgR2V0VmlkZW9IZWlnaHRQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge251bWJlcn0gVGhlIG5hdGl2ZSBoZWlnaHQgb2YgdGhlIHZpZGVvLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBuYXRpdmUgaGVpZ2h0IG9mIHRoZSBjdXJyZW50bHnigJBwbGF5aW5nIHZpZGVvLiBUaGUgaGVpZ2h0IG9mXG4gICAgICogdGhlIGhpZ2hlc3TigJByZXNvbHV0aW9uIGF2YWlsYWJsZSB3aWxsIGJlIHVzZWQgYmVmb3JlIHBsYXliYWNrIGJlZ2lucy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0dldFZpZGVvSGVpZ2h0UHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFZpZGVvSGVpZ2h0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZpZGVvSGVpZ2h0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KCd2aWRlb0hlaWdodCcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gZ2V0IHRoZSB2aW1lby5jb20gdXJsIGZvciB0aGUgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBHZXRWaWRlb1VybFByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7bnVtYmVyfSBUaGUgdmltZW8uY29tIHVybCBmb3IgdGhlIHZpZGVvLlxuICAgICAqIEByZWplY3Qge1ByaXZhY3lFcnJvcn0gVGhlIHVybCBpc27igJl0IGF2YWlsYWJsZSBiZWNhdXNlIG9mIHRoZSB2aWRlb+KAmXMgcHJpdmFjeSBzZXR0aW5nLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB2aW1lby5jb20gdXJsIGZvciB0aGUgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtHZXRWaWRlb1VybFByb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRWaWRlb1VybFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWaWRlb1VybCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgndmlkZW9VcmwnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBwcm9taXNlIHRvIGdldCB0aGUgdm9sdW1lIGxldmVsIG9mIHRoZSBwbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcHJvbWlzZSBHZXRWb2x1bWVQcm9taXNlXG4gICAgICogQGZ1bGZpbGwge251bWJlcn0gVGhlIHZvbHVtZSBsZXZlbCBvZiB0aGUgcGxheWVyIG9uIGEgc2NhbGUgZnJvbSAwIHRvIDEuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgdm9sdW1lIGxldmVsIG9mIHRoZSBwbGF5ZXIgb24gYSBzY2FsZSBmcm9tIGAwYCB0byBgMWAuXG4gICAgICpcbiAgICAgKiBNb3N0IG1vYmlsZSBkZXZpY2VzIGRvIG5vdCBzdXBwb3J0IGFuIGluZGVwZW5kZW50IHZvbHVtZSBmcm9tIHRoZVxuICAgICAqIHN5c3RlbSB2b2x1bWUuIEluIHRob3NlIGNhc2VzLCB0aGlzIG1ldGhvZCB3aWxsIGFsd2F5cyByZXR1cm4gYDFgLlxuICAgICAqXG4gICAgICogQHJldHVybiB7R2V0Vm9sdW1lUHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFZvbHVtZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWb2x1bWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ3ZvbHVtZScpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdG8gc2V0IHRoZSB2b2x1bWUgbGV2ZWwgb2YgdGhlIHBsYXllci5cbiAgICAgKlxuICAgICAqIEBwcm9taXNlIFNldFZvbHVtZVByb21pc2VcbiAgICAgKiBAZnVsZmlsbCB7bnVtYmVyfSBUaGUgdm9sdW1lIHdhcyBzZXQuXG4gICAgICogQHJlamVjdCB7UmFuZ2VFcnJvcn0gVGhlIHZvbHVtZSB3YXMgbGVzcyB0aGFuIDAgb3IgZ3JlYXRlciB0aGFuIDEuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHZvbHVtZSBvZiB0aGUgcGxheWVyIG9uIGEgc2NhbGUgZnJvbSBgMGAgdG8gYDFgLiBXaGVuIHNldFxuICAgICAqIHZpYSB0aGUgQVBJLCB0aGUgdm9sdW1lIGxldmVsIHdpbGwgbm90IGJlIHN5bmNocm9uaXplZCB0byBvdGhlclxuICAgICAqIHBsYXllcnMgb3Igc3RvcmVkIGFzIHRoZSB2aWV3ZXLigJlzIHByZWZlcmVuY2UuXG4gICAgICpcbiAgICAgKiBNb3N0IG1vYmlsZSBkZXZpY2VzIGRvIG5vdCBzdXBwb3J0IHNldHRpbmcgdGhlIHZvbHVtZS4gQW4gZXJyb3Igd2lsbFxuICAgICAqICpub3QqIGJlIHRyaWdnZXJlZCBpbiB0aGF0IHNpdHVhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2b2x1bWVcbiAgICAgKiBAcmV0dXJuIHtTZXRWb2x1bWVQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2V0Vm9sdW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZvbHVtZSh2b2x1bWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldCgndm9sdW1lJywgdm9sdW1lKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGxheWVyO1xufSgpOyAvLyBTZXR1cCBlbWJlZCBvbmx5IGlmIHRoaXMgaXMgbm90IGEgbm9kZSBlbnZpcm9ubWVudFxuXG5cbmlmICghaXNOb2RlKSB7XG4gIHNjcmVlbmZ1bGwgPSBpbml0aWFsaXplU2NyZWVuZnVsbCgpO1xuICBpbml0aWFsaXplRW1iZWRzKCk7XG4gIHJlc2l6ZUVtYmVkcygpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBQbGF5ZXI7XG4iLCJleHBvcnQgZGVmYXVsdCAoKSA9PiB7XHJcblx0aWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuanMtbWFyYmxlLWRpc21pc3NhYmxlLWFsZXJ0XCIpKSB7XHJcblx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmpzLW1hcmJsZS1kaXNtaXNzLWFsZXJ0LWJ1dHRvblwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuXHRcdFx0ZS50YXJnZXQuY2xvc2VzdChcIi5qcy1tYXJibGUtZGlzbWlzc2FibGUtYWxlcnRcIikuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIik7XHJcblx0XHR9KTtcclxuXHR9XHJcbn07XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFuYWx5dGljc0xvZ2dlciB7XHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHRjb25zb2xlLnRyYWNlKFwiTmV3IGFuYWx5dGljcyBsb2dnZXIgaW5zdGFudGlhdGVkXCIpO1xyXG5cdH1cclxuXHJcblx0c2VuZEN1c3RvbUV2ZW50KGFyZ3MpIHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdGNvbnNvbGUubG9nKFwiQW5hbHl0aWNzIGV2ZW50OiBcIiwgYXJncyk7XHJcblx0XHR9IGNhdGNoIChlcnIpIHtcclxuXHRcdFx0Y29uc29sZS5lcnJvcihlcnIpO1xyXG5cdFx0fVxyXG5cdH1cclxufSIsImltcG9ydCB7IGVzY2FwZSB9IGZyb20gXCJ1bmRlcnNjb3JlXCI7XHJcbmltcG9ydCB0aW1lRm9ybWF0dGVyIGZyb20gXCIuL3RpbWUtZm9ybWF0dGVyLmpzXCI7XHJcbmltcG9ydCBjb3ZlckltYWdlVGVtcGxhdGUgZnJvbSBcIi4vY292ZXItaW1hZ2UtdGVtcGxhdGVcIjtcclxuaW1wb3J0IEFuYWx5dGljc0xvZ2dlciBmcm9tIFwiLi4vYW5hbHl0aWNzLWxvZ2dlclwiO1xyXG5cclxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XHJcblx0ZGFya01vZGU6IGZhbHNlLFxyXG5cdHNlZWtIZWxwZXJEdXJhdGlvbjogMTBcclxufTtcclxuXHJcbmNsYXNzIEF1ZGlvUGxheWVyIHtcclxuXHRjb25zdHJ1Y3Rvcih7d3JhcHBlckVsLCBvcHRpb25zPXt9fSkge1xyXG5cdFx0dGhpcy53cmFwcGVyRWxcdFx0XHRcdFx0XHRcdFx0PSB3cmFwcGVyRWw7XHJcblx0XHR0aGlzLmF1ZGlvRWxcdFx0XHRcdFx0XHRcdFx0XHQ9XHR3cmFwcGVyRWwucXVlcnlTZWxlY3RvcihcIi5qcy1hdWRpby1wbGF5ZXJfX2F1ZGlvXCIpO1xyXG5cdFx0dGhpcy5jb3ZlckltYWdlV3JhcHBlckVsICAgICBcdD0gd3JhcHBlckVsLnF1ZXJ5U2VsZWN0b3IoXCIuanMtYXVkaW8tcGxheWVyX19pbWFnZS13cmFwcGVyXCIpO1xyXG5cdFx0dGhpcy5kYXJrTW9kZVF1ZXJ5XHRcdFx0XHRcdFx0PSB3aW5kb3cubWF0Y2hNZWRpYShcIihwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyaylcIik7XHJcblx0XHR0aGlzLnByb2dyZXNzQmFyQ2FudmFzRWwgXHRcdFx0PSB3cmFwcGVyRWwucXVlcnlTZWxlY3RvcihcIi5qcy1hdWRpby1wbGF5ZXJfX3Byb2dyZXNzLWJhclwiKTtcclxuXHRcdHRoaXMucHJvZ3Jlc3NCYXJDYW52YXNcdFx0XHRcdD0gdGhpcy5wcm9ncmVzc0JhckNhbnZhc0VsLmdldENvbnRleHQoXCIyZFwiKTtcclxuXHRcdHRoaXMucGxheUJ1dHRvbkVsIFx0XHRcdFx0XHRcdD0gd3JhcHBlckVsLnF1ZXJ5U2VsZWN0b3IoXCIuanMtYXVkaW8tcGxheWVyX19wbGF5XCIpO1xyXG5cdFx0dGhpcy5wbGF5bGlzdFRyYWNrcyBcdFx0XHRcdFx0PSB3cmFwcGVyRWwucXVlcnlTZWxlY3RvckFsbChcIi5qcy1hdWRpby1wbGF5ZXJfX3BsYXlsaXN0LXRyYWNrXCIpO1xyXG5cdFx0dGhpcy5jdXJyZW50VGltZUVsIFx0XHRcdFx0XHRcdD0gd3JhcHBlckVsLnF1ZXJ5U2VsZWN0b3IoXCIuanMtYXVkaW8tcGxheWVyX19jdXJyZW50LXRpbWVcIik7XHJcblx0XHR0aGlzLnRpbWVSZW1haW5pbmdFbCBcdFx0XHRcdFx0PSB3cmFwcGVyRWwucXVlcnlTZWxlY3RvcihcIi5qcy1hdWRpby1wbGF5ZXJfX3JlbWFpbmluZ1wiKTtcclxuXHRcdHRoaXMuc2Vla0JhY2tIZWxwZXJFbCBcdFx0XHRcdD0gd3JhcHBlckVsLnF1ZXJ5U2VsZWN0b3IoXCIuanMtYXVkaW8tcGxheWVyX19zZWVrLWJhY2staGVscGVyXCIpO1xyXG5cdFx0dGhpcy5zZWVrRm9yd2FyZEhlbHBlckVsIFx0XHRcdD0gd3JhcHBlckVsLnF1ZXJ5U2VsZWN0b3IoXCIuanMtYXVkaW8tcGxheWVyX19zZWVrLWZvcndhcmQtaGVscGVyXCIpO1xyXG5cdFx0dGhpcy5zY3J1YlN0YXJ0QXJlYUVsIFx0XHRcdFx0PSB3cmFwcGVyRWwucXVlcnlTZWxlY3RvcihcIi5qcy1hdWRpby1wbGF5ZXJfX3NjcnViYmluZy1zdGFydC1hcmVhXCIpO1xyXG5cdFx0dGhpcy5zY3J1YmJhYmxlQXJlYUVsIFx0XHRcdFx0PSB3cmFwcGVyRWwucXVlcnlTZWxlY3RvcihcIi5qcy1hdWRpby1wbGF5ZXJfX3NjcnViYmFibGUtYXJlYVwiKTtcclxuXHRcdHRoaXMuc3VidGl0bGVFbCBcdFx0XHRcdFx0XHRcdD0gd3JhcHBlckVsLnF1ZXJ5U2VsZWN0b3IoXCIuanMtYXVkaW8tcGxheWVyX19zdWJ0aXRsZVwiKTtcclxuXHRcdHRoaXMudGl0bGVFbFx0XHRcdFx0XHRcdFx0XHRcdD0gd3JhcHBlckVsLnF1ZXJ5U2VsZWN0b3IoXCIuanMtYXVkaW8tcGxheWVyX190aXRsZVwiKTtcclxuXHRcdHRoaXMudHJhbnNjcmlwdEVsXHRcdFx0XHRcdFx0XHQ9IHdyYXBwZXJFbC5xdWVyeVNlbGVjdG9yKFwiLmpzLWF1ZGlvLXBsYXllcl9fdHJhbnNjcmlwdFwiKTtcclxuXHRcdHRoaXMudHJhbnNjcmlwdFNlY3Rpb24gXHRcdFx0XHQ9IHdyYXBwZXJFbC5xdWVyeVNlbGVjdG9yKFwiLmpzLWF1ZGlvLXBsYXllcl9fdHJhbnNjcmlwdC1zZWN0aW9uXCIpO1xyXG5cdFx0dGhpcy50cmFuc2NyaXB0VG9nZ2xlXHRcdFx0XHRcdD0gdGhpcy50cmFuc2NyaXB0U2VjdGlvbj8ucXVlcnlTZWxlY3RvcihcIi5qcy1hdWRpby1wbGF5ZXJfX3RyYW5zY3JpcHQtdG9nZ2xlXCIpO1xyXG5cdFx0dGhpcy50cmFuc2NyaXB0VG9nZ2xlVGV4dCBcdFx0PSB0aGlzLnRyYW5zY3JpcHRTZWN0aW9uPy5xdWVyeVNlbGVjdG9yKFwiLmpzLXRyYW5zY3JpcHRfX3RvZ2dsZS10ZXh0XCIpO1xyXG5cdFx0dGhpcy50cmFuc2NyaXB0V3JhcHBlciBcdFx0XHRcdD0gdGhpcy50cmFuc2NyaXB0U2VjdGlvbj8ucXVlcnlTZWxlY3RvcihcIi5qcy1hdWRpby1wbGF5ZXJfX3RyYW5zY3JpcHQtd3JhcHBlclwiKTtcclxuXHRcdHRoaXMucXVvdGVFeHBhbmRlckRlZmF1bHRUZXh0XHQ9IHRoaXM/LnRyYW5zY3JpcHRUb2dnbGVUZXh0Py5pbm5lckhUTUw7XHJcblxyXG5cdFx0Ly8gT3B0aW9uc1xyXG5cdFx0dGhpcy5vcHRpb25zID0gey4uLmRlZmF1bHRPcHRpb25zLCAuLi5vcHRpb25zfTtcclxuXHRcdHRoaXMuaXNEYXJrTW9kZSA9IHRoaXMub3B0aW9ucy5kYXJrTW9kZSB8fCB0aGlzLndyYXBwZXJFbC5jbGFzc0xpc3QuY29udGFpbnMoXCJpbnZlcnRlZC1jb2xvcnNcIikgfHwgdGhpcy5kYXJrTW9kZVF1ZXJ5Lm1hdGNoZXM7XHJcblx0XHR0aGlzLnNlZWtIZWxwZXJEdXJhdGlvbiA9IHRoaXMub3B0aW9ucy5zZWVrSGVscGVyRHVyYXRpb247XHJcblx0XHR0aGlzLmFuYWx5dGljc1NlbmRlciA9IHRoaXMub3B0aW9ucy5hbmFseXRpY3NTZW5kZXIgfHwgbmV3IEFuYWx5dGljc0xvZ2dlcigpO1xyXG5cclxuXHRcdC8vIFN0YXRlXHJcblx0XHR0aGlzLmlzU2NydWJiaW5nID0gZmFsc2U7XHJcblx0XHR0aGlzLmN1cnJlbnRUcmFjayA9IEpTT04ucGFyc2UodGhpcy5hdWRpb0VsLmRhdGFzZXQudHJhY2spO1xyXG5cdFx0dGhpcy5hbW91bnRQbGF5ZWQgPSAwO1xyXG5cclxuXHRcdC8vIEV2ZW50c1xyXG5cdFx0dGhpcy5iZWZvcmVUcmFja0NoYW5nZSA9IG5ldyBFdmVudChcImJlZm9yZVRyYWNrQ2hhbmdlXCIpO1xyXG5cdFx0dGhpcy5hZnRlclRyYWNrQ2hhbmdlID0gbmV3IEV2ZW50KFwiYWZ0ZXJUcmFja0NoYW5nZVwiKTtcclxuXHJcblx0XHQvLyBiaW5kIGxpc3RlbmVycyB0byB0aGlzIG9iamVjdCBhbmQgc2F2ZSB0aGUgcmV0dXJuZWQgZnVuY3Rpb24gcmVmZXJlbmNlLCBzbyB0aGV5IGNhbiBiZSBhZGRlZC9yZW1vdmVkIGluIHRoZSByaWdodCBzY29wZVxyXG5cdFx0W1wiX2hhbmRsZVRpbWVDaGFuZ2VcIixcclxuXHRcdFx0XCJiZWdpblNjcnViYmluZ1wiLFxyXG5cdFx0XHRcImVuZFNjcnViYmluZ1wiLFxyXG5cdFx0XHRcImZvcm1hdFRyYW5zY3JpcHRcIixcclxuXHRcdFx0XCJoYW5kbGVUcmFja0NoYW5nZVwiLFxyXG5cdFx0XHRcImhhbmRsZUVuZFwiLFxyXG5cdFx0XHRcImhhbmRsZVRpbWVDaGFuZ2VcIixcclxuXHRcdFx0XCJoYW5kbGVUcmFuc2NyaXB0VG9nZ2xlXCIsXHJcblx0XHRcdFwiaGFzVHJhbnNjcmlwdFwiLFxyXG5cdFx0XHRcInF1aWNrU2Vla0JhY2tcIixcclxuXHRcdFx0XCJxdWlja1NlZWtGb3J3YXJkXCIsXHJcblx0XHRcdFwic2NydWJcIixcclxuXHRcdFx0XCJzZXRNZXRhRGF0YVwiLFxyXG5cdFx0XHRcInNldFRyYW5zY3JpcHRcIixcclxuXHRcdFx0XCJ0b2dnbGVQbGF5aW5nXCJdLmZvckVhY2goKGxpc3RlbmVyKSA9PiB7XHJcblx0XHRcdHRoaXNbbGlzdGVuZXJdID0gdGhpc1tsaXN0ZW5lcl0uYmluZCh0aGlzKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdHRoaXMuYXBwbHlMaXN0ZW5lcnMoKTtcclxuXHRcdHRoaXMuc2V0VHJhbnNjcmlwdCgpOyAvLyBmb3JtYXQgdHJhbnNjcmlwdCBpZiB0aGVyZSBpcyBvbmVcclxuXHRcdHRoaXMuYW5hbHl0aWNzU2VuZGVyLnNlbmRDdXN0b21FdmVudCh7XHJcblx0XHRcdGV2ZW50OiBcIlVuaXZlcnNhbEF1ZGlvUGxheWVyOnBsYXllckxvYWRlZFwiLFxyXG5cdFx0XHRwbGF5ZXJJZDogdGhpcy53cmFwcGVyRWwuaWRcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0YXBwbHlMaXN0ZW5lcnMoKSB7XHJcblx0XHQvLyBJbml0aWFsaXplIPCfkoHigI3imYLvuI9cclxuXHRcdHRoaXMuYXVkaW9FbC5hZGRFdmVudExpc3RlbmVyKFwibG9hZGVkbWV0YWRhdGFcIiwgdGhpcy5zZXRNZXRhRGF0YSk7XHJcblxyXG5cdFx0Ly8gUGxheWJhY2sg4o+vXHJcblx0XHR0aGlzLnBsYXlCdXR0b25FbC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCB0aGlzLnRvZ2dsZVBsYXlpbmcsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcblx0XHR0aGlzLnBsYXlCdXR0b25FbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy50b2dnbGVQbGF5aW5nKTtcclxuXHRcdHRoaXMuYXVkaW9FbC5hZGRFdmVudExpc3RlbmVyKFwidGltZXVwZGF0ZVwiLCB0aGlzLmhhbmRsZVRpbWVDaGFuZ2UpO1xyXG5cdFx0dGhpcy5hdWRpb0VsLmFkZEV2ZW50TGlzdGVuZXIoXCJlbmRlZFwiLCB0aGlzLmhhbmRsZUVuZCk7XHJcblxyXG5cdFx0Ly9Gb3Igd2hlbiBwbGF5L3BhdXNlIGlzIGluaXRpYXRlZCBmcm9tIGVsc2V3aGVyZSAocGhvbmUgbG9jayBzY3JlZW4sIHRhc2sgYmFyLCBldGMuLi4pXHJcblx0XHR0aGlzLmF1ZGlvRWwuYWRkRXZlbnRMaXN0ZW5lcihcInBsYXlcIiwgKCkgPT4gdGhpcy5oYW5kbGVQbGF5KCkpO1xyXG5cdFx0dGhpcy5hdWRpb0VsLmFkZEV2ZW50TGlzdGVuZXIoXCJwYXVzZVwiLCAoKSA9PiB0aGlzLmhhbmRsZVBhdXNlKCkpO1xyXG5cclxuXHRcdC8vIFBsYXlsaXN0IPCfkr9cclxuXHRcdHRoaXMucGxheWxpc3RUcmFja3MuZm9yRWFjaCh0cmFja0VsID0+IHtcclxuXHRcdFx0dHJhY2tFbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVUcmFja0NoYW5nZSk7XHJcblx0XHR9KTtcclxuXHJcblx0XHR0aGlzLnBsYXlsaXN0VHJhY2tzWzBdPy5jbGFzc0xpc3QuYWRkKFwiaXMtYWN0aXZlLXRyYWNrXCIpO1xyXG5cclxuXHRcdC8vIFF1aWNrc2VlayDwn5SOXHJcblx0XHR0aGlzLnNlZWtCYWNrSGVscGVyRWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMucXVpY2tTZWVrQmFjayk7XHJcblx0XHR0aGlzLnNlZWtGb3J3YXJkSGVscGVyRWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMucXVpY2tTZWVrRm9yd2FyZCk7XHJcblxyXG5cdFx0Ly8gU2NydWJiaW5nIPCfp71cclxuXHRcdHRoaXMuc2NydWJTdGFydEFyZWFFbC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCB0aGlzLmJlZ2luU2NydWJiaW5nLCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xyXG5cdFx0dGhpcy5zY3J1YlN0YXJ0QXJlYUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5iZWdpblNjcnViYmluZyk7XHJcblxyXG5cdFx0Ly8gVHJhbnNjcmlwdCDwn5OcXHJcblx0XHR0aGlzLnRyYW5zY3JpcHRUb2dnbGU/LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhhbmRsZVRyYW5zY3JpcHRUb2dnbGUpO1xyXG5cclxuXHRcdC8vIERhcmsvbGlnaHQgdHJhbnNpdGlvbnMg8J+MniAvIPCfjJpcclxuXHRcdGlmICh0eXBlb2YgdGhpcy5kYXJrTW9kZVF1ZXJ5LmFkZEV2ZW50TGlzdGVuZXIgPT09IFwiZnVuY3Rpb25cIikge1xyXG5cdFx0XHQvLyBzYWZldHkgY2hlY2sgZm9yIG9sZGVyIGJyb3dzZXJzIHRoYXQgZG9uJ3Qgc3VwcG9ydCBhZGRFdmVudExpc3RlbmVyIG9uIE1lZGlhUXVlcnlMaXN0XHJcblx0XHRcdC8vIHNlZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL01lZGlhUXVlcnlMaXN0I2Jyb3dzZXJfY29tcGF0aWJpbGl0eVxyXG5cdFx0XHR0aGlzLmRhcmtNb2RlUXVlcnkuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAocXVlcnkpID0+IHsgcmV0dXJuIHRoaXMuaXNEYXJrTW9kZSA9IHF1ZXJ5Lm1hdGNoZXM7IH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aGFuZGxlVHJhY2tDaGFuZ2UoZSkge1xyXG5cdFx0Y29uc3QgbmV3VHJhY2tFbCA9IGUuY3VycmVudFRhcmdldDtcclxuXHRcdC8vSWYgYWxyZWFkeSBhY3RpdmUgdHJhY2ssIGlnbm9yZS5cclxuXHRcdGlmIChuZXdUcmFja0VsLmNsYXNzTGlzdC5jb250YWlucyhcImlzLWFjdGl2ZS10cmFja1wiKSkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy53cmFwcGVyRWwuZGlzcGF0Y2hFdmVudCh0aGlzLmJlZm9yZVRyYWNrQ2hhbmdlKTtcclxuXHRcdHRoaXMud3JhcHBlckVsLnF1ZXJ5U2VsZWN0b3IoXCIuaXMtYWN0aXZlLXRyYWNrXCIpLmNsYXNzTGlzdC5yZW1vdmUoXCJpcy1hY3RpdmUtdHJhY2tcIik7XHJcblx0XHRuZXdUcmFja0VsLmNsYXNzTGlzdC5hZGQoXCJpcy1hY3RpdmUtdHJhY2tcIik7XHJcblx0XHRsZXQgbmV3VHJhY2sgPSBKU09OLnBhcnNlKG5ld1RyYWNrRWwuZGF0YXNldC50cmFjayk7XHJcblx0XHR0aGlzLnNldFRyYWNrKG5ld1RyYWNrKTtcclxuXHRcdHRoaXMuc2V0VHJhbnNjcmlwdCgpO1xyXG5cdFx0dGhpcy5hdWRpb0VsLnBsYXkoKTtcclxuXHRcdHRoaXMud3JhcHBlckVsLmRpc3BhdGNoRXZlbnQodGhpcy5hZnRlclRyYWNrQ2hhbmdlKTtcclxuXHR9XHJcblxyXG5cdHNldFRyYWNrKHRyYWNrKSB7XHJcblx0XHR0aGlzLmN1cnJlbnRUcmFjayA9IHRyYWNrO1xyXG5cdFx0dGhpcy5hdWRpb0VsLmRhdGFzZXQudHJhY2sgPSB0cmFjaztcclxuXHRcdHRoaXMuYXVkaW9FbC5xdWVyeVNlbGVjdG9yKFwic291cmNlXCIpLnNyYyA9IHRyYWNrLmF1ZGlvO1xyXG5cdFx0dGhpcy50aXRsZUVsLmlubmVySFRNTCA9IGVzY2FwZSh0cmFjay50aXRsZSk7XHJcblx0XHR0aGlzLnN1YnRpdGxlRWwuaW5uZXJIVE1MID0gZXNjYXBlKHRyYWNrLmRlc2NyaXB0aW9uKTtcclxuXHRcdHRoaXMuY292ZXJJbWFnZVdyYXBwZXJFbC5pbm5lckhUTUwgPSBjb3ZlckltYWdlVGVtcGxhdGUodHJhY2suaW1hZ2UpO1xyXG5cdFx0dGhpcy5hbW91bnRQbGF5ZWQgPSAwO1xyXG5cdFx0dGhpcy5hdWRpb0VsLmxvYWQoKTsgLy8gbG9hZCB0aGUgbmV3IHRyYWNrLCB0aGlzIHdpbGwgZmlyZSBtZXRhZGF0YWxvYWRlZCwgYnR3XHJcblx0fVxyXG5cclxuXHRoYXNUcmFuc2NyaXB0KCkge1xyXG5cdFx0cmV0dXJuICEhdGhpcy5jdXJyZW50VHJhY2s/LnRyYW5zY3JpcHQ/Lmxlbmd0aDtcclxuXHR9XHJcblxyXG5cdHNldFRyYW5zY3JpcHQoKSB7XHJcblx0XHR0aGlzLnRyYW5zY3JpcHRTZWN0aW9uLmNsYXNzTGlzdC5yZW1vdmUoYGF1ZGlvLXBsYXllcl9fdHJhbnNjcmlwdC1zZWN0aW9uLS10cmFuc2NyaXB0LSR7IXRoaXMuaGFzVHJhbnNjcmlwdCgpfWApO1xyXG5cdFx0dGhpcy50cmFuc2NyaXB0U2VjdGlvbi5jbGFzc0xpc3QuYWRkKGBhdWRpby1wbGF5ZXJfX3RyYW5zY3JpcHQtc2VjdGlvbi0tdHJhbnNjcmlwdC0ke3RoaXMuaGFzVHJhbnNjcmlwdCgpfWApO1xyXG5cdFx0dGhpcy50cmFuc2NyaXB0RWwuaW5uZXJIVE1MID0gdGhpcy5oYXNUcmFuc2NyaXB0KCkgPyB0aGlzLmZvcm1hdFRyYW5zY3JpcHQodGhpcy5jdXJyZW50VHJhY2sudHJhbnNjcmlwdCkgOiBcIlwiO1xyXG5cdH1cclxuXHJcblx0Zm9ybWF0VHJhbnNjcmlwdCh0ZXh0KSB7XHJcblx0XHRyZXR1cm4gdGV4dC5yZXBsYWNlKC9cXG58XFxyXFxuL2dtaSxcIjxiciAvPlwiKTtcclxuXHR9XHJcblxyXG5cdGhhbmRsZVRpbWVDaGFuZ2UoKSB7XHJcblx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5faGFuZGxlVGltZUNoYW5nZSk7XHJcblx0fVxyXG5cclxuXHRfaGFuZGxlVGltZUNoYW5nZSgpIHtcclxuXHRcdGNvbnN0IGR1cmF0aW9uID0gdGhpcy5hdWRpb0VsLmR1cmF0aW9uIHx8IDA7XHJcblx0XHRjb25zdCBlbGFwc2VkID0gdGhpcy5hdWRpb0VsLmN1cnJlbnRUaW1lIHx8IDA7XHJcblx0XHR0aGlzLnNldERpc3BsYXlUaW1lKGVsYXBzZWQsIGR1cmF0aW9uKTtcclxuXHRcdHRoaXMuZHJhd1Byb2dyZXNzKGVsYXBzZWQsIGR1cmF0aW9uKTtcclxuXHRcdHRoaXMuY2FsY3VsYXRlUGxheUFuYWx5dGljcyhlbGFwc2VkLCBkdXJhdGlvbik7XHJcblx0fVxyXG5cclxuXHRjYWxjdWxhdGVQbGF5QW5hbHl0aWNzKGVsYXBzZWQsIGR1cmF0aW9uKSB7XHJcblx0XHRpZiAoZWxhcHNlZCAmJiBkdXJhdGlvbikge1xyXG5cdFx0XHRsZXQgY3VycmVudFRlbnRoID0gTWF0aC5yb3VuZCgoZWxhcHNlZC9kdXJhdGlvbikgKiAxMCkgLyAxMDtcclxuXHRcdFx0aWYgKHRoaXMuYW1vdW50UGxheWVkIDwgY3VycmVudFRlbnRoKSB7XHJcblx0XHRcdFx0dGhpcy5hbW91bnRQbGF5ZWQgPSBjdXJyZW50VGVudGg7XHJcblx0XHRcdFx0dGhpcy5hbmFseXRpY3NTZW5kZXIuc2VuZEN1c3RvbUV2ZW50KHtcclxuXHRcdFx0XHRcdGV2ZW50OiBcIlVuaXZlcnNhbEF1ZGlvUGxheWVyOnBsYXlQcm9ncmVzczpcIixcclxuXHRcdFx0XHRcdHRyYWNrSWQ6IHRoaXMuY3VycmVudFRyYWNrLmlkLFxyXG5cdFx0XHRcdFx0dHJhY2tUaXRsZTogdGhpcy5jdXJyZW50VHJhY2sudGl0bGUsXHJcblx0XHRcdFx0XHRwcm9ncmVzczogdGhpcy5hbW91bnRQbGF5ZWRcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aGFuZGxlRW5kKCkge1xyXG5cdFx0dGhpcy5oYW5kbGVUaW1lQ2hhbmdlKCk7XHJcblx0XHR0aGlzLmF1ZGlvRWwucGF1c2UoKTtcclxuXHR9XHJcblxyXG5cdHNldERpc3BsYXlUaW1lKGVsYXBzZWQsIGR1cmF0aW9uKSB7XHJcblx0XHR0aGlzLmN1cnJlbnRUaW1lRWwuaW5uZXJIVE1MID0gdGltZUZvcm1hdHRlcihlbGFwc2VkKTtcclxuXHRcdHRoaXMudGltZVJlbWFpbmluZ0VsLmlubmVySFRNTCA9IHRpbWVGb3JtYXR0ZXIoZHVyYXRpb24gLSBlbGFwc2VkKTtcclxuXHR9XHJcblxyXG5cdGNhblVwZGF0ZUF1b3RtYXRpY2FsbHkoKSB7cmV0dXJuICF0aGlzLmlzU2NydWJiaW5nO31cclxuXHJcblx0ZHJhd1Byb2dyZXNzKGVsYXBzZWQsIGR1cmF0aW9uLCB3aWR0aCA9IDEwMDAwKSB7XHJcblx0XHR0aGlzLnByb2dyZXNzQmFyQ2FudmFzLnNhdmUoKTtcclxuXHRcdHRoaXMucHJvZ3Jlc3NCYXJDYW52YXMuY2xlYXJSZWN0KDAsIDAsIHdpZHRoLCA2KTtcclxuXHRcdHRoaXMucHJvZ3Jlc3NCYXJDYW52YXMuZmlsbFN0eWxlID0gXCJ0cmFuc3BhcmVudFwiO1xyXG5cdFx0dGhpcy5wcm9ncmVzc0JhckNhbnZhcy5maWxsUmVjdCgwLCAwLCB3aWR0aCwgNik7XHJcblx0XHR0aGlzLnByb2dyZXNzQmFyQ2FudmFzLmZpbGxTdHlsZSA9IHRoaXMuaXNEYXJrTW9kZVxyXG5cdFx0XHQ/IFwiI2ZmZmZmZlwiIC8vICRjb2xvci13aGl0ZVxyXG5cdFx0XHQ6IFwiIzMzMzMzM1wiOyAvLyAkY29sb3ItZ3JleS05MDBcclxuXHRcdHRoaXMucHJvZ3Jlc3NCYXJDYW52YXMuZmlsbFJlY3QoMCwgMCwgKGVsYXBzZWQgLyBkdXJhdGlvbikgKiB3aWR0aCwgNik7XHJcblx0XHR0aGlzLnByb2dyZXNzQmFyQ2FudmFzLnJlc3RvcmUoKTtcclxuXHR9XHJcblxyXG5cdGJlZ2luU2NydWJiaW5nKGUpIHtcclxuXHRcdGUucHJldmVudERlZmF1bHQoKTsgLy8gZG9uJ3QgZmlyZSByZWR1bmRhbnQgbW91c2UgZXZlbnQsIGlmIHRoaXMgd2FzIGEgdG91Y2hcclxuXHRcdHRoaXMuaXNTY3J1YmJpbmcgPSB0cnVlO1xyXG5cdFx0dGhpcy5pbml0aWFsaXplU2NydWJiaW5nTGlzdGVuZXJzKCk7XHJcblx0XHR0aGlzLnNjcnViKGUpO1xyXG5cdH1cclxuXHJcblx0aW5pdGlhbGl6ZVNjcnViYmluZ0xpc3RlbmVycygpIHtcclxuXHRcdC8vIHRvdWNoXHJcblx0XHR0aGlzLnNjcnViYmFibGVBcmVhRWwuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCB0aGlzLnNjcnViLCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xyXG5cdFx0dGhpcy5zY3J1YmJhYmxlQXJlYUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCB0aGlzLmVuZFNjcnViYmluZywgeyBwYXNzaXZlOiBmYWxzZSB9KTtcclxuXHRcdHRoaXMuc2NydWJiYWJsZUFyZWFFbC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hjYW5jZWxcIiwgdGhpcy5lbmRTY3J1YmJpbmcsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcblx0XHQvLyBtb3VzZVxyXG5cdFx0dGhpcy5zY3J1YmJhYmxlQXJlYUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5zY3J1Yik7XHJcblx0XHR0aGlzLnNjcnViYmFibGVBcmVhRWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5lbmRTY3J1YmJpbmcpO1xyXG5cdFx0dGhpcy5zY3J1YmJhYmxlQXJlYUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIHRoaXMuZW5kU2NydWJiaW5nKTtcclxuXHR9XHJcblxyXG5cdHNjcnViKGUpIHtcclxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcblx0XHRpZiAodGhpcy5pc1NjcnViYmluZykge1xyXG5cdFx0XHRsZXQgY2FudmFzUmVjdGFuZ2xlID0gdGhpcy5wcm9ncmVzc0JhckNhbnZhc0VsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cdFx0XHRsZXQgb2Zmc2V0WDtcclxuXHJcblx0XHRcdGlmIChbXCJ0b3VjaHN0YXJ0XCIsIFwidG91Y2htb3ZlXCJdLmluY2x1ZGVzKGUudHlwZSkpIHtcclxuXHRcdFx0XHRvZmZzZXRYID0gZS50b3VjaGVzWzBdLmNsaWVudFggLSBjYW52YXNSZWN0YW5nbGUubGVmdDtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRvZmZzZXRYID0gZS5vZmZzZXRYO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRsZXQgY3VycmVudFNlY29uZCA9XHJcblx0XHRcdFx0KG9mZnNldFggLyBjYW52YXNSZWN0YW5nbGUud2lkdGgpICogdGhpcy5hdWRpb0VsLmR1cmF0aW9uO1xyXG5cdFx0XHR0aGlzLmF1ZGlvRWwuY3VycmVudFRpbWUgPSBjdXJyZW50U2Vjb25kO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZW5kU2NydWJiaW5nKGUpIHtcclxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdHRoaXMuaXNTY3J1YmJpbmcgPSBmYWxzZTtcclxuXHRcdHRoaXMuY2xlYW5VcFNjcnViTGlzdGVuZXJzKCk7XHJcblx0fVxyXG5cclxuXHRjbGVhblVwU2NydWJMaXN0ZW5lcnMoKSB7XHJcblx0XHQvLyB0b3VjaFxyXG5cdFx0dGhpcy5zY3J1YmJhYmxlQXJlYUVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgdGhpcy5zY3J1YiwgeyBwYXNzaXZlOiBmYWxzZSB9KTtcclxuXHRcdHRoaXMuc2NydWJiYWJsZUFyZWFFbC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgdGhpcy5lbmRTY3J1YmJpbmcsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcblx0XHR0aGlzLnNjcnViYmFibGVBcmVhRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoY2FuY2VsXCIsIHRoaXMuZW5kU2NydWJiaW5nLCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xyXG5cdFx0Ly8gbW91c2VcclxuXHRcdHRoaXMuc2NydWJiYWJsZUFyZWFFbC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMuc2NydWIpO1xyXG5cdFx0dGhpcy5zY3J1YmJhYmxlQXJlYUVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMuZW5kU2NydWJiaW5nKTtcclxuXHRcdHRoaXMuc2NydWJiYWJsZUFyZWFFbC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCB0aGlzLmVuZFNjcnViYmluZyk7XHJcblx0fVxyXG5cclxuXHRzZXRNZXRhRGF0YSgpIHtcclxuXHRcdGlmICghKFwibWVkaWFTZXNzaW9uXCIgaW4gbmF2aWdhdG9yKSkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblx0XHRsZXQgYXJ0d29yayA9IFtdO1xyXG5cdFx0bGV0IHNyYyA9IHRoaXMuY3VycmVudFRyYWNrPy5pbWFnZT8udzU2MDtcclxuXHRcdHNyYyAmJiBhcnR3b3JrLnB1c2goe3NyY30pO1xyXG5cclxuXHRcdG5hdmlnYXRvci5tZWRpYVNlc3Npb24ubWV0YWRhdGEgPSBuZXcgTWVkaWFNZXRhZGF0YSh7XHJcblx0XHRcdHRpdGxlOiB0aGlzLmN1cnJlbnRUcmFjay50aXRsZSxcclxuXHRcdFx0YXJ0aXN0OiB0aGlzLmN1cnJlbnRUcmFjay5kZXNjcmlwdGlvbixcclxuXHRcdFx0YXJ0d29ya1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHR0b2dnbGVQbGF5aW5nKGUpIHtcclxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdGlmICh0aGlzLmF1ZGlvRWwucGF1c2VkKSB7XHJcblx0XHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJhdWRpb1wiKS5mb3JFYWNoKGF1ZGlvRWwgPT4gYXVkaW9FbC5wYXVzZSgpKTtcclxuXHRcdFx0dGhpcy5hdWRpb0VsLnBsYXkoKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMuYXVkaW9FbC5wYXVzZSgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aGFuZGxlUGxheSgpIHtcclxuXHRcdHRoaXMud3JhcHBlckVsLmNsYXNzTGlzdC5hZGQoXCJpcy1wbGF5aW5nXCIpO1xyXG5cdFx0dGhpcy5hbmFseXRpY3NTZW5kZXIuc2VuZEN1c3RvbUV2ZW50KHtcclxuXHRcdFx0ZXZlbnQ6IFwiVW5pdmVyc2FsQXVkaW9QbGF5ZXI6dHJhY2tQbGF5ZWRcIixcclxuXHRcdFx0dHJhY2tJZDogdGhpcy5jdXJyZW50VHJhY2suaWQsXHJcblx0XHRcdHRyYWNrVGl0bGU6IHRoaXMuY3VycmVudFRyYWNrLnRpdGxlXHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdGhhbmRsZVBhdXNlKCkge1xyXG5cdFx0dGhpcy53cmFwcGVyRWwuY2xhc3NMaXN0LnJlbW92ZShcImlzLXBsYXlpbmdcIik7XHJcblx0fVxyXG5cclxuXHRxdWlja1NlZWtCYWNrKGUpIHtcclxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdGNvbnN0IG5ld1Bvc2l0aW9uID0gTWF0aC5tYXgoXHJcblx0XHRcdDAsXHJcblx0XHRcdHRoaXMuYXVkaW9FbC5jdXJyZW50VGltZSAtIHRoaXMuc2Vla0hlbHBlckR1cmF0aW9uXHJcblx0XHQpO1xyXG5cdFx0dGhpcy5hdWRpb0VsLmN1cnJlbnRUaW1lID0gbmV3UG9zaXRpb247IC8vIHNldHRpbmcgdGhpcyBmaXJlcyB0aW1ldXBkYXRlIGV2ZW50IDspXHJcblx0fVxyXG5cclxuXHRxdWlja1NlZWtGb3J3YXJkKGUpIHtcclxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdGNvbnN0IG5ld1Bvc2l0aW9uID0gTWF0aC5taW4oXHJcblx0XHRcdHRoaXMuYXVkaW9FbC5kdXJhdGlvbixcclxuXHRcdFx0dGhpcy5hdWRpb0VsLmN1cnJlbnRUaW1lICsgdGhpcy5zZWVrSGVscGVyRHVyYXRpb25cclxuXHRcdCk7XHJcblx0XHR0aGlzLmF1ZGlvRWwuY3VycmVudFRpbWUgPSBuZXdQb3NpdGlvbjsgLy8gc2V0dGluZyB0aGlzIGZpcmVzIHRpbWV1cGRhdGUgZXZlbnQgOylcclxuXHR9XHJcblxyXG5cdGhhbmRsZVRyYW5zY3JpcHRUb2dnbGUoZSkge1xyXG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0aWYgKHRoaXMudHJhbnNjcmlwdFNlY3Rpb24uY2xhc3NMaXN0LmNvbnRhaW5zKFwidHJhbnNjcmlwdC1pcy1vcGVuXCIpKSB7XHJcblx0XHRcdHRoaXMudHJhbnNjcmlwdFRvZ2dsZVRleHQuaW5uZXJIVE1MID0gdGhpcy5xdW90ZUV4cGFuZGVyRGVmYXVsdFRleHQ7XHJcblx0XHRcdHRoaXMudHJhbnNjcmlwdFNlY3Rpb24uY2xhc3NMaXN0LnJlbW92ZShcInRyYW5zY3JpcHQtaXMtb3BlblwiKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMudHJhbnNjcmlwdFNlY3Rpb24uY2xhc3NMaXN0LmFkZChcInRyYW5zY3JpcHQtaXMtb3BlblwiKTtcclxuXHRcdFx0dGhpcy50cmFuc2NyaXB0VG9nZ2xlVGV4dC5pbm5lckhUTUwgPSBcIkhpZGUgVHJhbnNjcmlwdFwiO1xyXG5cdFx0XHR0aGlzLmFuYWx5dGljc1NlbmRlci5zZW5kQ3VzdG9tRXZlbnQoe1xyXG5cdFx0XHRcdGV2ZW50OiBcIlVuaXZlcnNhbEF1ZGlvUGxheWVyOnRyYW5zY3JpcHRPcGVuZWRcIixcclxuXHRcdFx0XHR0cmFja0lkOiB0aGlzLmN1cnJlbnRUcmFjay5pZCxcclxuXHRcdFx0XHR0cmFja1RpdGxlOiB0aGlzLmN1cnJlbnRUcmFjay50aXRsZVxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEF1ZGlvUGxheWVyO1xyXG4iLCJpbXBvcnQgeyBlc2NhcGUgfSBmcm9tIFwidW5kZXJzY29yZVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKGltYWdlKSA9PiB7XHJcblx0bGV0IGh0bWwgPSBTdHJpbmcucmF3O1xyXG5cdHJldHVybiBpbWFnZSA/IGh0bWxgPGltZ1xyXG5cdFx0Y2xhc3M9XCJhdWRpby1wbGF5ZXJfX2NvdmVyLWltYWdlXCJcclxuXHRcdGFsdD1cIiR7ZXNjYXBlKGltYWdlLmFsdCl9XCJcclxuXHRcdHdpZHRoPVwiJHtpbWFnZS53aWR0aH1cIlxyXG5cdFx0aGVpZ2h0PVwiJHtpbWFnZS5oZWlnaHR9XCJcclxuXHRcdHNyYz1cIiR7aW1hZ2UudzU2MH1cIlxyXG5cdFx0c3Jjc2V0PVwiXHJcblx0XHRcdCR7aW1hZ2UudzI0MDB9IDI0MDB3LFxyXG5cdFx0XHQke2ltYWdlLncxNjAwfSAxNjAwdyxcclxuXHRcdFx0JHtpbWFnZS53MTIwMH0gMTIwMHcsXHJcblx0XHRcdCR7aW1hZ2Uudzg0MH0gODQwdyxcclxuXHRcdFx0JHtpbWFnZS53NTYwfSA1NjB3LFxyXG5cdFx0XHQke2ltYWdlLncyODB9IDI4MHdcIlxyXG5cdFx0c2l6ZXM9XCIobWF4LXdpZHRoOiA2MDBweCkgMTAwdncsIDIwMHB4XCJcclxuXHQvPmAgOiBcIlwiO1xyXG59OyIsImV4cG9ydCBkZWZhdWx0IChzZWNvbmRzKSA9PiB7XHJcblx0cmV0dXJuIG5ldyBEYXRlKHNlY29uZHMgKiAxMDAwKS50b0lTT1N0cmluZygpLnN1YnN0cigxMSwgOCkucmVwbGFjZSgvXjAwOjAvaSwgXCJcIik7XHJcbn07XHJcbiIsImV4cG9ydCBkZWZhdWx0IHtcclxuXHR4MDogMTUsXHJcblx0eDE6IDY1LFxyXG5cdHkxOiA0NSxcclxuXHR4MjogNzAsXHJcblx0eTI6IDQwLFxyXG5cdHgzOiAyNyxcclxufTtcclxuIiwiaW1wb3J0IFNFVFRJTkdTIGZyb20gXCIuLi8uLi9nbG9iYWwvc2V0dGluZ3NcIjtcclxuaW1wb3J0IEZsaWNraXR5IGZyb20gXCJmbGlja2l0eS1pbWFnZXNsb2FkZWRcIjtcclxuaW1wb3J0IGFycm93U2hhcGUgZnJvbSBcIi4vYXJyb3dTaGFwZVwiO1xyXG5cclxuY29uc3QgZmxpY2tpdHlEZWZhdWx0cyA9IHtcclxuXHRhY2Nlc3NpYmlsaXR5OiB0cnVlLFxyXG5cdGF1dG9QbGF5OiBmYWxzZSxcclxuXHRjZWxsQWxpZ246IFwibGVmdFwiLFxyXG5cdHByZXZOZXh0QnV0dG9uczogdHJ1ZSxcclxuXHRwYWdlRG90czogZmFsc2UsXHJcblx0ZnJpY3Rpb246IDAuNCxcclxuXHRjb250YWluOiB0cnVlLFxyXG5cdHJlc2l6ZTogdHJ1ZSxcclxuXHR3cmFwQXJvdW5kOiBmYWxzZSxcclxuXHRpbWFnZXNMb2FkZWQ6IGZhbHNlLFxyXG5cdGFycm93U2hhcGUsXHJcbn07XHJcblxyXG5jb25zdCBjYXJvdXNlbCA9IChvcHRpb25zID0ge30pID0+IHtcclxuXHRsZXQgeyBzZWxlY3RvclN0cmluZyB9ID0gb3B0aW9ucztcclxuXHRzZWxlY3RvclN0cmluZyA9IHNlbGVjdG9yU3RyaW5nIHx8IFwiLmpzLWNhcm91c2VsXCI7XHJcblx0c2VsZWN0b3JTdHJpbmcgPSBgJHtzZWxlY3RvclN0cmluZ306bm90KC4ke1NFVFRJTkdTLmluaXRpYWxpemVkQ2xhc3NOYW1lfSlgO1xyXG5cclxuXHRsZXQgZmluYWxPcHRpb25zID0geyAuLi5mbGlja2l0eURlZmF1bHRzLCAuLi5vcHRpb25zIH07XHJcblxyXG5cdGNvbnN0IGNhcm91c2VscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3JTdHJpbmcpO1xyXG5cclxuXHRjYXJvdXNlbHMuZm9yRWFjaCgoY2Fyb3VzZWwpID0+IHtcclxuXHRcdGNvbnN0IGZsaWNraXR5SW5zdGFuY2UgPSBuZXcgRmxpY2tpdHkoY2Fyb3VzZWwsIGZpbmFsT3B0aW9ucykub24oXHJcblx0XHRcdFwiY2hhbmdlXCIsXHJcblx0XHRcdGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHR0aGlzLmNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcclxuXHRcdFx0XHRcdGNvbnN0IGZpcnN0VmlkZW8gPSBjZWxsLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcInZpZGVvXCIpO1xyXG5cdFx0XHRcdFx0aWYgKGZpcnN0VmlkZW8gIT09IG51bGwpIHtcclxuXHRcdFx0XHRcdFx0Zmlyc3RWaWRlby5wYXVzZSgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRjb25zdCBmaXJzdFZpZGVvID0gdGhpcy5zZWxlY3RlZEVsZW1lbnRzWzBdLnF1ZXJ5U2VsZWN0b3IoXCJ2aWRlb1wiKTtcclxuXHRcdFx0XHRpZiAoZmlyc3RWaWRlbyAhPT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0Zmlyc3RWaWRlby5wbGF5KCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHQpO1xyXG5cclxuXHRcdGNvbnN0IGhhbmRsZXIgPSAoKSA9PiB7XHJcblx0XHRcdGNhcm91c2VsLmNsYXNzTGlzdC5hZGQoXCJpcy1sb2FkaW5nXCIpO1xyXG5cdFx0XHRjb25zdCBhbGxJbWFnZXNBcmVMb2FkZWQgPSAhY2Fyb3VzZWwucXVlcnlTZWxlY3RvcihcIi5sb2FkaW5nXCIpO1xyXG5cdFx0XHRpZiAoYWxsSW1hZ2VzQXJlTG9hZGVkKSB7XHJcblx0XHRcdFx0ZmxpY2tpdHlJbnN0YW5jZS5yZXNpemUoKTtcclxuXHRcdFx0XHRjYXJvdXNlbC5jbGFzc0xpc3QucmVtb3ZlKFwiaXMtbG9hZGluZ1wiKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBUaGlzIGV2ZW50IGlzIGJ1YmJsZWQgdXAgd2hlbiBvdXIgbGF6eWxvYWQgbGlicmFyeSBsb2FkcyBhbiBpbWFnZSAoc2VlIGxhenlsb2FkLmpzKVxyXG5cdFx0Y2Fyb3VzZWwuYWRkRXZlbnRMaXN0ZW5lcihcImltYWdlLWxvYWRlZFwiLCBoYW5kbGVyLCBmYWxzZSk7XHJcblx0XHRjYXJvdXNlbC5hZGRFdmVudExpc3RlbmVyKFwiaW1hZ2UtZXJyb3JlZFwiLCBoYW5kbGVyLCBmYWxzZSk7XHJcblx0XHRjYXJvdXNlbC5jbGFzc0xpc3QuYWRkKFNFVFRJTkdTLmluaXRpYWxpemVkQ2xhc3NOYW1lKTtcclxuXHRcdC8vIGFjY2Vzc2liaWxpdHkgZW5oYW5jZW1lbnRzXHJcblx0XHRjYXJvdXNlbC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwicmVnaW9uXCIpO1xyXG5cdFx0Y2Fyb3VzZWwuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBcIkludGVyYWN0aXZlIHNsaWRlIGNhcm91c2VsLiBVc2UgbGVmdCBhbmQgcmlnaHQgYXJyb3dzIHRvIGNoYW5nZSBzbGlkZXMuXCIpO1xyXG5cdH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2Fyb3VzZWw7XHJcbmV4cG9ydCB7IGZsaWNraXR5RGVmYXVsdHMgfTtcclxuIiwiaW1wb3J0IFNFVFRJTkdTIGZyb20gXCIuLi8uLi8uLi9nbG9iYWwvc2V0dGluZ3NcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZpZGVvU2xpZGUoKSB7XHJcblx0Y29uc3Qgc2VsZWN0b3JTdHJpbmcgPSBgLmpzLWNhcm91c2VsLXNsaWRlX192aWRlbzpub3QoLiR7U0VUVElOR1MuaW5pdGlhbGl6ZWRDbGFzc05hbWV9KWA7XHJcblx0Y29uc3QgdmlkZW9TbGlkZXMgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvclN0cmluZyldO1xyXG5cclxuXHRjb25zdCB2aWRlb3NJbkNhcm91c2VsU2xpZGVzID0gdmlkZW9TbGlkZXMubWFwKCh2aWRlb0VsZW1lbnQpPT4ge1xyXG5cdFx0Ly9IYW5kbGVzIHRoZSBjYXNlIG9mIHNvbWUgdmlkZW8gbGlicmFyaWVzIHRoYXQgbmVzdCB0aGUgdmlkZW8gZWxlbWVudCBpbnNpZGUgdGhlIGNvbnRhaW5lci5cclxuXHRcdHJldHVybiB2aWRlb0VsZW1lbnQubm9kZU5hbWUgPT09IFwiVklERU9cIiA/IHZpZGVvRWxlbWVudCA6IHZpZGVvRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwidmlkZW9cIik7XHJcblx0fSk7XHJcblxyXG5cdGNvbnN0IGhhbmRsZVBsYXkgPSAodmlkZW9Ub1BsYXkpID0+IHtcclxuXHRcdC8vQnViYmxlcyB1cCB0byBDYXJvdXNlbC9hbnkgb3RoZXIgY29tcG9uZW50IHRoYXQgbWlnaHQgY2FyZSBhYm91dCBhIHZpZGVvIHN0YXJ0aW5nXHJcblx0XHR2aWRlb1RvUGxheS5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcInZpZGVvLXBsYXlpbmdcIiwgeyBidWJibGVzOiB0cnVlfSkpO1xyXG5cclxuXHRcdC8vUGF1c2UgYWxsIG90aGVyIHZpZGVvcyB3aXRoaW4gKkFMTCogY2Fyb3VzZWxzIG9uIHRoZSBwYWdlXHJcblx0XHR2aWRlb3NJbkNhcm91c2VsU2xpZGVzLmZvckVhY2goKHZpZGVvKSA9PiB7XHJcblx0XHRcdHZpZGVvVG9QbGF5ICE9PSB2aWRlbyAmJiB2aWRlby5wYXVzZSgpO1xyXG5cdFx0fSk7XHJcblx0fTtcclxuXHJcblx0dmlkZW9zSW5DYXJvdXNlbFNsaWRlcy5mb3JFYWNoKCAodmlkZW9FbGVtZW50KSA9PiB7XHJcblx0XHR2aWRlb0VsZW1lbnQub25wbGF5ID0gKCkgPT4gaGFuZGxlUGxheSh2aWRlb0VsZW1lbnQpO1xyXG5cdFx0dmlkZW9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcblx0XHRcdHZpZGVvRWxlbWVudC5wbGF5KCk7XHJcblx0XHR9KTtcclxuXHRcdHZpZGVvRWxlbWVudC5jbGFzc0xpc3QuYWRkKFNFVFRJTkdTLmluaXRpYWxpemVkQ2xhc3NOYW1lKTtcclxuXHR9KTtcclxufVxyXG4iLCJpbXBvcnQgU0VUVElOR1MgZnJvbSBcIi4uLy4uL2dsb2JhbC9zZXR0aW5nc1wiO1xyXG5pbXBvcnQgc21vb3Roc2Nyb2xsIGZyb20gXCJzbW9vdGhzY3JvbGwtcG9seWZpbGxcIjtcclxuXHJcbmZ1bmN0aW9uIGp1bXBMaW5rQmFubmVyKCkge1xyXG5cdHNtb290aHNjcm9sbC5wb2x5ZmlsbCgpO1xyXG5cdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYC5qcy1qdW1wLWxpbms6bm90KC4ke1NFVFRJTkdTLmluaXRpYWxpemVkQ2xhc3NOYW1lfSlgKS5mb3JFYWNoKChsaW5rKSA9PiB7XHJcblx0XHRsaW5rLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xyXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdC8vU2Nyb2xsIHRvIHRoZSBuZXh0IHNlY3Rpb25cclxuXHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihsaW5rLmdldEF0dHJpYnV0ZShcImhyZWZcIikpLnNjcm9sbEludG9WaWV3KHtcclxuXHRcdFx0XHRiZWhhdmlvcjogXCJzbW9vdGhcIixcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHRcdGxpbmsuY2xhc3NMaXN0LmFkZChTRVRUSU5HUy5pbml0aWFsaXplZENsYXNzTmFtZSk7XHJcblx0fSk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGp1bXBMaW5rQmFubmVyO1xyXG4iLCJpbXBvcnQgU0VUVElOR1MgZnJvbSBcIi4uLy4uL2dsb2JhbC9zZXR0aW5nc1wiO1xyXG5cclxuY2xhc3MgTXVzZXR0ZSB7XHJcblx0Y29uc3RydWN0b3IobXVzZXR0ZUVsKSB7XHJcblx0XHQvLyBwcm9wZXJ0aWVzXHJcblx0XHR0aGlzLm11c2V0dGVFbCA9IG11c2V0dGVFbDtcclxuXHRcdHRoaXMubXVzZXR0ZVdyYXBwZXIgPSB0aGlzLmNyZWF0ZVdyYXBwZXIoKTtcclxuXHRcdHRoaXMubW91c2VJc0JlaW5nRHJhZ2dlZCA9IGZhbHNlO1xyXG5cdFx0dGhpcy5wb3MgPSB7IHRvcDogMCwgbGVmdDogMCwgeDogMCwgeTogMCB9O1xyXG5cclxuXHRcdC8vIPCfkYAgb2JzZXJ2ZXJcclxuXHRcdHRoaXMub2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoXHJcblx0XHRcdHRoaXMuaGFuZGxlSW50ZXJzZWN0aW9ucy5iaW5kKHRoaXMpLFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cm9vdDogdGhpcy5tdXNldHRlRWwsXHJcblx0XHRcdFx0cm9vdE1hcmdpbjogXCIwcHhcIixcclxuXHRcdFx0XHR0aHJlc2hvbGQ6IDAuOVxyXG5cdFx0XHR9XHJcblx0XHQpO1xyXG5cdFx0QXJyYXkuZnJvbSh0aGlzLm11c2V0dGVFbC5jaGlsZHJlbikuZm9yRWFjaCgoY2hpbGQpID0+IHtcclxuXHRcdFx0dGhpcy5vYnNlcnZlci5vYnNlcnZlKGNoaWxkKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIGJpbmQgaGFuZGxlcnMg8J+npFxyXG5cdFx0dGhpcy5tb3VzZURvd25IYW5kbGVyID0gdGhpcy5tb3VzZURvd25IYW5kbGVyLmJpbmQodGhpcyk7XHJcblx0XHR0aGlzLm1vdXNlTW92ZUhhbmRsZXIgPSB0aGlzLm1vdXNlTW92ZUhhbmRsZXIuYmluZCh0aGlzKTtcclxuXHRcdHRoaXMubW91c2VVcEhhbmRsZXIgPSB0aGlzLm1vdXNlVXBIYW5kbGVyLmJpbmQodGhpcyk7XHJcblxyXG5cdFx0Ly8gYXBwbHkgbGlzdGVuZXIocykg8J+Op1xyXG5cdFx0dGhpcy5tdXNldHRlRWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLm1vdXNlRG93bkhhbmRsZXIpO1xyXG5cdH1cclxuXHJcblx0aGFuZGxlSW50ZXJzZWN0aW9ucyhlbnRyaWVzKSB7XHJcblx0XHRlbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XHJcblx0XHRcdGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xyXG5cdFx0XHRcdHRoaXMuc2hvd0ZvY3VzYWJsZXMoZW50cnkudGFyZ2V0KTtcclxuXHRcdFx0XHRlbnRyeS50YXJnZXQgPT0gdGhpcy5tdXNldHRlRWwuZmlyc3RFbGVtZW50Q2hpbGQgJiYgdGhpcy5tdXNldHRlV3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKFwibXVzZXR0ZS1oYXMtbGVmdC1idXR0b25cIik7XHJcblx0XHRcdFx0ZW50cnkudGFyZ2V0ID09IHRoaXMubXVzZXR0ZUVsLmxhc3RFbGVtZW50Q2hpbGQgJiYgdGhpcy5tdXNldHRlV3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKFwibXVzZXR0ZS1oYXMtcmlnaHQtYnV0dG9uXCIpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHRoaXMuaGlkZUZvY3VzYWJsZXMoZW50cnkudGFyZ2V0KTtcclxuXHRcdFx0XHRlbnRyeS50YXJnZXQgPT0gdGhpcy5tdXNldHRlRWwuZmlyc3RFbGVtZW50Q2hpbGQgJiYgdGhpcy5tdXNldHRlV3JhcHBlci5jbGFzc0xpc3QuYWRkKFwibXVzZXR0ZS1oYXMtbGVmdC1idXR0b25cIik7XHJcblx0XHRcdFx0ZW50cnkudGFyZ2V0ID09IHRoaXMubXVzZXR0ZUVsLmxhc3RFbGVtZW50Q2hpbGQgJiYgdGhpcy5tdXNldHRlV3JhcHBlci5jbGFzc0xpc3QuYWRkKFwibXVzZXR0ZS1oYXMtcmlnaHQtYnV0dG9uXCIpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdG1vdXNlRG93bkhhbmRsZXIoZSkge1xyXG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpOyAvL3ByZXZlbnRzIGRyYWdnaW5nIG9mIGltYWdlc1xyXG5cdFx0dGhpcy5wb3MgPSB7XHJcblx0XHRcdGxlZnQ6IHRoaXMubXVzZXR0ZUVsLnNjcm9sbExlZnQsXHJcblx0XHRcdHg6IGUuY2xpZW50WFxyXG5cdFx0fTtcclxuXHRcdHRoaXMubXVzZXR0ZUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5tb3VzZU1vdmVIYW5kbGVyKTtcclxuXHRcdHRoaXMubXVzZXR0ZUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMubW91c2VVcEhhbmRsZXIpO1xyXG5cdFx0dGhpcy5tdXNldHRlRWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgdGhpcy5tb3VzZVVwSGFuZGxlcik7XHJcblx0fVxyXG5cclxuXHRtb3VzZU1vdmVIYW5kbGVyKGUpIHtcclxuXHRcdHRoaXMubW91c2VJc0JlaW5nRHJhZ2dlZCA9IHRydWU7XHJcblx0XHRjb25zdCB4TW92ZW1lbnQgPSBlLmNsaWVudFggLSB0aGlzLnBvcy54OyAvL2hvdyBmYXIgdGhlIG1vdXNlIGhhcyBiZWVuIG1vdmVkXHJcblx0XHR0aGlzLm11c2V0dGVFbC5zY3JvbGxMZWZ0ID0gdGhpcy5wb3MubGVmdCAtIHhNb3ZlbWVudDsgLy9zY3JvbGwgdGhlIGVsZW1lbnQgdG8gbWF0Y2ggaG93IG11Y2ggdGhlIG1vdXNlIG1vdmVkXHJcblx0fVxyXG5cclxuXHRtb3VzZVVwSGFuZGxlcigpIHtcclxuXHRcdHRoaXMubXVzZXR0ZUVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5tb3VzZU1vdmVIYW5kbGVyKTtcclxuXHRcdHRoaXMubXVzZXR0ZUVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMubW91c2VVcEhhbmRsZXIpO1xyXG5cdFx0dGhpcy5tdXNldHRlRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgdGhpcy5tb3VzZVVwSGFuZGxlcik7XHJcblxyXG5cdFx0bGV0IGFkZE9yUmVtb3ZlID0gdGhpcy5tb3VzZUlzQmVpbmdEcmFnZ2VkID8gXCJhZGRFdmVudExpc3RlbmVyXCIgOiBcInJlbW92ZUV2ZW50TGlzdGVuZXJcIjtcclxuXHRcdFxyXG5cdFx0dGhpcy5tdXNldHRlRWwucXVlcnlTZWxlY3RvckFsbChcImFcIikuZm9yRWFjaChtdXNldHRlTGluayA9PiB7XHJcblx0XHRcdG11c2V0dGVMaW5rW2FkZE9yUmVtb3ZlXShcImNsaWNrXCIsIHRoaXMucHJldmVudENsaWNrKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdHRoaXMubW91c2VJc0JlaW5nRHJhZ2dlZCA9IGZhbHNlO1xyXG5cdH1cclxuXHJcblx0cHJldmVudENsaWNrKGUpIHtcclxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcblx0fVxyXG5cclxuXHRjcmVhdGVXcmFwcGVyKCkge1xyXG5cdFx0Y29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblx0XHR3cmFwcGVyLmNsYXNzTGlzdC5hZGQoXCJtdXNldHRlLXdyYXBwZXJcIik7XHJcblxyXG5cdFx0Y29uc3QgbGVmdEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcblx0XHRsZWZ0QnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJtdXNldHRlLW1vdmUtbGVmdFwiKTtcclxuXHRcdGxlZnRCdXR0b24uYXJpYUxhYmVsID0gXCJQcmV2aW91cyBpdGVtc1wiO1xyXG5cdFx0bGVmdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVCdXR0b25TY3JvbGxMZWZ0LmJpbmQodGhpcykpO1xyXG5cclxuXHRcdGNvbnN0IHJpZ2h0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuXHRcdHJpZ2h0QnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJtdXNldHRlLW1vdmUtcmlnaHRcIik7XHJcblx0XHRyaWdodEJ1dHRvbi5hcmlhTGFiZWwgPSBcIk5leHQgaXRlbXNcIjtcclxuXHRcdHJpZ2h0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhhbmRsZUJ1dHRvblNjcm9sbFJpZ2h0LmJpbmQodGhpcykpO1xyXG5cclxuXHRcdHRoaXMubXVzZXR0ZUVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHdyYXBwZXIsIHRoaXMubXVzZXR0ZUVsKTtcclxuXHJcblx0XHR3cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMubXVzZXR0ZUVsKTtcclxuXHRcdHdyYXBwZXIuYXBwZW5kQ2hpbGQobGVmdEJ1dHRvbik7XHJcblx0XHR3cmFwcGVyLmFwcGVuZENoaWxkKHJpZ2h0QnV0dG9uKTtcclxuXHJcblx0XHRyZXR1cm4gd3JhcHBlcjtcclxuXHR9XHJcblxyXG5cdGhhbmRsZUJ1dHRvblNjcm9sbExlZnQoKSB7XHJcblx0XHR0aGlzLm11c2V0dGVFbC5zY3JvbGxUbyh7XHJcblx0XHRcdGxlZnQ6ICh0aGlzLm11c2V0dGVFbC5zY3JvbGxMZWZ0IC0gdGhpcy5tdXNldHRlRWwub2Zmc2V0V2lkdGgpLFxyXG5cdFx0XHRiZWhhdmlvcjogXCJzbW9vdGhcIlxyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRoYW5kbGVCdXR0b25TY3JvbGxSaWdodCgpIHtcclxuXHRcdHRoaXMubXVzZXR0ZUVsLnNjcm9sbFRvKHtcclxuXHRcdFx0bGVmdDogKHRoaXMubXVzZXR0ZUVsLnNjcm9sbExlZnQgKyB0aGlzLm11c2V0dGVFbC5vZmZzZXRXaWR0aCksXHJcblx0XHRcdGJlaGF2aW9yOiBcInNtb290aFwiXHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdGhpZGVGb2N1c2FibGVzKGVsZW1lbnQpIHtcclxuXHRcdGVsZW1lbnQuYXJpYUhpZGRlbiA9IFwidHJ1ZVwiO1xyXG5cdFx0ZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFVFRJTkdTLkZPQ1VTQUJMRVNfU0VMRUNUT1IpLmZvckVhY2goKGZvY3VzYWJsZUVsKSA9PiB7XHJcblx0XHRcdGZvY3VzYWJsZUVsLnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsIFwidHJ1ZVwiKTtcclxuXHRcdFx0Zm9jdXNhYmxlRWwuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwgXCItMVwiKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0c2hvd0ZvY3VzYWJsZXMoZWxlbWVudCkge1xyXG5cdFx0ZWxlbWVudC5hcmlhSGlkZGVuID0gXCJmYWxzZVwiO1xyXG5cdFx0ZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFVFRJTkdTLkZPQ1VTQUJMRVNfU0VMRUNUT1IpLmZvckVhY2goKGZvY3VzYWJsZUVsKSA9PiB7XHJcblx0XHRcdGZvY3VzYWJsZUVsLnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIpO1xyXG5cdFx0XHRmb2N1c2FibGVFbC5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIjBcIik7XHJcblx0XHR9KTtcclxuXHR9XHJcbn1cclxuXHJcbmNvbnN0IGluaXRpYWxpemUgPSAoc2VsZWN0b3JTdHJpbmcgPSBcIi5qcy1sYS1tdXNldHRlXCIpID0+IHtcclxuXHRjb25zdCBsZXNNdXNldHRlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3JTdHJpbmcpO1xyXG5cdGxlc011c2V0dGVzLmZvckVhY2goKGxhTXVzZXR0ZUVsKSA9PiBuZXcgTXVzZXR0ZShsYU11c2V0dGVFbCkpO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTXVzZXR0ZTtcclxuZXhwb3J0IHsgaW5pdGlhbGl6ZSB9O1xyXG4iLCJpbXBvcnQgU0VUVElOR1MgZnJvbSBcIi4uLy4uL2dsb2JhbC9zZXR0aW5nc1wiO1xyXG5pbXBvcnQgVmltZW9QbGF5ZXIgZnJvbSBcIkB2aW1lby9wbGF5ZXJcIjtcclxuXHJcbmZ1bmN0aW9uIHZpbWVvQ29udHJvbHMoKSB7XHJcblxyXG5cdGNvbnN0IHBsYXlWaWRlbyA9IChwbGF5ZXIsIGJ1dHRvbikgPT4ge1xyXG5cdFx0cGxheWVyLnBsYXkoKTtcclxuXHRcdGJ1dHRvbi5xdWVyeVNlbGVjdG9yKFwiLmpzLXZpbWVvLXBsYXlfX3BsYXktaWNvblwiKS5jbGFzc0xpc3QuYWRkKFwiaXMtaGlkZGVuXCIpO1xyXG5cdFx0YnV0dG9uLnF1ZXJ5U2VsZWN0b3IoXCIuanMtdmltZW8tcGxheV9fcGF1c2UtaWNvblwiKS5jbGFzc0xpc3QucmVtb3ZlKFwiaXMtaGlkZGVuXCIpO1xyXG5cdH07XHJcblxyXG5cdGNvbnN0IHBhdXNlVmlkZW8gPSAocGxheWVyLCBidXR0b24pID0+IHtcclxuXHRcdHBsYXllci5wYXVzZSgpO1xyXG5cdFx0YnV0dG9uLnF1ZXJ5U2VsZWN0b3IoXCIuanMtdmltZW8tcGxheV9fcGxheS1pY29uXCIpLmNsYXNzTGlzdC5yZW1vdmUoXCJpcy1oaWRkZW5cIik7XHJcblx0XHRidXR0b24ucXVlcnlTZWxlY3RvcihcIi5qcy12aW1lby1wbGF5X19wYXVzZS1pY29uXCIpLmNsYXNzTGlzdC5hZGQoXCJpcy1oaWRkZW5cIik7XHJcblx0fTtcclxuXHJcblx0Y29uc3Qgc2VsZWN0b3JTdHJpbmcgPSBgLmpzLXZpbWVvLWNvbnRhaW5lcjpub3QoLiR7U0VUVElOR1MuaW5pdGlhbGl6ZWRDbGFzc05hbWV9KWA7XHJcblx0Y29uc3QgdmltZW9Db250YWluZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvclN0cmluZyk7XHJcblx0dmltZW9Db250YWluZXJzLmZvckVhY2goKGNvbnRhaW5lcik9PiB7XHJcblx0XHRjb25zdCBwbGF5ZXIgPSBuZXcgVmltZW9QbGF5ZXIoY29udGFpbmVyKTtcclxuXHJcblx0XHRjb25zdCBwbGF5QnV0dG9uID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIuanMtdmltZW8tcGxheVwiKTtcclxuXHRcdHBsYXlCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuXHRcdFx0cGxheWVyLmdldFBhdXNlZCgpLnRoZW4oZnVuY3Rpb24ocGF1c2VkKSB7XHJcblx0XHRcdFx0cGF1c2VkID8gcGxheVZpZGVvKHBsYXllciwgcGxheUJ1dHRvbikgOiBwYXVzZVZpZGVvKHBsYXllciwgcGxheUJ1dHRvbik7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdH0pO1xyXG5cdFx0Y29udGFpbmVyLmNsYXNzTGlzdC5hZGQoU0VUVElOR1MuaW5pdGlhbGl6ZWRDbGFzc05hbWUpO1xyXG5cdH0pO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB2aW1lb0NvbnRyb2xzO1xyXG4iLCJpbXBvcnQgTGF6eUxvYWQgZnJvbSBcInZhbmlsbGEtbGF6eWxvYWRcIjtcclxuXHJcbmNvbnN0IGltYWdlTG9hZGVkRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoXCJpbWFnZS1sb2FkZWRcIiwgeyBidWJibGVzOiB0cnVlIH0pO1xyXG5jb25zdCBpbWFnZUVycm9yRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoXCJpbWFnZS1lcnJvcmVkXCIsIHsgYnViYmxlczogdHJ1ZSB9KTtcclxuXHJcbmNvbnN0IGNhbGxMb2FkQWxsID0gKCkgPT4ge1xyXG5cdHdpbmRvdy5tYXJibGVMYXp5TG9hZE9iai5sb2FkQWxsKCk7XHJcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgY2FsbExvYWRBbGwsIHRydWUpO1xyXG59O1xyXG5cclxuY29uc3QgbGF6eWxvYWQgPSAoKSA9PiB7XHJcblx0aWYgKHdpbmRvdy5tYXJibGVMYXp5TG9hZE9iaikge1xyXG5cdFx0d2luZG93Lm1hcmJsZUxhenlMb2FkT2JqLnVwZGF0ZSgpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHR3aW5kb3cubWFyYmxlTGF6eUxvYWRPYmogPSAgbmV3IExhenlMb2FkKHtcclxuXHRcdFx0ZWxlbWVudHNfc2VsZWN0b3I6IFwiLmxhenlcIixcclxuXHRcdFx0Y2FsbGJhY2tfbG9hZGVkOiAoZWwpID0+IHtcclxuXHRcdFx0XHRlbC5kaXNwYXRjaEV2ZW50KGltYWdlTG9hZGVkRXZlbnQpO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRjYWxsYmFja19lcnJvcjogKGVsKSA9PiB7XHJcblx0XHRcdFx0ZWwuZGlzcGF0Y2hFdmVudChpbWFnZUVycm9yRXZlbnQpO1xyXG5cdFx0XHR9LFxyXG5cdFx0fSk7XHJcblxyXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgY2FsbExvYWRBbGwsIHtcclxuXHRcdFx0b25jZTogdHJ1ZSxcclxuXHRcdFx0cGFzc2l2ZTogdHJ1ZSxcclxuXHRcdFx0Y2FwdHVyZTogdHJ1ZSxcclxuXHRcdH0pO1xyXG5cdH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGxhenlsb2FkO1xyXG4iLCJmdW5jdGlvbiBkZWVwRnJlZXplKG9iamVjdCkge1xyXG5cdC8vIFJldHJpZXZlIHRoZSBwcm9wZXJ0eSBuYW1lcyBkZWZpbmVkIG9uIG9iamVjdFxyXG5cdGNvbnN0IHByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iamVjdCk7XHJcblxyXG5cdC8vIEZyZWV6ZSBwcm9wZXJ0aWVzIGJlZm9yZSBmcmVlemluZyBzZWxmXHJcblx0Zm9yIChjb25zdCBuYW1lIG9mIHByb3BOYW1lcykge1xyXG5cdFx0Y29uc3QgdmFsdWUgPSBvYmplY3RbbmFtZV07XHJcblxyXG5cdFx0aWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xyXG5cdFx0XHRkZWVwRnJlZXplKHZhbHVlKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBPYmplY3QuZnJlZXplKG9iamVjdCk7XHJcbn1cclxuXHJcbmNvbnN0IFNFVFRJTkdTID0gZGVlcEZyZWV6ZSh7XHJcblx0aW5pdGlhbGl6ZWRDbGFzc05hbWU6IFwianMtbWFyYmxlLWluaXRpYWxpemVkXCIsXHJcblx0Rk9DVVNBQkxFU19TRUxFQ1RPUjogXCJhW2hyZWZdOm5vdCguaW52aXNpYmxlLXJlZHVuZGFudC1saW5rKSwgYnV0dG9uLCBpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCwgZGV0YWlscywgW3RhYmluZGV4XTpub3QoLmludmlzaWJsZS1yZWR1bmRhbnQtbGluaylcIlxyXG59KTtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBTRVRUSU5HUztcclxuIiwidmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBJc0NhbGxhYmxlKGFyZ3VtZW50KSBpcyB0cnVlYFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93ICRUeXBlRXJyb3IodHJ5VG9TdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHtcbiAgZGVmaW5lUHJvcGVydHkoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBjcmVhdGUobnVsbClcbiAgfSk7XG59XG5cbi8vIGFkZCBhIGtleSB0byBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgJFN0cmluZyA9IFN0cmluZztcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBUeXBlKGFyZ3VtZW50KSBpcyBPYmplY3RgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNPYmplY3QoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93ICRUeXBlRXJyb3IoJFN0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbn07XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxudmFyIHRvU3RyaW5nID0gdW5jdXJyeVRoaXMoe30udG9TdHJpbmcpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gc3RyaW5nU2xpY2UodG9TdHJpbmcoaXQpLCA4LCAtMSk7XG59O1xuIiwidmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSwgZXhjZXB0aW9ucykge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhc093bih0YXJnZXQsIGtleSkgJiYgIShleGNlcHRpb25zICYmIGhhc093bihleGNlcHRpb25zLCBrZXkpKSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgIH1cbiAgfVxufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgbWFrZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFrZS1idWlsdC1pbicpO1xudmFyIGRlZmluZUdsb2JhbFByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1nbG9iYWwtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcbiAgdmFyIHNpbXBsZSA9IG9wdGlvbnMuZW51bWVyYWJsZTtcbiAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubmFtZSA6IGtleTtcbiAgaWYgKGlzQ2FsbGFibGUodmFsdWUpKSBtYWtlQnVpbHRJbih2YWx1ZSwgbmFtZSwgb3B0aW9ucyk7XG4gIGlmIChvcHRpb25zLmdsb2JhbCkge1xuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2UgZGVmaW5lR2xvYmFsUHJvcGVydHkoa2V5LCB2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFvcHRpb25zLnVuc2FmZSkgZGVsZXRlIE9ba2V5XTtcbiAgICBlbHNlIGlmIChPW2tleV0pIHNpbXBsZSA9IHRydWU7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoTywga2V5LCB2YWx1ZSk7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0cnkge1xuICAgIGRlZmluZVByb3BlcnR5KGdsb2JhbCwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gRGV0ZWN0IElFOCdzIGluY29tcGxldGUgZGVmaW5lUHJvcGVydHkgaW1wbGVtZW50YXRpb25cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIDEsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pWzFdICE9IDc7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignbmF2aWdhdG9yJywgJ3VzZXJBZ2VudCcpIHx8ICcnO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBEZW5vID0gZ2xvYmFsLkRlbm87XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnMgfHwgRGVubyAmJiBEZW5vLnZlcnNpb247XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbnZhciBtYXRjaCwgdmVyc2lvbjtcblxuaWYgKHY4KSB7XG4gIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcbiAgLy8gaW4gb2xkIENocm9tZSwgdmVyc2lvbnMgb2YgVjggaXNuJ3QgVjggPSBDaHJvbWUgLyAxMFxuICAvLyBidXQgdGhlaXIgY29ycmVjdCB2ZXJzaW9ucyBhcmUgbm90IGludGVyZXN0aW5nIGZvciB1c1xuICB2ZXJzaW9uID0gbWF0Y2hbMF0gPiAwICYmIG1hdGNoWzBdIDwgNCA/IDEgOiArKG1hdGNoWzBdICsgbWF0Y2hbMV0pO1xufVxuXG4vLyBCcm93c2VyRlMgTm9kZUpTIGBwcm9jZXNzYCBwb2x5ZmlsbCBpbmNvcnJlY3RseSBzZXQgYC52OGAgdG8gYDAuMGBcbi8vIHNvIGNoZWNrIGB1c2VyQWdlbnRgIGV2ZW4gaWYgYC52OGAgZXhpc3RzLCBidXQgMFxuaWYgKCF2ZXJzaW9uICYmIHVzZXJBZ2VudCkge1xuICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pO1xuICBpZiAoIW1hdGNoIHx8IG1hdGNoWzFdID49IDc0KSB7XG4gICAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgIGlmIChtYXRjaCkgdmVyc2lvbiA9ICttYXRjaFsxXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcnNpb247XG4iLCIvLyBJRTgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gW1xuICAnY29uc3RydWN0b3InLFxuICAnaGFzT3duUHJvcGVydHknLFxuICAnaXNQcm90b3R5cGVPZicsXG4gICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICd0b0xvY2FsZVN0cmluZycsXG4gICd0b1N0cmluZycsXG4gICd2YWx1ZU9mJ1xuXTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIGRlZmluZUdsb2JhbFByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1nbG9iYWwtcHJvcGVydHknKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgICAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLmRvbnRDYWxsR2V0U2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuICBvcHRpb25zLm5hbWUgICAgICAgICAgIC0gdGhlIC5uYW1lIG9mIHRoZSBmdW5jdGlvbiBpZiBpdCBkb2VzIG5vdCBtYXRjaCB0aGUga2V5XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IGRlZmluZUdsb2JhbFByb3BlcnR5KFRBUkdFVCwge30pO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldCA9IChnbG9iYWxbVEFSR0VUXSB8fCB7fSkucHJvdG90eXBlO1xuICB9XG4gIGlmICh0YXJnZXQpIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIHNvdXJjZVByb3BlcnR5ID0gc291cmNlW2tleV07XG4gICAgaWYgKG9wdGlvbnMuZG9udENhbGxHZXRTZXQpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuICAgICAgdGFyZ2V0UHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgfSBlbHNlIHRhcmdldFByb3BlcnR5ID0gdGFyZ2V0W2tleV07XG4gICAgRk9SQ0VEID0gaXNGb3JjZWQoR0xPQkFMID8ga2V5IDogVEFSR0VUICsgKFNUQVRJQyA/ICcuJyA6ICcjJykgKyBrZXksIG9wdGlvbnMuZm9yY2VkKTtcbiAgICAvLyBjb250YWluZWQgaW4gdGFyZ2V0XG4gICAgaWYgKCFGT1JDRUQgJiYgdGFyZ2V0UHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2VQcm9wZXJ0eSA9PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgZGVmaW5lQnVpbHRJbih0YXJnZXQsIGtleSwgc291cmNlUHJvcGVydHksIG9wdGlvbnMpO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLWZ1bmN0aW9uLXByb3RvdHlwZS1iaW5kIC0tIHNhZmVcbiAgdmFyIHRlc3QgPSAoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KS5iaW5kKCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICByZXR1cm4gdHlwZW9mIHRlc3QgIT0gJ2Z1bmN0aW9uJyB8fCB0ZXN0Lmhhc093blByb3BlcnR5KCdwcm90b3R5cGUnKTtcbn0pO1xuIiwidmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBjYWxsID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGw7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX0JJTkQgPyBjYWxsLmJpbmQoY2FsbCkgOiBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBjYWxsLmFwcGx5KGNhbGwsIGFyZ3VtZW50cyk7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcblxudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgZ2V0RGVzY3JpcHRvciA9IERFU0NSSVBUT1JTICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbnZhciBFWElTVFMgPSBoYXNPd24oRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJyk7XG4vLyBhZGRpdGlvbmFsIHByb3RlY3Rpb24gZnJvbSBtaW5pZmllZCAvIG1hbmdsZWQgLyBkcm9wcGVkIGZ1bmN0aW9uIG5hbWVzXG52YXIgUFJPUEVSID0gRVhJU1RTICYmIChmdW5jdGlvbiBzb21ldGhpbmcoKSB7IC8qIGVtcHR5ICovIH0pLm5hbWUgPT09ICdzb21ldGhpbmcnO1xudmFyIENPTkZJR1VSQUJMRSA9IEVYSVNUUyAmJiAoIURFU0NSSVBUT1JTIHx8IChERVNDUklQVE9SUyAmJiBnZXREZXNjcmlwdG9yKEZ1bmN0aW9uUHJvdG90eXBlLCAnbmFtZScpLmNvbmZpZ3VyYWJsZSkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgRVhJU1RTOiBFWElTVFMsXG4gIFBST1BFUjogUFJPUEVSLFxuICBDT05GSUdVUkFCTEU6IENPTkZJR1VSQUJMRVxufTtcbiIsInZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgYmluZCA9IEZ1bmN0aW9uUHJvdG90eXBlLmJpbmQ7XG52YXIgY2FsbCA9IEZ1bmN0aW9uUHJvdG90eXBlLmNhbGw7XG52YXIgdW5jdXJyeVRoaXMgPSBOQVRJVkVfQklORCAmJiBiaW5kLmJpbmQoY2FsbCwgY2FsbCk7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX0JJTkQgPyBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIGZuICYmIHVuY3VycnlUaGlzKGZuKTtcbn0gOiBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIGZuICYmIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2FsbC5hcHBseShmbiwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gaXNDYWxsYWJsZShhcmd1bWVudCkgPyBhcmd1bWVudCA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSkgOiBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsInZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xuXG4vLyBgR2V0TWV0aG9kYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0bWV0aG9kXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChWLCBQKSB7XG4gIHZhciBmdW5jID0gVltQXTtcbiAgcmV0dXJuIGZ1bmMgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFDYWxsYWJsZShmdW5jKTtcbn07XG4iLCJ2YXIgY2hlY2sgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICYmIGl0Lk1hdGggPT0gTWF0aCAmJiBpdDtcbn07XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG5tb2R1bGUuZXhwb3J0cyA9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLWdsb2JhbC10aGlzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIGZhbGxiYWNrXG4gIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KSgpIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHVuY3VycnlUaGlzKHt9Lmhhc093blByb3BlcnR5KTtcblxuLy8gYEhhc093blByb3BlcnR5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaGFzb3ducHJvcGVydHlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1oYXNvd24gLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaGFzT3duIHx8IGZ1bmN0aW9uIGhhc093bihpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eSh0b09iamVjdChpdCksIGtleSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ2RvY3VtZW50JywgJ2RvY3VtZW50RWxlbWVudCcpO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rcyB0byBJRTggZm9yIGl0cyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlRWxlbWVudCgnZGl2JyksICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfVxuICB9KS5hICE9IDc7XG59KTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG52YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcbiAgcmV0dXJuICEkT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk7XG59KSA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY2xhc3NvZihpdCkgPT0gJ1N0cmluZycgPyBzcGxpdChpdCwgJycpIDogJE9iamVjdChpdCk7XG59IDogJE9iamVjdDtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbnZhciBmdW5jdGlvblRvU3RyaW5nID0gdW5jdXJyeVRoaXMoRnVuY3Rpb24udG9TdHJpbmcpO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYGNvcmUtanNAMy40LjEtMy40LjRgLCBzbyB3ZSBjYW4ndCB1c2UgYHNoYXJlZGAgaGVscGVyXG5pZiAoIWlzQ2FsbGFibGUoc3RvcmUuaW5zcGVjdFNvdXJjZSkpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nKGl0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZS5pbnNwZWN0U291cmNlO1xuIiwidmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQgPSAnT2JqZWN0IGFscmVhZHkgaW5pdGlhbGl6ZWQnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCB8fCBzaGFyZWQuc3RhdGUpIHtcbiAgdmFyIHN0b3JlID0gc2hhcmVkLnN0YXRlIHx8IChzaGFyZWQuc3RhdGUgPSBuZXcgV2Vha01hcCgpKTtcbiAgdmFyIHdtZ2V0ID0gdW5jdXJyeVRoaXMoc3RvcmUuZ2V0KTtcbiAgdmFyIHdtaGFzID0gdW5jdXJyeVRoaXMoc3RvcmUuaGFzKTtcbiAgdmFyIHdtc2V0ID0gdW5jdXJyeVRoaXMoc3RvcmUuc2V0KTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmICh3bWhhcyhzdG9yZSwgaXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEKTtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICB3bXNldChzdG9yZSwgaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWdldChzdG9yZSwgaXQpIHx8IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21oYXMoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgaWYgKGhhc093bihpdCwgU1RBVEUpKSB0aHJvdyBuZXcgVHlwZUVycm9yKE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEKTtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoaXQsIFNUQVRFLCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaGFzT3duKGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGhhc093bihpdCwgU1RBVEUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGdldDogZ2V0LFxuICBoYXM6IGhhcyxcbiAgZW5mb3JjZTogZW5mb3JjZSxcbiAgZ2V0dGVyRm9yOiBnZXR0ZXJGb3Jcbn07XG4iLCIvLyBgSXNDYWxsYWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzY2FsbGFibGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogaXNDYWxsYWJsZShkZXRlY3Rpb24pID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCJ2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiBpc0NhbGxhYmxlKGl0KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciAkT2JqZWN0ID0gT2JqZWN0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVTRV9TWU1CT0xfQVNfVUlEID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciAkU3ltYm9sID0gZ2V0QnVpbHRJbignU3ltYm9sJyk7XG4gIHJldHVybiBpc0NhbGxhYmxlKCRTeW1ib2wpICYmIGlzUHJvdG90eXBlT2YoJFN5bWJvbC5wcm90b3R5cGUsICRPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbi8vIGBMZW5ndGhPZkFycmF5TGlrZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWxlbmd0aG9mYXJyYXlsaWtlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHRvTGVuZ3RoKG9iai5sZW5ndGgpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLkNPTkZJR1VSQUJMRTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxudmFyIENPTkZJR1VSQUJMRV9MRU5HVEggPSBERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAnbGVuZ3RoJywgeyB2YWx1ZTogOCB9KS5sZW5ndGggIT09IDg7XG59KTtcblxudmFyIFRFTVBMQVRFID0gU3RyaW5nKFN0cmluZykuc3BsaXQoJ1N0cmluZycpO1xuXG52YXIgbWFrZUJ1aWx0SW4gPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSwgbmFtZSwgb3B0aW9ucykge1xuICBpZiAoU3RyaW5nKG5hbWUpLnNsaWNlKDAsIDcpID09PSAnU3ltYm9sKCcpIHtcbiAgICBuYW1lID0gJ1snICsgU3RyaW5nKG5hbWUpLnJlcGxhY2UoL15TeW1ib2xcXCgoW14pXSopXFwpLywgJyQxJykgKyAnXSc7XG4gIH1cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5nZXR0ZXIpIG5hbWUgPSAnZ2V0ICcgKyBuYW1lO1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnNldHRlcikgbmFtZSA9ICdzZXQgJyArIG5hbWU7XG4gIGlmICghaGFzT3duKHZhbHVlLCAnbmFtZScpIHx8IChDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSAmJiB2YWx1ZS5uYW1lICE9PSBuYW1lKSkge1xuICAgIGRlZmluZVByb3BlcnR5KHZhbHVlLCAnbmFtZScsIHsgdmFsdWU6IG5hbWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgfVxuICBpZiAoQ09ORklHVVJBQkxFX0xFTkdUSCAmJiBvcHRpb25zICYmIGhhc093bihvcHRpb25zLCAnYXJpdHknKSAmJiB2YWx1ZS5sZW5ndGggIT09IG9wdGlvbnMuYXJpdHkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgJ2xlbmd0aCcsIHsgdmFsdWU6IG9wdGlvbnMuYXJpdHkgfSk7XG4gIH1cbiAgdHJ5IHtcbiAgICBpZiAob3B0aW9ucyAmJiBoYXNPd24ob3B0aW9ucywgJ2NvbnN0cnVjdG9yJykgJiYgb3B0aW9ucy5jb25zdHJ1Y3Rvcikge1xuICAgICAgaWYgKERFU0NSSVBUT1JTKSBkZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgJ3Byb3RvdHlwZScsIHsgd3JpdGFibGU6IGZhbHNlIH0pO1xuICAgIC8vIGluIFY4IH4gQ2hyb21lIDUzLCBwcm90b3R5cGVzIG9mIHNvbWUgbWV0aG9kcywgbGlrZSBgQXJyYXkucHJvdG90eXBlLnZhbHVlc2AsIGFyZSBub24td3JpdGFibGVcbiAgICB9IGVsc2UgaWYgKHZhbHVlLnByb3RvdHlwZSkgdmFsdWUucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHZhciBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKTtcbiAgaWYgKCFoYXNPd24oc3RhdGUsICdzb3VyY2UnKSkge1xuICAgIHN0YXRlLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4odHlwZW9mIG5hbWUgPT0gJ3N0cmluZycgPyBuYW1lIDogJycpO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG5cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4dGVuZC1uYXRpdmUgLS0gcmVxdWlyZWRcbkZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IG1ha2VCdWlsdEluKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gaXNDYWxsYWJsZSh0aGlzKSAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBpbnNwZWN0U291cmNlKHRoaXMpO1xufSwgJ3RvU3RyaW5nJyk7XG4iLCJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBNYXRoLnRydW5jYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC50cnVuY1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tbWF0aC10cnVuYyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgudHJ1bmMgfHwgZnVuY3Rpb24gdHJ1bmMoeCkge1xuICB2YXIgbiA9ICt4O1xuICByZXR1cm4gKG4gPiAwID8gZmxvb3IgOiBjZWlsKShuKTtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBlcy14L25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlzeW1ib2xzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG5tb2R1bGUuZXhwb3J0cyA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgc3ltYm9sID0gU3ltYm9sKCk7XG4gIC8vIENocm9tZSAzOCBTeW1ib2wgaGFzIGluY29ycmVjdCB0b1N0cmluZyBjb252ZXJzaW9uXG4gIC8vIGBnZXQtb3duLXByb3BlcnR5LXN5bWJvbHNgIHBvbHlmaWxsIHN5bWJvbHMgY29udmVydGVkIHRvIG9iamVjdCBhcmUgbm90IFN5bWJvbCBpbnN0YW5jZXNcbiAgcmV0dXJuICFTdHJpbmcoc3ltYm9sKSB8fCAhKE9iamVjdChzeW1ib2wpIGluc3RhbmNlb2YgU3ltYm9sKSB8fFxuICAgIC8vIENocm9tZSAzOC00MCBzeW1ib2xzIGFyZSBub3QgaW5oZXJpdGVkIGZyb20gRE9NIGNvbGxlY3Rpb25zIHByb3RvdHlwZXMgdG8gaW5zdGFuY2VzXG4gICAgIVN5bWJvbC5zaGFtICYmIFY4X1ZFUlNJT04gJiYgVjhfVkVSU0lPTiA8IDQxO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNDYWxsYWJsZShXZWFrTWFwKSAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoaW5zcGVjdFNvdXJjZShXZWFrTWFwKSk7XG4iLCIvKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAtLSBvbGQgSUUsIFdTSCAqL1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xuXG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsgLy8gYXZvaWQgbWVtb3J5IGxlYWtcbiAgcmV0dXJuIHRlbXA7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80NzVcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhKUyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCdkb2N1bWVudC5GPU9iamVjdCcpKTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7XG59O1xuXG4vLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4vLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbi8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4vLyBhdm9pZCBJRSBHQyBidWdcbnZhciBhY3RpdmVYRG9jdW1lbnQ7XG52YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIGFjdGl2ZVhEb2N1bWVudCA9IG5ldyBBY3RpdmVYT2JqZWN0KCdodG1sZmlsZScpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBpZ25vcmUgKi8gfVxuICBOdWxsUHJvdG9PYmplY3QgPSB0eXBlb2YgZG9jdW1lbnQgIT0gJ3VuZGVmaW5lZCdcbiAgICA/IGRvY3VtZW50LmRvbWFpbiAmJiBhY3RpdmVYRG9jdW1lbnRcbiAgICAgID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIC8vIG9sZCBJRVxuICAgICAgOiBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUoKVxuICAgIDogTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpOyAvLyBXU0hcbiAgdmFyIGxlbmd0aCA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSBkZWxldGUgTnVsbFByb3RvT2JqZWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07XG4gIHJldHVybiBOdWxsUHJvdG9PYmplY3QoKTtcbn07XG5cbmhpZGRlbktleXNbSUVfUFJPVE9dID0gdHJ1ZTtcblxuLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtY3JlYXRlIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXNNb2R1bGUuZihyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0aWVzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTICYmICFWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIgcHJvcHMgPSB0b0luZGV4ZWRPYmplY3QoUHJvcGVydGllcyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgcHJvcHNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG52YXIgVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG52YXIgJGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgRU5VTUVSQUJMRSA9ICdlbnVtZXJhYmxlJztcbnZhciBDT05GSUdVUkFCTEUgPSAnY29uZmlndXJhYmxlJztcbnZhciBXUklUQUJMRSA9ICd3cml0YWJsZSc7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmICh0eXBlb2YgTyA9PT0gJ2Z1bmN0aW9uJyAmJiBQID09PSAncHJvdG90eXBlJyAmJiAndmFsdWUnIGluIEF0dHJpYnV0ZXMgJiYgV1JJVEFCTEUgaW4gQXR0cmlidXRlcyAmJiAhQXR0cmlidXRlc1tXUklUQUJMRV0pIHtcbiAgICB2YXIgY3VycmVudCA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gICAgaWYgKGN1cnJlbnQgJiYgY3VycmVudFtXUklUQUJMRV0pIHtcbiAgICAgIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICAgICAgQXR0cmlidXRlcyA9IHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBDT05GSUdVUkFCTEUgaW4gQXR0cmlidXRlcyA/IEF0dHJpYnV0ZXNbQ09ORklHVVJBQkxFXSA6IGN1cnJlbnRbQ09ORklHVVJBQkxFXSxcbiAgICAgICAgZW51bWVyYWJsZTogRU5VTUVSQUJMRSBpbiBBdHRyaWJ1dGVzID8gQXR0cmlidXRlc1tFTlVNRVJBQkxFXSA6IGN1cnJlbnRbRU5VTUVSQUJMRV0sXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG4gIH0gcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbn0gOiAkZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gJGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93ICRUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXNPd24oTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIWNhbGwocHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZiwgTywgUCksIE9bUF0pO1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbnZhciBoaWRkZW5LZXlzID0gZW51bUJ1Z0tleXMuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtZ2V0b3ducHJvcGVydHluYW1lcyAtLSBzYWZlXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlzeW1ib2xzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdW5jdXJyeVRoaXMoe30uaXNQcm90b3R5cGVPZik7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pICFoYXNPd24oaGlkZGVuS2V5cywga2V5KSAmJiBoYXNPd24oTywga2V5KSAmJiBwdXNoKHJlc3VsdCwga2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhc093bihPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCBwdXNoKHJlc3VsdCwga2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3Qta2V5cyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhJHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGVcbmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCBWKTtcbiAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XG59IDogJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBPcmRpbmFyeVRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb3JkaW5hcnl0b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChwcmVmID09PSAnc3RyaW5nJyAmJiBpc0NhbGxhYmxlKGZuID0gaW5wdXQudG9TdHJpbmcpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAoaXNDYWxsYWJsZShmbiA9IGlucHV0LnZhbHVlT2YpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAocHJlZiAhPT0gJ3N0cmluZycgJiYgaXNDYWxsYWJsZShmbiA9IGlucHV0LnRvU3RyaW5nKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgJFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxudmFyIGNvbmNhdCA9IHVuY3VycnlUaGlzKFtdLmNvbmNhdCk7XG5cbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBjb25jYXQoa2V5cywgZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93ICRUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZGVmaW5lR2xvYmFsUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWdsb2JhbC1wcm9wZXJ0eScpO1xuXG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCBkZWZpbmVHbG9iYWxQcm9wZXJ0eShTSEFSRUQsIHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcbiIsInZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjIyLjgnLFxuICBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTQtMjAyMiBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KScsXG4gIGxpY2Vuc2U6ICdodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9ibG9iL3YzLjIyLjgvTElDRU5TRScsXG4gIHNvdXJjZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzJ1xufSk7XG4iLCJ2YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlck9ySW5maW5pdHkoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCIvLyB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7XG59O1xuIiwidmFyIHRydW5jID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtdHJ1bmMnKTtcblxuLy8gYFRvSW50ZWdlck9ySW5maW5pdHlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2ludGVnZXJvcmluZmluaXR5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgbnVtYmVyID0gK2FyZ3VtZW50O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICByZXR1cm4gbnVtYmVyICE9PSBudW1iZXIgfHwgbnVtYmVyID09PSAwID8gMCA6IHRydW5jKG51bWJlcik7XG59O1xuIiwidmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlck9ySW5maW5pdHkoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gJE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgb3JkaW5hcnlUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkgfHwgaXNTeW1ib2woaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBleG90aWNUb1ByaW0gPSBnZXRNZXRob2QoaW5wdXQsIFRPX1BSSU1JVElWRSk7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChleG90aWNUb1ByaW0pIHtcbiAgICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ2RlZmF1bHQnO1xuICAgIHJlc3VsdCA9IGNhbGwoZXhvdGljVG9QcmltLCBpbnB1dCwgcHJlZik7XG4gICAgaWYgKCFpc09iamVjdChyZXN1bHQpIHx8IGlzU3ltYm9sKHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gICAgdGhyb3cgJFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbiAgfVxuICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ251bWJlcic7XG4gIHJldHVybiBvcmRpbmFyeVRvUHJpbWl0aXZlKGlucHV0LCBwcmVmKTtcbn07XG4iLCJ2YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG5cbi8vIGBUb1Byb3BlcnR5S2V5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcm9wZXJ0eWtleVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCAnc3RyaW5nJyk7XG4gIHJldHVybiBpc1N5bWJvbChrZXkpID8ga2V5IDoga2V5ICsgJyc7XG59O1xuIiwidmFyICRTdHJpbmcgPSBTdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICRTdHJpbmcoYXJndW1lbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiAnT2JqZWN0JztcbiAgfVxufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxudmFyIGlkID0gMDtcbnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTtcbnZhciB0b1N0cmluZyA9IHVuY3VycnlUaGlzKDEuMC50b1N0cmluZyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArIHRvU3RyaW5nKCsraWQgKyBwb3N0Zml4LCAzNik7XG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgZXMteC9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MXG4gICYmICFTeW1ib2wuc2hhbVxuICAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gVjggfiBDaHJvbWUgMzYtXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMzM0XG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAncHJvdG90eXBlJywge1xuICAgIHZhbHVlOiA0MixcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSkucHJvdG90eXBlICE9IDQyO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xuXG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIHN5bWJvbEZvciA9IFN5bWJvbCAmJiBTeW1ib2xbJ2ZvciddO1xudmFyIGNyZWF0ZVdlbGxLbm93blN5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gU3ltYm9sIDogU3ltYm9sICYmIFN5bWJvbC53aXRob3V0U2V0dGVyIHx8IHVpZDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICBpZiAoIWhhc093bihXZWxsS25vd25TeW1ib2xzU3RvcmUsIG5hbWUpIHx8ICEoTkFUSVZFX1NZTUJPTCB8fCB0eXBlb2YgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID09ICdzdHJpbmcnKSkge1xuICAgIHZhciBkZXNjcmlwdGlvbiA9ICdTeW1ib2wuJyArIG5hbWU7XG4gICAgaWYgKE5BVElWRV9TWU1CT0wgJiYgaGFzT3duKFN5bWJvbCwgbmFtZSkpIHtcbiAgICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IFN5bWJvbFtuYW1lXTtcbiAgICB9IGVsc2UgaWYgKFVTRV9TWU1CT0xfQVNfVUlEICYmIHN5bWJvbEZvcikge1xuICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gc3ltYm9sRm9yKGRlc2NyaXB0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gY3JlYXRlV2VsbEtub3duU3ltYm9sKGRlc2NyaXB0aW9uKTtcbiAgICB9XG4gIH0gcmV0dXJuIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmNsdWRlcztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIEZGOTkrIGJ1Z1xudmFyIEJST0tFTl9PTl9TUEFSU0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhQXJyYXkoMSkuaW5jbHVkZXMoKTtcbn0pO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBCUk9LRU5fT05fU1BBUlNFIH0sIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2luY2x1ZGVzJyk7XG4iLCIvKipcbiAqIG1hdGNoZXNTZWxlY3RvciB2Mi4wLjJcbiAqIG1hdGNoZXNTZWxlY3RvciggZWxlbWVudCwgJy5zZWxlY3RvcicgKVxuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUgKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlICovXG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5tYXRjaGVzU2VsZWN0b3IgPSBmYWN0b3J5KCk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIG1hdGNoZXNNZXRob2QgPSAoIGZ1bmN0aW9uKCkge1xuICAgIHZhciBFbGVtUHJvdG8gPSB3aW5kb3cuRWxlbWVudC5wcm90b3R5cGU7XG4gICAgLy8gY2hlY2sgZm9yIHRoZSBzdGFuZGFyZCBtZXRob2QgbmFtZSBmaXJzdFxuICAgIGlmICggRWxlbVByb3RvLm1hdGNoZXMgKSB7XG4gICAgICByZXR1cm4gJ21hdGNoZXMnO1xuICAgIH1cbiAgICAvLyBjaGVjayB1bi1wcmVmaXhlZFxuICAgIGlmICggRWxlbVByb3RvLm1hdGNoZXNTZWxlY3RvciApIHtcbiAgICAgIHJldHVybiAnbWF0Y2hlc1NlbGVjdG9yJztcbiAgICB9XG4gICAgLy8gY2hlY2sgdmVuZG9yIHByZWZpeGVzXG4gICAgdmFyIHByZWZpeGVzID0gWyAnd2Via2l0JywgJ21veicsICdtcycsICdvJyBdO1xuXG4gICAgZm9yICggdmFyIGk9MDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrICkge1xuICAgICAgdmFyIHByZWZpeCA9IHByZWZpeGVzW2ldO1xuICAgICAgdmFyIG1ldGhvZCA9IHByZWZpeCArICdNYXRjaGVzU2VsZWN0b3InO1xuICAgICAgaWYgKCBFbGVtUHJvdG9bIG1ldGhvZCBdICkge1xuICAgICAgICByZXR1cm4gbWV0aG9kO1xuICAgICAgfVxuICAgIH1cbiAgfSkoKTtcblxuICByZXR1cm4gZnVuY3Rpb24gbWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBzZWxlY3RvciApIHtcbiAgICByZXR1cm4gZWxlbVsgbWF0Y2hlc01ldGhvZCBdKCBzZWxlY3RvciApO1xuICB9O1xuXG59KSk7XG4iLCIvKipcbiAqIEV2RW1pdHRlciB2MS4xLjBcbiAqIExpbCcgZXZlbnQgZW1pdHRlclxuICogTUlUIExpY2Vuc2VcbiAqL1xuXG4vKiBqc2hpbnQgdW51c2VkOiB0cnVlLCB1bmRlZjogdHJ1ZSwgc3RyaWN0OiB0cnVlICovXG5cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qIGdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHdpbmRvdyAqL1xuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRCAtIFJlcXVpcmVKU1xuICAgIGRlZmluZSggZmFjdG9yeSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTIC0gQnJvd3NlcmlmeSwgV2VicGFja1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xuICAgIGdsb2JhbC5FdkVtaXR0ZXIgPSBmYWN0b3J5KCk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gRXZFbWl0dGVyKCkge31cblxudmFyIHByb3RvID0gRXZFbWl0dGVyLnByb3RvdHlwZTtcblxucHJvdG8ub24gPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcbiAgaWYgKCAhZXZlbnROYW1lIHx8ICFsaXN0ZW5lciApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gc2V0IGV2ZW50cyBoYXNoXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG4gIC8vIHNldCBsaXN0ZW5lcnMgYXJyYXlcbiAgdmFyIGxpc3RlbmVycyA9IGV2ZW50c1sgZXZlbnROYW1lIF0gPSBldmVudHNbIGV2ZW50TmFtZSBdIHx8IFtdO1xuICAvLyBvbmx5IGFkZCBvbmNlXG4gIGlmICggbGlzdGVuZXJzLmluZGV4T2YoIGxpc3RlbmVyICkgPT0gLTEgKSB7XG4gICAgbGlzdGVuZXJzLnB1c2goIGxpc3RlbmVyICk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLm9uY2UgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcbiAgaWYgKCAhZXZlbnROYW1lIHx8ICFsaXN0ZW5lciApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gYWRkIGV2ZW50XG4gIHRoaXMub24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKTtcbiAgLy8gc2V0IG9uY2UgZmxhZ1xuICAvLyBzZXQgb25jZUV2ZW50cyBoYXNoXG4gIHZhciBvbmNlRXZlbnRzID0gdGhpcy5fb25jZUV2ZW50cyA9IHRoaXMuX29uY2VFdmVudHMgfHwge307XG4gIC8vIHNldCBvbmNlTGlzdGVuZXJzIG9iamVjdFxuICB2YXIgb25jZUxpc3RlbmVycyA9IG9uY2VFdmVudHNbIGV2ZW50TmFtZSBdID0gb25jZUV2ZW50c1sgZXZlbnROYW1lIF0gfHwge307XG4gIC8vIHNldCBmbGFnXG4gIG9uY2VMaXN0ZW5lcnNbIGxpc3RlbmVyIF0gPSB0cnVlO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8ub2ZmID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHMgJiYgdGhpcy5fZXZlbnRzWyBldmVudE5hbWUgXTtcbiAgaWYgKCAhbGlzdGVuZXJzIHx8ICFsaXN0ZW5lcnMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZiggbGlzdGVuZXIgKTtcbiAgaWYgKCBpbmRleCAhPSAtMSApIHtcbiAgICBsaXN0ZW5lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5lbWl0RXZlbnQgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBhcmdzICkge1xuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzICYmIHRoaXMuX2V2ZW50c1sgZXZlbnROYW1lIF07XG4gIGlmICggIWxpc3RlbmVycyB8fCAhbGlzdGVuZXJzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gY29weSBvdmVyIHRvIGF2b2lkIGludGVyZmVyZW5jZSBpZiAub2ZmKCkgaW4gbGlzdGVuZXJcbiAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLnNsaWNlKDApO1xuICBhcmdzID0gYXJncyB8fCBbXTtcbiAgLy8gb25jZSBzdHVmZlxuICB2YXIgb25jZUxpc3RlbmVycyA9IHRoaXMuX29uY2VFdmVudHMgJiYgdGhpcy5fb25jZUV2ZW50c1sgZXZlbnROYW1lIF07XG5cbiAgZm9yICggdmFyIGk9MDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV1cbiAgICB2YXIgaXNPbmNlID0gb25jZUxpc3RlbmVycyAmJiBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xuICAgIGlmICggaXNPbmNlICkge1xuICAgICAgLy8gcmVtb3ZlIGxpc3RlbmVyXG4gICAgICAvLyByZW1vdmUgYmVmb3JlIHRyaWdnZXIgdG8gcHJldmVudCByZWN1cnNpb25cbiAgICAgIHRoaXMub2ZmKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XG4gICAgICAvLyB1bnNldCBvbmNlIGZsYWdcbiAgICAgIGRlbGV0ZSBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xuICAgIH1cbiAgICAvLyB0cmlnZ2VyIGxpc3RlbmVyXG4gICAgbGlzdGVuZXIuYXBwbHkoIHRoaXMsIGFyZ3MgKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8uYWxsT2ZmID0gZnVuY3Rpb24oKSB7XG4gIGRlbGV0ZSB0aGlzLl9ldmVudHM7XG4gIGRlbGV0ZSB0aGlzLl9vbmNlRXZlbnRzO1xufTtcblxucmV0dXJuIEV2RW1pdHRlcjtcblxufSkpO1xuIiwiLyoqXG4gKiBGaXp6eSBVSSB1dGlscyB2Mi4wLjdcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSwgc3RyaWN0OiB0cnVlICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qanNoaW50IHN0cmljdDogZmFsc2UgKi8gLypnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXG5cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICdkZXNhbmRyby1tYXRjaGVzLXNlbGVjdG9yL21hdGNoZXMtc2VsZWN0b3InXG4gICAgXSwgZnVuY3Rpb24oIG1hdGNoZXNTZWxlY3RvciApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIG1hdGNoZXNTZWxlY3RvciApO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3RvcicpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5maXp6eVVJVXRpbHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93Lm1hdGNoZXNTZWxlY3RvclxuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIG1hdGNoZXNTZWxlY3RvciApIHtcblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSB7fTtcblxuLy8gLS0tLS0gZXh0ZW5kIC0tLS0tIC8vXG5cbi8vIGV4dGVuZHMgb2JqZWN0c1xudXRpbHMuZXh0ZW5kID0gZnVuY3Rpb24oIGEsIGIgKSB7XG4gIGZvciAoIHZhciBwcm9wIGluIGIgKSB7XG4gICAgYVsgcHJvcCBdID0gYlsgcHJvcCBdO1xuICB9XG4gIHJldHVybiBhO1xufTtcblxuLy8gLS0tLS0gbW9kdWxvIC0tLS0tIC8vXG5cbnV0aWxzLm1vZHVsbyA9IGZ1bmN0aW9uKCBudW0sIGRpdiApIHtcbiAgcmV0dXJuICggKCBudW0gJSBkaXYgKSArIGRpdiApICUgZGl2O1xufTtcblxuLy8gLS0tLS0gbWFrZUFycmF5IC0tLS0tIC8vXG5cbnZhciBhcnJheVNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG4vLyB0dXJuIGVsZW1lbnQgb3Igbm9kZUxpc3QgaW50byBhbiBhcnJheVxudXRpbHMubWFrZUFycmF5ID0gZnVuY3Rpb24oIG9iaiApIHtcbiAgaWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcbiAgICAvLyB1c2Ugb2JqZWN0IGlmIGFscmVhZHkgYW4gYXJyYXlcbiAgICByZXR1cm4gb2JqO1xuICB9XG4gIC8vIHJldHVybiBlbXB0eSBhcnJheSBpZiB1bmRlZmluZWQgb3IgbnVsbC4gIzZcbiAgaWYgKCBvYmogPT09IG51bGwgfHwgb2JqID09PSB1bmRlZmluZWQgKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgdmFyIGlzQXJyYXlMaWtlID0gdHlwZW9mIG9iaiA9PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqLmxlbmd0aCA9PSAnbnVtYmVyJztcbiAgaWYgKCBpc0FycmF5TGlrZSApIHtcbiAgICAvLyBjb252ZXJ0IG5vZGVMaXN0IHRvIGFycmF5XG4gICAgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCggb2JqICk7XG4gIH1cblxuICAvLyBhcnJheSBvZiBzaW5nbGUgaW5kZXhcbiAgcmV0dXJuIFsgb2JqIF07XG59O1xuXG4vLyAtLS0tLSByZW1vdmVGcm9tIC0tLS0tIC8vXG5cbnV0aWxzLnJlbW92ZUZyb20gPSBmdW5jdGlvbiggYXJ5LCBvYmogKSB7XG4gIHZhciBpbmRleCA9IGFyeS5pbmRleE9mKCBvYmogKTtcbiAgaWYgKCBpbmRleCAhPSAtMSApIHtcbiAgICBhcnkuc3BsaWNlKCBpbmRleCwgMSApO1xuICB9XG59O1xuXG4vLyAtLS0tLSBnZXRQYXJlbnQgLS0tLS0gLy9cblxudXRpbHMuZ2V0UGFyZW50ID0gZnVuY3Rpb24oIGVsZW0sIHNlbGVjdG9yICkge1xuICB3aGlsZSAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtICE9IGRvY3VtZW50LmJvZHkgKSB7XG4gICAgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZTtcbiAgICBpZiAoIG1hdGNoZXNTZWxlY3RvciggZWxlbSwgc2VsZWN0b3IgKSApIHtcbiAgICAgIHJldHVybiBlbGVtO1xuICAgIH1cbiAgfVxufTtcblxuLy8gLS0tLS0gZ2V0UXVlcnlFbGVtZW50IC0tLS0tIC8vXG5cbi8vIHVzZSBlbGVtZW50IGFzIHNlbGVjdG9yIHN0cmluZ1xudXRpbHMuZ2V0UXVlcnlFbGVtZW50ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGVsZW0gKTtcbiAgfVxuICByZXR1cm4gZWxlbTtcbn07XG5cbi8vIC0tLS0tIGhhbmRsZUV2ZW50IC0tLS0tIC8vXG5cbi8vIGVuYWJsZSAub250eXBlIHRvIHRyaWdnZXIgZnJvbSAuYWRkRXZlbnRMaXN0ZW5lciggZWxlbSwgJ3R5cGUnIClcbnV0aWxzLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB2YXIgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XG4gIGlmICggdGhpc1sgbWV0aG9kIF0gKSB7XG4gICAgdGhpc1sgbWV0aG9kIF0oIGV2ZW50ICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIGZpbHRlckZpbmRFbGVtZW50cyAtLS0tLSAvL1xuXG51dGlscy5maWx0ZXJGaW5kRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMsIHNlbGVjdG9yICkge1xuICAvLyBtYWtlIGFycmF5IG9mIGVsZW1zXG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xuICB2YXIgZmZFbGVtcyA9IFtdO1xuXG4gIGVsZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgIC8vIGNoZWNrIHRoYXQgZWxlbSBpcyBhbiBhY3R1YWwgZWxlbWVudFxuICAgIGlmICggISggZWxlbSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICkgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGFkZCBlbGVtIGlmIG5vIHNlbGVjdG9yXG4gICAgaWYgKCAhc2VsZWN0b3IgKSB7XG4gICAgICBmZkVsZW1zLnB1c2goIGVsZW0gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gZmlsdGVyICYgZmluZCBpdGVtcyBpZiB3ZSBoYXZlIGEgc2VsZWN0b3JcbiAgICAvLyBmaWx0ZXJcbiAgICBpZiAoIG1hdGNoZXNTZWxlY3RvciggZWxlbSwgc2VsZWN0b3IgKSApIHtcbiAgICAgIGZmRWxlbXMucHVzaCggZWxlbSApO1xuICAgIH1cbiAgICAvLyBmaW5kIGNoaWxkcmVuXG4gICAgdmFyIGNoaWxkRWxlbXMgPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoIHNlbGVjdG9yICk7XG4gICAgLy8gY29uY2F0IGNoaWxkRWxlbXMgdG8gZmlsdGVyRm91bmQgYXJyYXlcbiAgICBmb3IgKCB2YXIgaT0wOyBpIDwgY2hpbGRFbGVtcy5sZW5ndGg7IGkrKyApIHtcbiAgICAgIGZmRWxlbXMucHVzaCggY2hpbGRFbGVtc1tpXSApO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGZmRWxlbXM7XG59O1xuXG4vLyAtLS0tLSBkZWJvdW5jZU1ldGhvZCAtLS0tLSAvL1xuXG51dGlscy5kZWJvdW5jZU1ldGhvZCA9IGZ1bmN0aW9uKCBfY2xhc3MsIG1ldGhvZE5hbWUsIHRocmVzaG9sZCApIHtcbiAgdGhyZXNob2xkID0gdGhyZXNob2xkIHx8IDEwMDtcbiAgLy8gb3JpZ2luYWwgbWV0aG9kXG4gIHZhciBtZXRob2QgPSBfY2xhc3MucHJvdG90eXBlWyBtZXRob2ROYW1lIF07XG4gIHZhciB0aW1lb3V0TmFtZSA9IG1ldGhvZE5hbWUgKyAnVGltZW91dCc7XG5cbiAgX2NsYXNzLnByb3RvdHlwZVsgbWV0aG9kTmFtZSBdID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzWyB0aW1lb3V0TmFtZSBdO1xuICAgIGNsZWFyVGltZW91dCggdGltZW91dCApO1xuXG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzWyB0aW1lb3V0TmFtZSBdID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICBtZXRob2QuYXBwbHkoIF90aGlzLCBhcmdzICk7XG4gICAgICBkZWxldGUgX3RoaXNbIHRpbWVvdXROYW1lIF07XG4gICAgfSwgdGhyZXNob2xkICk7XG4gIH07XG59O1xuXG4vLyAtLS0tLSBkb2NSZWFkeSAtLS0tLSAvL1xuXG51dGlscy5kb2NSZWFkeSA9IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcbiAgdmFyIHJlYWR5U3RhdGUgPSBkb2N1bWVudC5yZWFkeVN0YXRlO1xuICBpZiAoIHJlYWR5U3RhdGUgPT0gJ2NvbXBsZXRlJyB8fCByZWFkeVN0YXRlID09ICdpbnRlcmFjdGl2ZScgKSB7XG4gICAgLy8gZG8gYXN5bmMgdG8gYWxsb3cgZm9yIG90aGVyIHNjcmlwdHMgdG8gcnVuLiBtZXRhZml6enkvZmxpY2tpdHkjNDQxXG4gICAgc2V0VGltZW91dCggY2FsbGJhY2sgKTtcbiAgfSBlbHNlIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAnRE9NQ29udGVudExvYWRlZCcsIGNhbGxiYWNrICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIGh0bWxJbml0IC0tLS0tIC8vXG5cbi8vIGh0dHA6Ly9qYW1lc3JvYmVydHMubmFtZS9ibG9nLzIwMTAvMDIvMjIvc3RyaW5nLWZ1bmN0aW9ucy1mb3ItamF2YXNjcmlwdC10cmltLXRvLWNhbWVsLWNhc2UtdG8tZGFzaGVkLWFuZC10by11bmRlcnNjb3JlL1xudXRpbHMudG9EYXNoZWQgPSBmdW5jdGlvbiggc3RyICkge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoIC8oLikoW0EtWl0pL2csIGZ1bmN0aW9uKCBtYXRjaCwgJDEsICQyICkge1xuICAgIHJldHVybiAkMSArICctJyArICQyO1xuICB9KS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcbi8qKlxuICogYWxsb3cgdXNlciB0byBpbml0aWFsaXplIGNsYXNzZXMgdmlhIFtkYXRhLW5hbWVzcGFjZV0gb3IgLmpzLW5hbWVzcGFjZSBjbGFzc1xuICogaHRtbEluaXQoIFdpZGdldCwgJ3dpZGdldE5hbWUnIClcbiAqIG9wdGlvbnMgYXJlIHBhcnNlZCBmcm9tIGRhdGEtbmFtZXNwYWNlLW9wdGlvbnNcbiAqL1xudXRpbHMuaHRtbEluaXQgPSBmdW5jdGlvbiggV2lkZ2V0Q2xhc3MsIG5hbWVzcGFjZSApIHtcbiAgdXRpbHMuZG9jUmVhZHkoIGZ1bmN0aW9uKCkge1xuICAgIHZhciBkYXNoZWROYW1lc3BhY2UgPSB1dGlscy50b0Rhc2hlZCggbmFtZXNwYWNlICk7XG4gICAgdmFyIGRhdGFBdHRyID0gJ2RhdGEtJyArIGRhc2hlZE5hbWVzcGFjZTtcbiAgICB2YXIgZGF0YUF0dHJFbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoICdbJyArIGRhdGFBdHRyICsgJ10nICk7XG4gICAgdmFyIGpzRGFzaEVsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggJy5qcy0nICsgZGFzaGVkTmFtZXNwYWNlICk7XG4gICAgdmFyIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBkYXRhQXR0ckVsZW1zIClcbiAgICAgIC5jb25jYXQoIHV0aWxzLm1ha2VBcnJheSgganNEYXNoRWxlbXMgKSApO1xuICAgIHZhciBkYXRhT3B0aW9uc0F0dHIgPSBkYXRhQXR0ciArICctb3B0aW9ucyc7XG4gICAgdmFyIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7XG5cbiAgICBlbGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgIHZhciBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoIGRhdGFBdHRyICkgfHxcbiAgICAgICAgZWxlbS5nZXRBdHRyaWJ1dGUoIGRhdGFPcHRpb25zQXR0ciApO1xuICAgICAgdmFyIG9wdGlvbnM7XG4gICAgICB0cnkge1xuICAgICAgICBvcHRpb25zID0gYXR0ciAmJiBKU09OLnBhcnNlKCBhdHRyICk7XG4gICAgICB9IGNhdGNoICggZXJyb3IgKSB7XG4gICAgICAgIC8vIGxvZyBlcnJvciwgZG8gbm90IGluaXRpYWxpemVcbiAgICAgICAgaWYgKCBjb25zb2xlICkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoICdFcnJvciBwYXJzaW5nICcgKyBkYXRhQXR0ciArICcgb24gJyArIGVsZW0uY2xhc3NOYW1lICtcbiAgICAgICAgICAnOiAnICsgZXJyb3IgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBpbml0aWFsaXplXG4gICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgV2lkZ2V0Q2xhc3MoIGVsZW0sIG9wdGlvbnMgKTtcbiAgICAgIC8vIG1ha2UgYXZhaWxhYmxlIHZpYSAkKCkuZGF0YSgnbmFtZXNwYWNlJylcbiAgICAgIGlmICggalF1ZXJ5ICkge1xuICAgICAgICBqUXVlcnkuZGF0YSggZWxlbSwgbmFtZXNwYWNlLCBpbnN0YW5jZSApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIH0pO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbnJldHVybiB1dGlscztcblxufSkpO1xuIiwiLyohXG4gKiBGbGlja2l0eSBpbWFnZXNMb2FkZWQgdjIuMC4wXG4gKiBlbmFibGVzIGltYWdlc0xvYWRlZCBvcHRpb24gZm9yIEZsaWNraXR5XG4gKi9cblxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgc3RyaWN0OiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qanNoaW50IHN0cmljdDogZmFsc2UgKi8gLypnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAnZmxpY2tpdHkvanMvaW5kZXgnLFxuICAgICAgJ2ltYWdlc2xvYWRlZC9pbWFnZXNsb2FkZWQnXG4gICAgXSwgZnVuY3Rpb24oIEZsaWNraXR5LCBpbWFnZXNMb2FkZWQgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBGbGlja2l0eSwgaW1hZ2VzTG9hZGVkICk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICByZXF1aXJlKCdmbGlja2l0eScpLFxuICAgICAgcmVxdWlyZSgnaW1hZ2VzbG9hZGVkJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LkZsaWNraXR5ID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHdpbmRvdy5GbGlja2l0eSxcbiAgICAgIHdpbmRvdy5pbWFnZXNMb2FkZWRcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBGbGlja2l0eSwgaW1hZ2VzTG9hZGVkICkge1xuJ3VzZSBzdHJpY3QnO1xuXG5GbGlja2l0eS5jcmVhdGVNZXRob2RzLnB1c2goJ19jcmVhdGVJbWFnZXNMb2FkZWQnKTtcblxudmFyIHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xuXG5wcm90by5fY3JlYXRlSW1hZ2VzTG9hZGVkID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMub24oICdhY3RpdmF0ZScsIHRoaXMuaW1hZ2VzTG9hZGVkICk7XG59O1xuXG5wcm90by5pbWFnZXNMb2FkZWQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLmltYWdlc0xvYWRlZCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIF90aGlzID0gdGhpcztcbiAgZnVuY3Rpb24gb25JbWFnZXNMb2FkZWRQcm9ncmVzcyggaW5zdGFuY2UsIGltYWdlICkge1xuICAgIHZhciBjZWxsID0gX3RoaXMuZ2V0UGFyZW50Q2VsbCggaW1hZ2UuaW1nICk7XG4gICAgX3RoaXMuY2VsbFNpemVDaGFuZ2UoIGNlbGwgJiYgY2VsbC5lbGVtZW50ICk7XG4gICAgaWYgKCAhX3RoaXMub3B0aW9ucy5mcmVlU2Nyb2xsICkge1xuICAgICAgX3RoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCk7XG4gICAgfVxuICB9XG4gIGltYWdlc0xvYWRlZCggdGhpcy5zbGlkZXIgKS5vbiggJ3Byb2dyZXNzJywgb25JbWFnZXNMb2FkZWRQcm9ncmVzcyApO1xufTtcblxucmV0dXJuIEZsaWNraXR5O1xuXG59KSk7XG4iLCIvLyBhZGQsIHJlbW92ZSBjZWxsXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgJy4vZmxpY2tpdHknLFxuICAgICAgJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJyxcbiAgICBdLCBmdW5jdGlvbiggRmxpY2tpdHksIHV0aWxzICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgRmxpY2tpdHksIHV0aWxzICk7XG4gICAgfSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgICB3aW5kb3csXG4gICAgICAgIHJlcXVpcmUoJy4vZmxpY2tpdHknKSxcbiAgICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBmYWN0b3J5KFxuICAgICAgICB3aW5kb3csXG4gICAgICAgIHdpbmRvdy5GbGlja2l0eSxcbiAgICAgICAgd2luZG93LmZpenp5VUlVdGlsc1xuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIEZsaWNraXR5LCB1dGlscyApIHtcblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBhcHBlbmQgY2VsbHMgdG8gYSBkb2N1bWVudCBmcmFnbWVudFxuZnVuY3Rpb24gZ2V0Q2VsbHNGcmFnbWVudCggY2VsbHMgKSB7XG4gIHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgY2VsbHMuZm9yRWFjaCggZnVuY3Rpb24oIGNlbGwgKSB7XG4gICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNlbGwuZWxlbWVudCApO1xuICB9ICk7XG4gIHJldHVybiBmcmFnbWVudDtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYWRkL3JlbW92ZSBjZWxsIHByb3RvdHlwZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG52YXIgcHJvdG8gPSBGbGlja2l0eS5wcm90b3R5cGU7XG5cbi8qKlxuICogSW5zZXJ0LCBwcmVwZW5kLCBvciBhcHBlbmQgY2VsbHNcbiAqIEBwYXJhbSB7W0VsZW1lbnQsIEFycmF5LCBOb2RlTGlzdF19IGVsZW1zIC0gRWxlbWVudHMgdG8gaW5zZXJ0XG4gKiBAcGFyYW0ge0ludGVnZXJ9IGluZGV4IC0gWmVyby1iYXNlZCBudW1iZXIgdG8gaW5zZXJ0XG4gKi9cbnByb3RvLmluc2VydCA9IGZ1bmN0aW9uKCBlbGVtcywgaW5kZXggKSB7XG4gIHZhciBjZWxscyA9IHRoaXMuX21ha2VDZWxscyggZWxlbXMgKTtcbiAgaWYgKCAhY2VsbHMgfHwgIWNlbGxzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGxlbiA9IHRoaXMuY2VsbHMubGVuZ3RoO1xuICAvLyBkZWZhdWx0IHRvIGFwcGVuZFxuICBpbmRleCA9IGluZGV4ID09PSB1bmRlZmluZWQgPyBsZW4gOiBpbmRleDtcbiAgLy8gYWRkIGNlbGxzIHdpdGggZG9jdW1lbnQgZnJhZ21lbnRcbiAgdmFyIGZyYWdtZW50ID0gZ2V0Q2VsbHNGcmFnbWVudCggY2VsbHMgKTtcbiAgLy8gYXBwZW5kIHRvIHNsaWRlclxuICB2YXIgaXNBcHBlbmQgPSBpbmRleCA9PSBsZW47XG4gIGlmICggaXNBcHBlbmQgKSB7XG4gICAgdGhpcy5zbGlkZXIuYXBwZW5kQ2hpbGQoIGZyYWdtZW50ICk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc2VydENlbGxFbGVtZW50ID0gdGhpcy5jZWxsc1sgaW5kZXggXS5lbGVtZW50O1xuICAgIHRoaXMuc2xpZGVyLmluc2VydEJlZm9yZSggZnJhZ21lbnQsIGluc2VydENlbGxFbGVtZW50ICk7XG4gIH1cbiAgLy8gYWRkIHRvIHRoaXMuY2VsbHNcbiAgaWYgKCBpbmRleCA9PT0gMCApIHtcbiAgICAvLyBwcmVwZW5kLCBhZGQgdG8gc3RhcnRcbiAgICB0aGlzLmNlbGxzID0gY2VsbHMuY29uY2F0KCB0aGlzLmNlbGxzICk7XG4gIH0gZWxzZSBpZiAoIGlzQXBwZW5kICkge1xuICAgIC8vIGFwcGVuZCwgYWRkIHRvIGVuZFxuICAgIHRoaXMuY2VsbHMgPSB0aGlzLmNlbGxzLmNvbmNhdCggY2VsbHMgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpbnNlcnQgaW4gdGhpcy5jZWxsc1xuICAgIHZhciBlbmRDZWxscyA9IHRoaXMuY2VsbHMuc3BsaWNlKCBpbmRleCwgbGVuIC0gaW5kZXggKTtcbiAgICB0aGlzLmNlbGxzID0gdGhpcy5jZWxscy5jb25jYXQoIGNlbGxzICkuY29uY2F0KCBlbmRDZWxscyApO1xuICB9XG5cbiAgdGhpcy5fc2l6ZUNlbGxzKCBjZWxscyApO1xuICB0aGlzLmNlbGxDaGFuZ2UoIGluZGV4LCB0cnVlICk7XG59O1xuXG5wcm90by5hcHBlbmQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHRoaXMuaW5zZXJ0KCBlbGVtcywgdGhpcy5jZWxscy5sZW5ndGggKTtcbn07XG5cbnByb3RvLnByZXBlbmQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHRoaXMuaW5zZXJ0KCBlbGVtcywgMCApO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgY2VsbHNcbiAqIEBwYXJhbSB7W0VsZW1lbnQsIEFycmF5LCBOb2RlTGlzdF19IGVsZW1zIC0gRUxlbWVudHMgdG8gcmVtb3ZlXG4gKi9cbnByb3RvLnJlbW92ZSA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgdmFyIGNlbGxzID0gdGhpcy5nZXRDZWxscyggZWxlbXMgKTtcbiAgaWYgKCAhY2VsbHMgfHwgIWNlbGxzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbWluQ2VsbEluZGV4ID0gdGhpcy5jZWxscy5sZW5ndGggLSAxO1xuICAvLyByZW1vdmUgY2VsbHMgZnJvbSBjb2xsZWN0aW9uICYgRE9NXG4gIGNlbGxzLmZvckVhY2goIGZ1bmN0aW9uKCBjZWxsICkge1xuICAgIGNlbGwucmVtb3ZlKCk7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5jZWxscy5pbmRleE9mKCBjZWxsICk7XG4gICAgbWluQ2VsbEluZGV4ID0gTWF0aC5taW4oIGluZGV4LCBtaW5DZWxsSW5kZXggKTtcbiAgICB1dGlscy5yZW1vdmVGcm9tKCB0aGlzLmNlbGxzLCBjZWxsICk7XG4gIH0sIHRoaXMgKTtcblxuICB0aGlzLmNlbGxDaGFuZ2UoIG1pbkNlbGxJbmRleCwgdHJ1ZSApO1xufTtcblxuLyoqXG4gKiBsb2dpYyB0byBiZSBydW4gYWZ0ZXIgYSBjZWxsJ3Mgc2l6ZSBjaGFuZ2VzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW0gLSBjZWxsJ3MgZWxlbWVudFxuICovXG5wcm90by5jZWxsU2l6ZUNoYW5nZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICB2YXIgY2VsbCA9IHRoaXMuZ2V0Q2VsbCggZWxlbSApO1xuICBpZiAoICFjZWxsICkge1xuICAgIHJldHVybjtcbiAgfVxuICBjZWxsLmdldFNpemUoKTtcblxuICB2YXIgaW5kZXggPSB0aGlzLmNlbGxzLmluZGV4T2YoIGNlbGwgKTtcbiAgdGhpcy5jZWxsQ2hhbmdlKCBpbmRleCApO1xufTtcblxuLyoqXG4gKiBsb2dpYyBhbnkgdGltZSBhIGNlbGwgaXMgY2hhbmdlZDogYWRkZWQsIHJlbW92ZWQsIG9yIHNpemUgY2hhbmdlZFxuICogQHBhcmFtIHtJbnRlZ2VyfSBjaGFuZ2VkQ2VsbEluZGV4IC0gaW5kZXggb2YgdGhlIGNoYW5nZWQgY2VsbCwgb3B0aW9uYWxcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNQb3NpdGlvbmluZ1NsaWRlciAtIFBvc2l0aW9ucyBzbGlkZXIgYWZ0ZXIgc2VsZWN0aW9uXG4gKi9cbnByb3RvLmNlbGxDaGFuZ2UgPSBmdW5jdGlvbiggY2hhbmdlZENlbGxJbmRleCwgaXNQb3NpdGlvbmluZ1NsaWRlciApIHtcbiAgdmFyIHByZXZTZWxlY3RlZEVsZW0gPSB0aGlzLnNlbGVjdGVkRWxlbWVudDtcbiAgdGhpcy5fcG9zaXRpb25DZWxscyggY2hhbmdlZENlbGxJbmRleCApO1xuICB0aGlzLl9nZXRXcmFwU2hpZnRDZWxscygpO1xuICB0aGlzLnNldEdhbGxlcnlTaXplKCk7XG4gIC8vIHVwZGF0ZSBzZWxlY3RlZEluZGV4XG4gIC8vIHRyeSB0byBtYWludGFpbiBwb3NpdGlvbiAmIHNlbGVjdCBwcmV2aW91cyBzZWxlY3RlZCBlbGVtZW50XG4gIHZhciBjZWxsID0gdGhpcy5nZXRDZWxsKCBwcmV2U2VsZWN0ZWRFbGVtICk7XG4gIGlmICggY2VsbCApIHtcbiAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSB0aGlzLmdldENlbGxTbGlkZUluZGV4KCBjZWxsICk7XG4gIH1cbiAgdGhpcy5zZWxlY3RlZEluZGV4ID0gTWF0aC5taW4oIHRoaXMuc2xpZGVzLmxlbmd0aCAtIDEsIHRoaXMuc2VsZWN0ZWRJbmRleCApO1xuXG4gIHRoaXMuZW1pdEV2ZW50KCAnY2VsbENoYW5nZScsIFsgY2hhbmdlZENlbGxJbmRleCBdICk7XG4gIC8vIHBvc2l0aW9uIHNsaWRlclxuICB0aGlzLnNlbGVjdCggdGhpcy5zZWxlY3RlZEluZGV4ICk7XG4gIC8vIGRvIG5vdCBwb3NpdGlvbiBzbGlkZXIgYWZ0ZXIgbGF6eSBsb2FkXG4gIGlmICggaXNQb3NpdGlvbmluZ1NsaWRlciApIHtcbiAgICB0aGlzLnBvc2l0aW9uU2xpZGVyQXRTZWxlY3RlZCgpO1xuICB9XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxucmV0dXJuIEZsaWNraXR5O1xuXG59ICkgKTtcbiIsIi8vIGFuaW1hdGVcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnLFxuICAgIF0sIGZ1bmN0aW9uKCB1dGlscyApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIHV0aWxzICk7XG4gICAgfSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgICB3aW5kb3csXG4gICAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LkZsaWNraXR5ID0gd2luZG93LkZsaWNraXR5IHx8IHt9O1xuICAgIHdpbmRvdy5GbGlja2l0eS5hbmltYXRlUHJvdG90eXBlID0gZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICB3aW5kb3cuZml6enlVSVV0aWxzXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgdXRpbHMgKSB7XG5cbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYW5pbWF0ZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG52YXIgcHJvdG8gPSB7fTtcblxucHJvdG8uc3RhcnRBbmltYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLmlzQW5pbWF0aW5nICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuaXNBbmltYXRpbmcgPSB0cnVlO1xuICB0aGlzLnJlc3RpbmdGcmFtZXMgPSAwO1xuICB0aGlzLmFuaW1hdGUoKTtcbn07XG5cbnByb3RvLmFuaW1hdGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5hcHBseURyYWdGb3JjZSgpO1xuICB0aGlzLmFwcGx5U2VsZWN0ZWRBdHRyYWN0aW9uKCk7XG5cbiAgdmFyIHByZXZpb3VzWCA9IHRoaXMueDtcblxuICB0aGlzLmludGVncmF0ZVBoeXNpY3MoKTtcbiAgdGhpcy5wb3NpdGlvblNsaWRlcigpO1xuICB0aGlzLnNldHRsZSggcHJldmlvdXNYICk7XG4gIC8vIGFuaW1hdGUgbmV4dCBmcmFtZVxuICBpZiAoIHRoaXMuaXNBbmltYXRpbmcgKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIGZ1bmN0aW9uIGFuaW1hdGVGcmFtZSgpIHtcbiAgICAgIF90aGlzLmFuaW1hdGUoKTtcbiAgICB9ICk7XG4gIH1cbn07XG5cbnByb3RvLnBvc2l0aW9uU2xpZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciB4ID0gdGhpcy54O1xuICAvLyB3cmFwIHBvc2l0aW9uIGFyb3VuZFxuICBpZiAoIHRoaXMub3B0aW9ucy53cmFwQXJvdW5kICYmIHRoaXMuY2VsbHMubGVuZ3RoID4gMSApIHtcbiAgICB4ID0gdXRpbHMubW9kdWxvKCB4LCB0aGlzLnNsaWRlYWJsZVdpZHRoICk7XG4gICAgeCAtPSB0aGlzLnNsaWRlYWJsZVdpZHRoO1xuICAgIHRoaXMuc2hpZnRXcmFwQ2VsbHMoIHggKTtcbiAgfVxuXG4gIHRoaXMuc2V0VHJhbnNsYXRlWCggeCwgdGhpcy5pc0FuaW1hdGluZyApO1xuICB0aGlzLmRpc3BhdGNoU2Nyb2xsRXZlbnQoKTtcbn07XG5cbnByb3RvLnNldFRyYW5zbGF0ZVggPSBmdW5jdGlvbiggeCwgaXMzZCApIHtcbiAgeCArPSB0aGlzLmN1cnNvclBvc2l0aW9uO1xuICAvLyByZXZlcnNlIGlmIHJpZ2h0LXRvLWxlZnQgYW5kIHVzaW5nIHRyYW5zZm9ybVxuICB4ID0gdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ID8gLXggOiB4O1xuICB2YXIgdHJhbnNsYXRlWCA9IHRoaXMuZ2V0UG9zaXRpb25WYWx1ZSggeCApO1xuICAvLyB1c2UgM0QgdHJhbnNmb3JtcyBmb3IgaGFyZHdhcmUgYWNjZWxlcmF0aW9uIG9uIGlPU1xuICAvLyBidXQgdXNlIDJEIHdoZW4gc2V0dGxlZCwgZm9yIGJldHRlciBmb250LXJlbmRlcmluZ1xuICB0aGlzLnNsaWRlci5zdHlsZS50cmFuc2Zvcm0gPSBpczNkID9cbiAgICAndHJhbnNsYXRlM2QoJyArIHRyYW5zbGF0ZVggKyAnLDAsMCknIDogJ3RyYW5zbGF0ZVgoJyArIHRyYW5zbGF0ZVggKyAnKSc7XG59O1xuXG5wcm90by5kaXNwYXRjaFNjcm9sbEV2ZW50ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBmaXJzdFNsaWRlID0gdGhpcy5zbGlkZXNbMF07XG4gIGlmICggIWZpcnN0U2xpZGUgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBwb3NpdGlvblggPSAtdGhpcy54IC0gZmlyc3RTbGlkZS50YXJnZXQ7XG4gIHZhciBwcm9ncmVzcyA9IHBvc2l0aW9uWCAvIHRoaXMuc2xpZGVzV2lkdGg7XG4gIHRoaXMuZGlzcGF0Y2hFdmVudCggJ3Njcm9sbCcsIG51bGwsIFsgcHJvZ3Jlc3MsIHBvc2l0aW9uWCBdICk7XG59O1xuXG5wcm90by5wb3NpdGlvblNsaWRlckF0U2VsZWN0ZWQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5jZWxscy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMueCA9IC10aGlzLnNlbGVjdGVkU2xpZGUudGFyZ2V0O1xuICB0aGlzLnZlbG9jaXR5ID0gMDsgLy8gc3RvcCB3b2JibGVcbiAgdGhpcy5wb3NpdGlvblNsaWRlcigpO1xufTtcblxucHJvdG8uZ2V0UG9zaXRpb25WYWx1ZSA9IGZ1bmN0aW9uKCBwb3NpdGlvbiApIHtcbiAgaWYgKCB0aGlzLm9wdGlvbnMucGVyY2VudFBvc2l0aW9uICkge1xuICAgIC8vIHBlcmNlbnQgcG9zaXRpb24sIHJvdW5kIHRvIDIgZGlnaXRzLCBsaWtlIDEyLjM0JVxuICAgIHJldHVybiAoIE1hdGgucm91bmQoICggcG9zaXRpb24gLyB0aGlzLnNpemUuaW5uZXJXaWR0aCApICogMTAwMDAgKSAqIDAuMDEgKSArICclJztcbiAgfSBlbHNlIHtcbiAgICAvLyBwaXhlbCBwb3NpdGlvbmluZ1xuICAgIHJldHVybiBNYXRoLnJvdW5kKCBwb3NpdGlvbiApICsgJ3B4JztcbiAgfVxufTtcblxucHJvdG8uc2V0dGxlID0gZnVuY3Rpb24oIHByZXZpb3VzWCApIHtcbiAgLy8ga2VlcCB0cmFjayBvZiBmcmFtZXMgd2hlcmUgeCBoYXNuJ3QgbW92ZWRcbiAgdmFyIGlzUmVzdGluZyA9ICF0aGlzLmlzUG9pbnRlckRvd24gJiZcbiAgICAgIE1hdGgucm91bmQoIHRoaXMueCAqIDEwMCApID09IE1hdGgucm91bmQoIHByZXZpb3VzWCAqIDEwMCApO1xuICBpZiAoIGlzUmVzdGluZyApIHtcbiAgICB0aGlzLnJlc3RpbmdGcmFtZXMrKztcbiAgfVxuICAvLyBzdG9wIGFuaW1hdGluZyBpZiByZXN0aW5nIGZvciAzIG9yIG1vcmUgZnJhbWVzXG4gIGlmICggdGhpcy5yZXN0aW5nRnJhbWVzID4gMiApIHtcbiAgICB0aGlzLmlzQW5pbWF0aW5nID0gZmFsc2U7XG4gICAgZGVsZXRlIHRoaXMuaXNGcmVlU2Nyb2xsaW5nO1xuICAgIC8vIHJlbmRlciBwb3NpdGlvbiB3aXRoIHRyYW5zbGF0ZVggd2hlbiBzZXR0bGVkXG4gICAgdGhpcy5wb3NpdGlvblNsaWRlcigpO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudCggJ3NldHRsZScsIG51bGwsIFsgdGhpcy5zZWxlY3RlZEluZGV4IF0gKTtcbiAgfVxufTtcblxucHJvdG8uc2hpZnRXcmFwQ2VsbHMgPSBmdW5jdGlvbiggeCApIHtcbiAgLy8gc2hpZnQgYmVmb3JlIGNlbGxzXG4gIHZhciBiZWZvcmVHYXAgPSB0aGlzLmN1cnNvclBvc2l0aW9uICsgeDtcbiAgdGhpcy5fc2hpZnRDZWxscyggdGhpcy5iZWZvcmVTaGlmdENlbGxzLCBiZWZvcmVHYXAsIC0xICk7XG4gIC8vIHNoaWZ0IGFmdGVyIGNlbGxzXG4gIHZhciBhZnRlckdhcCA9IHRoaXMuc2l6ZS5pbm5lcldpZHRoIC0gKCB4ICsgdGhpcy5zbGlkZWFibGVXaWR0aCArIHRoaXMuY3Vyc29yUG9zaXRpb24gKTtcbiAgdGhpcy5fc2hpZnRDZWxscyggdGhpcy5hZnRlclNoaWZ0Q2VsbHMsIGFmdGVyR2FwLCAxICk7XG59O1xuXG5wcm90by5fc2hpZnRDZWxscyA9IGZ1bmN0aW9uKCBjZWxscywgZ2FwLCBzaGlmdCApIHtcbiAgZm9yICggdmFyIGkgPSAwOyBpIDwgY2VsbHMubGVuZ3RoOyBpKysgKSB7XG4gICAgdmFyIGNlbGwgPSBjZWxsc1tpXTtcbiAgICB2YXIgY2VsbFNoaWZ0ID0gZ2FwID4gMCA/IHNoaWZ0IDogMDtcbiAgICBjZWxsLndyYXBTaGlmdCggY2VsbFNoaWZ0ICk7XG4gICAgZ2FwIC09IGNlbGwuc2l6ZS5vdXRlcldpZHRoO1xuICB9XG59O1xuXG5wcm90by5fdW5zaGlmdENlbGxzID0gZnVuY3Rpb24oIGNlbGxzICkge1xuICBpZiAoICFjZWxscyB8fCAhY2VsbHMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBjZWxscy5sZW5ndGg7IGkrKyApIHtcbiAgICBjZWxsc1tpXS53cmFwU2hpZnQoIDAgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gcGh5c2ljcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5wcm90by5pbnRlZ3JhdGVQaHlzaWNzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMueCArPSB0aGlzLnZlbG9jaXR5O1xuICB0aGlzLnZlbG9jaXR5ICo9IHRoaXMuZ2V0RnJpY3Rpb25GYWN0b3IoKTtcbn07XG5cbnByb3RvLmFwcGx5Rm9yY2UgPSBmdW5jdGlvbiggZm9yY2UgKSB7XG4gIHRoaXMudmVsb2NpdHkgKz0gZm9yY2U7XG59O1xuXG5wcm90by5nZXRGcmljdGlvbkZhY3RvciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gMSAtIHRoaXMub3B0aW9uc1sgdGhpcy5pc0ZyZWVTY3JvbGxpbmcgPyAnZnJlZVNjcm9sbEZyaWN0aW9uJyA6ICdmcmljdGlvbicgXTtcbn07XG5cbnByb3RvLmdldFJlc3RpbmdQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAvLyBteSB0aGFua3MgdG8gU3RldmVuIFdpdHRlbnMsIHdobyBzaW1wbGlmaWVkIHRoaXMgbWF0aCBncmVhdGx5XG4gIHJldHVybiB0aGlzLnggKyB0aGlzLnZlbG9jaXR5IC8gKCAxIC0gdGhpcy5nZXRGcmljdGlvbkZhY3RvcigpICk7XG59O1xuXG5wcm90by5hcHBseURyYWdGb3JjZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmlzRHJhZ2dhYmxlIHx8ICF0aGlzLmlzUG9pbnRlckRvd24gKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGNoYW5nZSB0aGUgcG9zaXRpb24gdG8gZHJhZyBwb3NpdGlvbiBieSBhcHBseWluZyBmb3JjZVxuICB2YXIgZHJhZ1ZlbG9jaXR5ID0gdGhpcy5kcmFnWCAtIHRoaXMueDtcbiAgdmFyIGRyYWdGb3JjZSA9IGRyYWdWZWxvY2l0eSAtIHRoaXMudmVsb2NpdHk7XG4gIHRoaXMuYXBwbHlGb3JjZSggZHJhZ0ZvcmNlICk7XG59O1xuXG5wcm90by5hcHBseVNlbGVjdGVkQXR0cmFjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAvLyBkbyBub3QgYXR0cmFjdCBpZiBwb2ludGVyIGRvd24gb3Igbm8gc2xpZGVzXG4gIHZhciBkcmFnRG93biA9IHRoaXMuaXNEcmFnZ2FibGUgJiYgdGhpcy5pc1BvaW50ZXJEb3duO1xuICBpZiAoIGRyYWdEb3duIHx8IHRoaXMuaXNGcmVlU2Nyb2xsaW5nIHx8ICF0aGlzLnNsaWRlcy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBkaXN0YW5jZSA9IHRoaXMuc2VsZWN0ZWRTbGlkZS50YXJnZXQgKiAtMSAtIHRoaXMueDtcbiAgdmFyIGZvcmNlID0gZGlzdGFuY2UgKiB0aGlzLm9wdGlvbnMuc2VsZWN0ZWRBdHRyYWN0aW9uO1xuICB0aGlzLmFwcGx5Rm9yY2UoIGZvcmNlICk7XG59O1xuXG5yZXR1cm4gcHJvdG87XG5cbn0gKSApO1xuIiwiLy8gRmxpY2tpdHkuQ2VsbFxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZScsXG4gICAgXSwgZnVuY3Rpb24oIGdldFNpemUgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBnZXRTaXplICk7XG4gICAgfSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgICB3aW5kb3csXG4gICAgICAgIHJlcXVpcmUoJ2dldC1zaXplJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LkZsaWNraXR5ID0gd2luZG93LkZsaWNraXR5IHx8IHt9O1xuICAgIHdpbmRvdy5GbGlja2l0eS5DZWxsID0gZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICB3aW5kb3cuZ2V0U2l6ZVxuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIGdldFNpemUgKSB7XG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gQ2VsbCggZWxlbSwgcGFyZW50ICkge1xuICB0aGlzLmVsZW1lbnQgPSBlbGVtO1xuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcblxuICB0aGlzLmNyZWF0ZSgpO1xufVxuXG52YXIgcHJvdG8gPSBDZWxsLnByb3RvdHlwZTtcblxucHJvdG8uY3JlYXRlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoICdhcmlhLWhpZGRlbicsICd0cnVlJyApO1xuICB0aGlzLnggPSAwO1xuICB0aGlzLnNoaWZ0ID0gMDtcbiAgdGhpcy5lbGVtZW50LnN0eWxlWyB0aGlzLnBhcmVudC5vcmlnaW5TaWRlIF0gPSAwO1xufTtcblxucHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAvLyByZXNldCBzdHlsZVxuICB0aGlzLnVuc2VsZWN0KCk7XG4gIHRoaXMuZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICcnO1xuICB2YXIgc2lkZSA9IHRoaXMucGFyZW50Lm9yaWdpblNpZGU7XG4gIHRoaXMuZWxlbWVudC5zdHlsZVsgc2lkZSBdID0gJyc7XG4gIHRoaXMuZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSAnJztcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbn07XG5cbnByb3RvLmdldFNpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zaXplID0gZ2V0U2l6ZSggdGhpcy5lbGVtZW50ICk7XG59O1xuXG5wcm90by5zZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCB4ICkge1xuICB0aGlzLnggPSB4O1xuICB0aGlzLnVwZGF0ZVRhcmdldCgpO1xuICB0aGlzLnJlbmRlclBvc2l0aW9uKCB4ICk7XG59O1xuXG4vLyBzZXREZWZhdWx0VGFyZ2V0IHYxIG1ldGhvZCwgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIHJlbW92ZSBpbiB2M1xucHJvdG8udXBkYXRlVGFyZ2V0ID0gcHJvdG8uc2V0RGVmYXVsdFRhcmdldCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbWFyZ2luUHJvcGVydHkgPSB0aGlzLnBhcmVudC5vcmlnaW5TaWRlID09ICdsZWZ0JyA/ICdtYXJnaW5MZWZ0JyA6ICdtYXJnaW5SaWdodCc7XG4gIHRoaXMudGFyZ2V0ID0gdGhpcy54ICsgdGhpcy5zaXplWyBtYXJnaW5Qcm9wZXJ0eSBdICtcbiAgICB0aGlzLnNpemUud2lkdGggKiB0aGlzLnBhcmVudC5jZWxsQWxpZ247XG59O1xuXG5wcm90by5yZW5kZXJQb3NpdGlvbiA9IGZ1bmN0aW9uKCB4ICkge1xuICAvLyByZW5kZXIgcG9zaXRpb24gb2YgY2VsbCB3aXRoIGluIHNsaWRlclxuICB2YXIgc2lkZU9mZnNldCA9IHRoaXMucGFyZW50Lm9yaWdpblNpZGUgPT09ICdsZWZ0JyA/IDEgOiAtMTtcblxuICB2YXIgYWRqdXN0ZWRYID0gdGhpcy5wYXJlbnQub3B0aW9ucy5wZXJjZW50UG9zaXRpb24gP1xuICAgIHggKiBzaWRlT2Zmc2V0ICogKCB0aGlzLnBhcmVudC5zaXplLmlubmVyV2lkdGggLyB0aGlzLnNpemUud2lkdGggKSA6XG4gICAgeCAqIHNpZGVPZmZzZXQ7XG5cbiAgdGhpcy5lbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVYKCcgK1xuICAgIHRoaXMucGFyZW50LmdldFBvc2l0aW9uVmFsdWUoIGFkanVzdGVkWCApICsgJyknO1xufTtcblxucHJvdG8uc2VsZWN0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1zZWxlY3RlZCcpO1xuICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xufTtcblxucHJvdG8udW5zZWxlY3QgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXNlbGVjdGVkJyk7XG4gIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoICdhcmlhLWhpZGRlbicsICd0cnVlJyApO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0ludGVnZXJ9IHNoaWZ0IC0gMCwgMSwgb3IgLTFcbiAqL1xucHJvdG8ud3JhcFNoaWZ0ID0gZnVuY3Rpb24oIHNoaWZ0ICkge1xuICB0aGlzLnNoaWZ0ID0gc2hpZnQ7XG4gIHRoaXMucmVuZGVyUG9zaXRpb24oIHRoaXMueCArIHRoaXMucGFyZW50LnNsaWRlYWJsZVdpZHRoICogc2hpZnQgKTtcbn07XG5cbnByb3RvLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGhpcy5lbGVtZW50ICk7XG59O1xuXG5yZXR1cm4gQ2VsbDtcblxufSApICk7XG4iLCIvLyBkcmFnXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgJy4vZmxpY2tpdHknLFxuICAgICAgJ3VuaWRyYWdnZXIvdW5pZHJhZ2dlcicsXG4gICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnLFxuICAgIF0sIGZ1bmN0aW9uKCBGbGlja2l0eSwgVW5pZHJhZ2dlciwgdXRpbHMgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBGbGlja2l0eSwgVW5pZHJhZ2dlciwgdXRpbHMgKTtcbiAgICB9ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgcmVxdWlyZSgnLi9mbGlja2l0eScpLFxuICAgICAgICByZXF1aXJlKCd1bmlkcmFnZ2VyJyksXG4gICAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LkZsaWNraXR5ID0gZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICB3aW5kb3cuRmxpY2tpdHksXG4gICAgICAgIHdpbmRvdy5VbmlkcmFnZ2VyLFxuICAgICAgICB3aW5kb3cuZml6enlVSVV0aWxzXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRmxpY2tpdHksIFVuaWRyYWdnZXIsIHV0aWxzICkge1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIC0tLS0tIGRlZmF1bHRzIC0tLS0tIC8vXG5cbnV0aWxzLmV4dGVuZCggRmxpY2tpdHkuZGVmYXVsdHMsIHtcbiAgZHJhZ2dhYmxlOiAnPjEnLFxuICBkcmFnVGhyZXNob2xkOiAzLFxufSApO1xuXG4vLyAtLS0tLSBjcmVhdGUgLS0tLS0gLy9cblxuRmxpY2tpdHkuY3JlYXRlTWV0aG9kcy5wdXNoKCdfY3JlYXRlRHJhZycpO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBkcmFnIHByb3RvdHlwZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG52YXIgcHJvdG8gPSBGbGlja2l0eS5wcm90b3R5cGU7XG51dGlscy5leHRlbmQoIHByb3RvLCBVbmlkcmFnZ2VyLnByb3RvdHlwZSApO1xucHJvdG8uX3RvdWNoQWN0aW9uVmFsdWUgPSAncGFuLXknO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxucHJvdG8uX2NyZWF0ZURyYWcgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5vbiggJ2FjdGl2YXRlJywgdGhpcy5vbkFjdGl2YXRlRHJhZyApO1xuICB0aGlzLm9uKCAndWlDaGFuZ2UnLCB0aGlzLl91aUNoYW5nZURyYWcgKTtcbiAgdGhpcy5vbiggJ2RlYWN0aXZhdGUnLCB0aGlzLm9uRGVhY3RpdmF0ZURyYWcgKTtcbiAgdGhpcy5vbiggJ2NlbGxDaGFuZ2UnLCB0aGlzLnVwZGF0ZURyYWdnYWJsZSApO1xuICAvLyBUT0RPIHVwZGF0ZURyYWdnYWJsZSBvbiByZXNpemU/IGlmIGdyb3VwQ2VsbHMgJiBzbGlkZXMgY2hhbmdlXG59O1xuXG5wcm90by5vbkFjdGl2YXRlRHJhZyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmhhbmRsZXMgPSBbIHRoaXMudmlld3BvcnQgXTtcbiAgdGhpcy5iaW5kSGFuZGxlcygpO1xuICB0aGlzLnVwZGF0ZURyYWdnYWJsZSgpO1xufTtcblxucHJvdG8ub25EZWFjdGl2YXRlRHJhZyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnVuYmluZEhhbmRsZXMoKTtcbiAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWRyYWdnYWJsZScpO1xufTtcblxucHJvdG8udXBkYXRlRHJhZ2dhYmxlID0gZnVuY3Rpb24oKSB7XG4gIC8vIGRpc2FibGUgZHJhZ2dpbmcgaWYgbGVzcyB0aGFuIDIgc2xpZGVzLiAjMjc4XG4gIGlmICggdGhpcy5vcHRpb25zLmRyYWdnYWJsZSA9PSAnPjEnICkge1xuICAgIHRoaXMuaXNEcmFnZ2FibGUgPSB0aGlzLnNsaWRlcy5sZW5ndGggPiAxO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaXNEcmFnZ2FibGUgPSB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlO1xuICB9XG4gIGlmICggdGhpcy5pc0RyYWdnYWJsZSApIHtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtZHJhZ2dhYmxlJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWRyYWdnYWJsZScpO1xuICB9XG59O1xuXG4vLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxucHJvdG8uYmluZERyYWcgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5vcHRpb25zLmRyYWdnYWJsZSA9IHRydWU7XG4gIHRoaXMudXBkYXRlRHJhZ2dhYmxlKCk7XG59O1xuXG5wcm90by51bmJpbmREcmFnID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMub3B0aW9ucy5kcmFnZ2FibGUgPSBmYWxzZTtcbiAgdGhpcy51cGRhdGVEcmFnZ2FibGUoKTtcbn07XG5cbnByb3RvLl91aUNoYW5nZURyYWcgPSBmdW5jdGlvbigpIHtcbiAgZGVsZXRlIHRoaXMuaXNGcmVlU2Nyb2xsaW5nO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gcG9pbnRlciBldmVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxucHJvdG8ucG9pbnRlckRvd24gPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIGlmICggIXRoaXMuaXNEcmFnZ2FibGUgKSB7XG4gICAgdGhpcy5fcG9pbnRlckRvd25EZWZhdWx0KCBldmVudCwgcG9pbnRlciApO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgaXNPa2F5ID0gdGhpcy5va2F5UG9pbnRlckRvd24oIGV2ZW50ICk7XG4gIGlmICggIWlzT2theSApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLl9wb2ludGVyRG93blByZXZlbnREZWZhdWx0KCBldmVudCApO1xuICB0aGlzLnBvaW50ZXJEb3duRm9jdXMoIGV2ZW50ICk7XG4gIC8vIGJsdXJcbiAgaWYgKCBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9IHRoaXMuZWxlbWVudCApIHtcbiAgICAvLyBkbyBub3QgYmx1ciBpZiBhbHJlYWR5IGZvY3VzZWRcbiAgICB0aGlzLnBvaW50ZXJEb3duQmx1cigpO1xuICB9XG5cbiAgLy8gc3RvcCBpZiBpdCB3YXMgbW92aW5nXG4gIHRoaXMuZHJhZ1ggPSB0aGlzLng7XG4gIHRoaXMudmlld3BvcnQuY2xhc3NMaXN0LmFkZCgnaXMtcG9pbnRlci1kb3duJyk7XG4gIC8vIHRyYWNrIHNjcm9sbGluZ1xuICB0aGlzLnBvaW50ZXJEb3duU2Nyb2xsID0gZ2V0U2Nyb2xsUG9zaXRpb24oKTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdzY3JvbGwnLCB0aGlzICk7XG5cbiAgdGhpcy5fcG9pbnRlckRvd25EZWZhdWx0KCBldmVudCwgcG9pbnRlciApO1xufTtcblxuLy8gZGVmYXVsdCBwb2ludGVyRG93biBsb2dpYywgdXNlZCBmb3Igc3RhdGljQ2xpY2tcbnByb3RvLl9wb2ludGVyRG93bkRlZmF1bHQgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIC8vIHRyYWNrIHN0YXJ0IGV2ZW50IHBvc2l0aW9uXG4gIC8vIFNhZmFyaSA5IG92ZXJyaWRlcyBwYWdlWCBhbmQgcGFnZVkuIFRoZXNlIHZhbHVlcyBuZWVkcyB0byBiZSBjb3BpZWQuICM3NzlcbiAgdGhpcy5wb2ludGVyRG93blBvaW50ZXIgPSB7XG4gICAgcGFnZVg6IHBvaW50ZXIucGFnZVgsXG4gICAgcGFnZVk6IHBvaW50ZXIucGFnZVksXG4gIH07XG4gIC8vIGJpbmQgbW92ZSBhbmQgZW5kIGV2ZW50c1xuICB0aGlzLl9iaW5kUG9zdFN0YXJ0RXZlbnRzKCBldmVudCApO1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoICdwb2ludGVyRG93bicsIGV2ZW50LCBbIHBvaW50ZXIgXSApO1xufTtcblxudmFyIGZvY3VzTm9kZXMgPSB7XG4gIElOUFVUOiB0cnVlLFxuICBURVhUQVJFQTogdHJ1ZSxcbiAgU0VMRUNUOiB0cnVlLFxufTtcblxucHJvdG8ucG9pbnRlckRvd25Gb2N1cyA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIGlzRm9jdXNOb2RlID0gZm9jdXNOb2Rlc1sgZXZlbnQudGFyZ2V0Lm5vZGVOYW1lIF07XG4gIGlmICggIWlzRm9jdXNOb2RlICkge1xuICAgIHRoaXMuZm9jdXMoKTtcbiAgfVxufTtcblxucHJvdG8uX3BvaW50ZXJEb3duUHJldmVudERlZmF1bHQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHZhciBpc1RvdWNoU3RhcnQgPSBldmVudC50eXBlID09ICd0b3VjaHN0YXJ0JztcbiAgdmFyIGlzVG91Y2hQb2ludGVyID0gZXZlbnQucG9pbnRlclR5cGUgPT0gJ3RvdWNoJztcbiAgdmFyIGlzRm9jdXNOb2RlID0gZm9jdXNOb2Rlc1sgZXZlbnQudGFyZ2V0Lm5vZGVOYW1lIF07XG4gIGlmICggIWlzVG91Y2hTdGFydCAmJiAhaXNUb3VjaFBvaW50ZXIgJiYgIWlzRm9jdXNOb2RlICkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIG1vdmUgLS0tLS0gLy9cblxucHJvdG8uaGFzRHJhZ1N0YXJ0ZWQgPSBmdW5jdGlvbiggbW92ZVZlY3RvciApIHtcbiAgcmV0dXJuIE1hdGguYWJzKCBtb3ZlVmVjdG9yLnggKSA+IHRoaXMub3B0aW9ucy5kcmFnVGhyZXNob2xkO1xufTtcblxuLy8gLS0tLS0gdXAgLS0tLS0gLy9cblxucHJvdG8ucG9pbnRlclVwID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICBkZWxldGUgdGhpcy5pc1RvdWNoU2Nyb2xsaW5nO1xuICB0aGlzLnZpZXdwb3J0LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXBvaW50ZXItZG93bicpO1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoICdwb2ludGVyVXAnLCBldmVudCwgWyBwb2ludGVyIF0gKTtcbiAgdGhpcy5fZHJhZ1BvaW50ZXJVcCggZXZlbnQsIHBvaW50ZXIgKTtcbn07XG5cbnByb3RvLnBvaW50ZXJEb25lID0gZnVuY3Rpb24oKSB7XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAnc2Nyb2xsJywgdGhpcyApO1xuICBkZWxldGUgdGhpcy5wb2ludGVyRG93blNjcm9sbDtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGRyYWdnaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnByb3RvLmRyYWdTdGFydCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgaWYgKCAhdGhpcy5pc0RyYWdnYWJsZSApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5kcmFnU3RhcnRQb3NpdGlvbiA9IHRoaXMueDtcbiAgdGhpcy5zdGFydEFuaW1hdGlvbigpO1xuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3Njcm9sbCcsIHRoaXMgKTtcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnZHJhZ1N0YXJ0JywgZXZlbnQsIFsgcG9pbnRlciBdICk7XG59O1xuXG5wcm90by5wb2ludGVyTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdmFyIG1vdmVWZWN0b3IgPSB0aGlzLl9kcmFnUG9pbnRlck1vdmUoIGV2ZW50LCBwb2ludGVyICk7XG4gIHRoaXMuZGlzcGF0Y2hFdmVudCggJ3BvaW50ZXJNb3ZlJywgZXZlbnQsIFsgcG9pbnRlciwgbW92ZVZlY3RvciBdICk7XG4gIHRoaXMuX2RyYWdNb3ZlKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApO1xufTtcblxucHJvdG8uZHJhZ01vdmUgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgKSB7XG4gIGlmICggIXRoaXMuaXNEcmFnZ2FibGUgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgdGhpcy5wcmV2aW91c0RyYWdYID0gdGhpcy5kcmFnWDtcbiAgLy8gcmV2ZXJzZSBpZiByaWdodC10by1sZWZ0XG4gIHZhciBkaXJlY3Rpb24gPSB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQgPyAtMSA6IDE7XG4gIGlmICggdGhpcy5vcHRpb25zLndyYXBBcm91bmQgKSB7XG4gICAgLy8gd3JhcCBhcm91bmQgbW92ZS4gIzU4OVxuICAgIG1vdmVWZWN0b3IueCAlPSB0aGlzLnNsaWRlYWJsZVdpZHRoO1xuICB9XG4gIHZhciBkcmFnWCA9IHRoaXMuZHJhZ1N0YXJ0UG9zaXRpb24gKyBtb3ZlVmVjdG9yLnggKiBkaXJlY3Rpb247XG5cbiAgaWYgKCAhdGhpcy5vcHRpb25zLndyYXBBcm91bmQgJiYgdGhpcy5zbGlkZXMubGVuZ3RoICkge1xuICAgIC8vIHNsb3cgZHJhZ1xuICAgIHZhciBvcmlnaW5Cb3VuZCA9IE1hdGgubWF4KCAtdGhpcy5zbGlkZXNbMF0udGFyZ2V0LCB0aGlzLmRyYWdTdGFydFBvc2l0aW9uICk7XG4gICAgZHJhZ1ggPSBkcmFnWCA+IG9yaWdpbkJvdW5kID8gKCBkcmFnWCArIG9yaWdpbkJvdW5kICkgKiAwLjUgOiBkcmFnWDtcbiAgICB2YXIgZW5kQm91bmQgPSBNYXRoLm1pbiggLXRoaXMuZ2V0TGFzdFNsaWRlKCkudGFyZ2V0LCB0aGlzLmRyYWdTdGFydFBvc2l0aW9uICk7XG4gICAgZHJhZ1ggPSBkcmFnWCA8IGVuZEJvdW5kID8gKCBkcmFnWCArIGVuZEJvdW5kICkgKiAwLjUgOiBkcmFnWDtcbiAgfVxuXG4gIHRoaXMuZHJhZ1ggPSBkcmFnWDtcblxuICB0aGlzLmRyYWdNb3ZlVGltZSA9IG5ldyBEYXRlKCk7XG4gIHRoaXMuZGlzcGF0Y2hFdmVudCggJ2RyYWdNb3ZlJywgZXZlbnQsIFsgcG9pbnRlciwgbW92ZVZlY3RvciBdICk7XG59O1xuXG5wcm90by5kcmFnRW5kID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICBpZiAoICF0aGlzLmlzRHJhZ2dhYmxlICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIHRoaXMub3B0aW9ucy5mcmVlU2Nyb2xsICkge1xuICAgIHRoaXMuaXNGcmVlU2Nyb2xsaW5nID0gdHJ1ZTtcbiAgfVxuICAvLyBzZXQgc2VsZWN0ZWRJbmRleCBiYXNlZCBvbiB3aGVyZSBmbGljayB3aWxsIGVuZCB1cFxuICB2YXIgaW5kZXggPSB0aGlzLmRyYWdFbmRSZXN0aW5nU2VsZWN0KCk7XG5cbiAgaWYgKCB0aGlzLm9wdGlvbnMuZnJlZVNjcm9sbCAmJiAhdGhpcy5vcHRpb25zLndyYXBBcm91bmQgKSB7XG4gICAgLy8gaWYgZnJlZS1zY3JvbGwgJiBub3Qgd3JhcCBhcm91bmRcbiAgICAvLyBkbyBub3QgZnJlZS1zY3JvbGwgaWYgZ29pbmcgb3V0c2lkZSBvZiBib3VuZGluZyBzbGlkZXNcbiAgICAvLyBzbyBib3VuZGluZyBzbGlkZXMgY2FuIGF0dHJhY3Qgc2xpZGVyLCBhbmQga2VlcCBpdCBpbiBib3VuZHNcbiAgICB2YXIgcmVzdGluZ1ggPSB0aGlzLmdldFJlc3RpbmdQb3NpdGlvbigpO1xuICAgIHRoaXMuaXNGcmVlU2Nyb2xsaW5nID0gLXJlc3RpbmdYID4gdGhpcy5zbGlkZXNbMF0udGFyZ2V0ICYmXG4gICAgICAtcmVzdGluZ1ggPCB0aGlzLmdldExhc3RTbGlkZSgpLnRhcmdldDtcbiAgfSBlbHNlIGlmICggIXRoaXMub3B0aW9ucy5mcmVlU2Nyb2xsICYmIGluZGV4ID09IHRoaXMuc2VsZWN0ZWRJbmRleCApIHtcbiAgICAvLyBib29zdCBzZWxlY3Rpb24gaWYgc2VsZWN0ZWQgaW5kZXggaGFzIG5vdCBjaGFuZ2VkXG4gICAgaW5kZXggKz0gdGhpcy5kcmFnRW5kQm9vc3RTZWxlY3QoKTtcbiAgfVxuICBkZWxldGUgdGhpcy5wcmV2aW91c0RyYWdYO1xuICAvLyBhcHBseSBzZWxlY3Rpb25cbiAgLy8gVE9ETyByZWZhY3RvciB0aGlzLCBzZWxlY3RpbmcgaGVyZSBmZWVscyB3ZWlyZFxuICAvLyBIQUNLLCBzZXQgZmxhZyBzbyBkcmFnZ2luZyBzdGF5cyBpbiBjb3JyZWN0IGRpcmVjdGlvblxuICB0aGlzLmlzRHJhZ1NlbGVjdCA9IHRoaXMub3B0aW9ucy53cmFwQXJvdW5kO1xuICB0aGlzLnNlbGVjdCggaW5kZXggKTtcbiAgZGVsZXRlIHRoaXMuaXNEcmFnU2VsZWN0O1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoICdkcmFnRW5kJywgZXZlbnQsIFsgcG9pbnRlciBdICk7XG59O1xuXG5wcm90by5kcmFnRW5kUmVzdGluZ1NlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmVzdGluZ1ggPSB0aGlzLmdldFJlc3RpbmdQb3NpdGlvbigpO1xuICAvLyBob3cgZmFyIGF3YXkgZnJvbSBzZWxlY3RlZCBzbGlkZVxuICB2YXIgZGlzdGFuY2UgPSBNYXRoLmFicyggdGhpcy5nZXRTbGlkZURpc3RhbmNlKCAtcmVzdGluZ1gsIHRoaXMuc2VsZWN0ZWRJbmRleCApICk7XG4gIC8vIGdldCBjbG9zZXQgcmVzdGluZyBnb2luZyB1cCBhbmQgZ29pbmcgZG93blxuICB2YXIgcG9zaXRpdmVSZXN0aW5nID0gdGhpcy5fZ2V0Q2xvc2VzdFJlc3RpbmcoIHJlc3RpbmdYLCBkaXN0YW5jZSwgMSApO1xuICB2YXIgbmVnYXRpdmVSZXN0aW5nID0gdGhpcy5fZ2V0Q2xvc2VzdFJlc3RpbmcoIHJlc3RpbmdYLCBkaXN0YW5jZSwgLTEgKTtcbiAgLy8gdXNlIGNsb3NlciByZXN0aW5nIGZvciB3cmFwLWFyb3VuZFxuICB2YXIgaW5kZXggPSBwb3NpdGl2ZVJlc3RpbmcuZGlzdGFuY2UgPCBuZWdhdGl2ZVJlc3RpbmcuZGlzdGFuY2UgP1xuICAgIHBvc2l0aXZlUmVzdGluZy5pbmRleCA6IG5lZ2F0aXZlUmVzdGluZy5pbmRleDtcbiAgcmV0dXJuIGluZGV4O1xufTtcblxuLyoqXG4gKiBnaXZlbiByZXN0aW5nIFggYW5kIGRpc3RhbmNlIHRvIHNlbGVjdGVkIGNlbGxcbiAqIGdldCB0aGUgZGlzdGFuY2UgYW5kIGluZGV4IG9mIHRoZSBjbG9zZXN0IGNlbGxcbiAqIEBwYXJhbSB7TnVtYmVyfSByZXN0aW5nWCAtIGVzdGltYXRlZCBwb3N0LWZsaWNrIHJlc3RpbmcgcG9zaXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSBkaXN0YW5jZSAtIGRpc3RhbmNlIHRvIHNlbGVjdGVkIGNlbGxcbiAqIEBwYXJhbSB7SW50ZWdlcn0gaW5jcmVtZW50IC0gKzEgb3IgLTEsIGdvaW5nIHVwIG9yIGRvd25cbiAqIEByZXR1cm5zIHtPYmplY3R9IC0geyBkaXN0YW5jZToge051bWJlcn0sIGluZGV4OiB7SW50ZWdlcn0gfVxuICovXG5wcm90by5fZ2V0Q2xvc2VzdFJlc3RpbmcgPSBmdW5jdGlvbiggcmVzdGluZ1gsIGRpc3RhbmNlLCBpbmNyZW1lbnQgKSB7XG4gIHZhciBpbmRleCA9IHRoaXMuc2VsZWN0ZWRJbmRleDtcbiAgdmFyIG1pbkRpc3RhbmNlID0gSW5maW5pdHk7XG4gIHZhciBjb25kaXRpb24gPSB0aGlzLm9wdGlvbnMuY29udGFpbiAmJiAhdGhpcy5vcHRpb25zLndyYXBBcm91bmQgP1xuICAgIC8vIGlmIGNvbnRhaW4sIGtlZXAgZ29pbmcgaWYgZGlzdGFuY2UgaXMgZXF1YWwgdG8gbWluRGlzdGFuY2VcbiAgICBmdW5jdGlvbiggZGlzdCwgbWluRGlzdCApIHtcbiAgICAgIHJldHVybiBkaXN0IDw9IG1pbkRpc3Q7XG4gICAgfSA6IGZ1bmN0aW9uKCBkaXN0LCBtaW5EaXN0ICkge1xuICAgICAgcmV0dXJuIGRpc3QgPCBtaW5EaXN0O1xuICAgIH07XG4gIHdoaWxlICggY29uZGl0aW9uKCBkaXN0YW5jZSwgbWluRGlzdGFuY2UgKSApIHtcbiAgICAvLyBtZWFzdXJlIGRpc3RhbmNlIHRvIG5leHQgY2VsbFxuICAgIGluZGV4ICs9IGluY3JlbWVudDtcbiAgICBtaW5EaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgIGRpc3RhbmNlID0gdGhpcy5nZXRTbGlkZURpc3RhbmNlKCAtcmVzdGluZ1gsIGluZGV4ICk7XG4gICAgaWYgKCBkaXN0YW5jZSA9PT0gbnVsbCApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBkaXN0YW5jZSA9IE1hdGguYWJzKCBkaXN0YW5jZSApO1xuICB9XG4gIHJldHVybiB7XG4gICAgZGlzdGFuY2U6IG1pbkRpc3RhbmNlLFxuICAgIC8vIHNlbGVjdGVkIHdhcyBwcmV2aW91cyBpbmRleFxuICAgIGluZGV4OiBpbmRleCAtIGluY3JlbWVudCxcbiAgfTtcbn07XG5cbi8qKlxuICogbWVhc3VyZSBkaXN0YW5jZSBiZXR3ZWVuIHggYW5kIGEgc2xpZGUgdGFyZ2V0XG4gKiBAcGFyYW0ge051bWJlcn0geCAtIGhvcml6b250YWwgcG9zaXRpb25cbiAqIEBwYXJhbSB7SW50ZWdlcn0gaW5kZXggLSBzbGlkZSBpbmRleFxuICogQHJldHVybnMge051bWJlcn0gLSBzbGlkZSBkaXN0YW5jZVxuICovXG5wcm90by5nZXRTbGlkZURpc3RhbmNlID0gZnVuY3Rpb24oIHgsIGluZGV4ICkge1xuICB2YXIgbGVuID0gdGhpcy5zbGlkZXMubGVuZ3RoO1xuICAvLyB3cmFwIGFyb3VuZCBpZiBhdCBsZWFzdCAyIHNsaWRlc1xuICB2YXIgaXNXcmFwQXJvdW5kID0gdGhpcy5vcHRpb25zLndyYXBBcm91bmQgJiYgbGVuID4gMTtcbiAgdmFyIHNsaWRlSW5kZXggPSBpc1dyYXBBcm91bmQgPyB1dGlscy5tb2R1bG8oIGluZGV4LCBsZW4gKSA6IGluZGV4O1xuICB2YXIgc2xpZGUgPSB0aGlzLnNsaWRlc1sgc2xpZGVJbmRleCBdO1xuICBpZiAoICFzbGlkZSApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvLyBhZGQgZGlzdGFuY2UgZm9yIHdyYXAtYXJvdW5kIHNsaWRlc1xuICB2YXIgd3JhcCA9IGlzV3JhcEFyb3VuZCA/IHRoaXMuc2xpZGVhYmxlV2lkdGggKiBNYXRoLmZsb29yKCBpbmRleC9sZW4gKSA6IDA7XG4gIHJldHVybiB4IC0gKCBzbGlkZS50YXJnZXQgKyB3cmFwICk7XG59O1xuXG5wcm90by5kcmFnRW5kQm9vc3RTZWxlY3QgPSBmdW5jdGlvbigpIHtcbiAgLy8gZG8gbm90IGJvb3N0IGlmIG5vIHByZXZpb3VzRHJhZ1ggb3IgZHJhZ01vdmVUaW1lXG4gIGlmICggdGhpcy5wcmV2aW91c0RyYWdYID09PSB1bmRlZmluZWQgfHwgIXRoaXMuZHJhZ01vdmVUaW1lIHx8XG4gICAgLy8gb3IgaWYgZHJhZyB3YXMgaGVsZCBmb3IgMTAwIG1zXG4gICAgbmV3IERhdGUoKSAtIHRoaXMuZHJhZ01vdmVUaW1lID4gMTAwICkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgdmFyIGRpc3RhbmNlID0gdGhpcy5nZXRTbGlkZURpc3RhbmNlKCAtdGhpcy5kcmFnWCwgdGhpcy5zZWxlY3RlZEluZGV4ICk7XG4gIHZhciBkZWx0YSA9IHRoaXMucHJldmlvdXNEcmFnWCAtIHRoaXMuZHJhZ1g7XG4gIGlmICggZGlzdGFuY2UgPiAwICYmIGRlbHRhID4gMCApIHtcbiAgICAvLyBib29zdCB0byBuZXh0IGlmIG1vdmluZyB0b3dhcmRzIHRoZSByaWdodCwgYW5kIHBvc2l0aXZlIHZlbG9jaXR5XG4gICAgcmV0dXJuIDE7XG4gIH0gZWxzZSBpZiAoIGRpc3RhbmNlIDwgMCAmJiBkZWx0YSA8IDAgKSB7XG4gICAgLy8gYm9vc3QgdG8gcHJldmlvdXMgaWYgbW92aW5nIHRvd2FyZHMgdGhlIGxlZnQsIGFuZCBuZWdhdGl2ZSB2ZWxvY2l0eVxuICAgIHJldHVybiAtMTtcbiAgfVxuICByZXR1cm4gMDtcbn07XG5cbi8vIC0tLS0tIHN0YXRpY0NsaWNrIC0tLS0tIC8vXG5cbnByb3RvLnN0YXRpY0NsaWNrID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICAvLyBnZXQgY2xpY2tlZENlbGwsIGlmIGNlbGwgd2FzIGNsaWNrZWRcbiAgdmFyIGNsaWNrZWRDZWxsID0gdGhpcy5nZXRQYXJlbnRDZWxsKCBldmVudC50YXJnZXQgKTtcbiAgdmFyIGNlbGxFbGVtID0gY2xpY2tlZENlbGwgJiYgY2xpY2tlZENlbGwuZWxlbWVudDtcbiAgdmFyIGNlbGxJbmRleCA9IGNsaWNrZWRDZWxsICYmIHRoaXMuY2VsbHMuaW5kZXhPZiggY2xpY2tlZENlbGwgKTtcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnc3RhdGljQ2xpY2snLCBldmVudCwgWyBwb2ludGVyLCBjZWxsRWxlbSwgY2VsbEluZGV4IF0gKTtcbn07XG5cbi8vIC0tLS0tIHNjcm9sbCAtLS0tLSAvL1xuXG5wcm90by5vbnNjcm9sbCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2Nyb2xsID0gZ2V0U2Nyb2xsUG9zaXRpb24oKTtcbiAgdmFyIHNjcm9sbE1vdmVYID0gdGhpcy5wb2ludGVyRG93blNjcm9sbC54IC0gc2Nyb2xsLng7XG4gIHZhciBzY3JvbGxNb3ZlWSA9IHRoaXMucG9pbnRlckRvd25TY3JvbGwueSAtIHNjcm9sbC55O1xuICAvLyBjYW5jZWwgY2xpY2svdGFwIGlmIHNjcm9sbCBpcyB0b28gbXVjaFxuICBpZiAoIE1hdGguYWJzKCBzY3JvbGxNb3ZlWCApID4gMyB8fCBNYXRoLmFicyggc2Nyb2xsTW92ZVkgKSA+IDMgKSB7XG4gICAgdGhpcy5fcG9pbnRlckRvbmUoKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gdXRpbHMgLS0tLS0gLy9cblxuZnVuY3Rpb24gZ2V0U2Nyb2xsUG9zaXRpb24oKSB7XG4gIHJldHVybiB7XG4gICAgeDogd2luZG93LnBhZ2VYT2Zmc2V0LFxuICAgIHk6IHdpbmRvdy5wYWdlWU9mZnNldCxcbiAgfTtcbn1cblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbnJldHVybiBGbGlja2l0eTtcblxufSApICk7XG4iLCIvLyBGbGlja2l0eSBtYWluXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtcGFyYW1zICovXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgJ2V2LWVtaXR0ZXIvZXYtZW1pdHRlcicsXG4gICAgICAnZ2V0LXNpemUvZ2V0LXNpemUnLFxuICAgICAgJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJyxcbiAgICAgICcuL2NlbGwnLFxuICAgICAgJy4vc2xpZGUnLFxuICAgICAgJy4vYW5pbWF0ZScsXG4gICAgXSwgZnVuY3Rpb24oIEV2RW1pdHRlciwgZ2V0U2l6ZSwgdXRpbHMsIENlbGwsIFNsaWRlLCBhbmltYXRlUHJvdG90eXBlICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgRXZFbWl0dGVyLCBnZXRTaXplLCB1dGlscywgQ2VsbCwgU2xpZGUsIGFuaW1hdGVQcm90b3R5cGUgKTtcbiAgICB9ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgcmVxdWlyZSgnZXYtZW1pdHRlcicpLFxuICAgICAgICByZXF1aXJlKCdnZXQtc2l6ZScpLFxuICAgICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpLFxuICAgICAgICByZXF1aXJlKCcuL2NlbGwnKSxcbiAgICAgICAgcmVxdWlyZSgnLi9zbGlkZScpLFxuICAgICAgICByZXF1aXJlKCcuL2FuaW1hdGUnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB2YXIgX0ZsaWNraXR5ID0gd2luZG93LkZsaWNraXR5O1xuXG4gICAgd2luZG93LkZsaWNraXR5ID0gZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICB3aW5kb3cuRXZFbWl0dGVyLFxuICAgICAgICB3aW5kb3cuZ2V0U2l6ZSxcbiAgICAgICAgd2luZG93LmZpenp5VUlVdGlscyxcbiAgICAgICAgX0ZsaWNraXR5LkNlbGwsXG4gICAgICAgIF9GbGlja2l0eS5TbGlkZSxcbiAgICAgICAgX0ZsaWNraXR5LmFuaW1hdGVQcm90b3R5cGVcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBFdkVtaXR0ZXIsIGdldFNpemUsXG4gICAgdXRpbHMsIENlbGwsIFNsaWRlLCBhbmltYXRlUHJvdG90eXBlICkge1xuXG4vKiBlc2xpbnQtZW5hYmxlIG1heC1wYXJhbXMgKi9cbid1c2Ugc3RyaWN0JztcblxuLy8gdmFyc1xudmFyIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7XG52YXIgZ2V0Q29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlO1xudmFyIGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcblxuZnVuY3Rpb24gbW92ZUVsZW1lbnRzKCBlbGVtcywgdG9FbGVtICkge1xuICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcbiAgd2hpbGUgKCBlbGVtcy5sZW5ndGggKSB7XG4gICAgdG9FbGVtLmFwcGVuZENoaWxkKCBlbGVtcy5zaGlmdCgpICk7XG4gIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRmxpY2tpdHkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZ2xvYmFsbHkgdW5pcXVlIGlkZW50aWZpZXJzXG52YXIgR1VJRCA9IDA7XG4vLyBpbnRlcm5hbCBzdG9yZSBvZiBhbGwgRmxpY2tpdHkgaW50YW5jZXNcbnZhciBpbnN0YW5jZXMgPSB7fTtcblxuZnVuY3Rpb24gRmxpY2tpdHkoIGVsZW1lbnQsIG9wdGlvbnMgKSB7XG4gIHZhciBxdWVyeUVsZW1lbnQgPSB1dGlscy5nZXRRdWVyeUVsZW1lbnQoIGVsZW1lbnQgKTtcbiAgaWYgKCAhcXVlcnlFbGVtZW50ICkge1xuICAgIGlmICggY29uc29sZSApIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoICdCYWQgZWxlbWVudCBmb3IgRmxpY2tpdHk6ICcgKyAoIHF1ZXJ5RWxlbWVudCB8fCBlbGVtZW50ICkgKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuZWxlbWVudCA9IHF1ZXJ5RWxlbWVudDtcbiAgLy8gZG8gbm90IGluaXRpYWxpemUgdHdpY2Ugb24gc2FtZSBlbGVtZW50XG4gIGlmICggdGhpcy5lbGVtZW50LmZsaWNraXR5R1VJRCApIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBpbnN0YW5jZXNbIHRoaXMuZWxlbWVudC5mbGlja2l0eUdVSUQgXTtcbiAgICBpZiAoIGluc3RhbmNlICkgaW5zdGFuY2Uub3B0aW9uKCBvcHRpb25zICk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9XG5cbiAgLy8gYWRkIGpRdWVyeVxuICBpZiAoIGpRdWVyeSApIHtcbiAgICB0aGlzLiRlbGVtZW50ID0galF1ZXJ5KCB0aGlzLmVsZW1lbnQgKTtcbiAgfVxuICAvLyBvcHRpb25zXG4gIHRoaXMub3B0aW9ucyA9IHV0aWxzLmV4dGVuZCgge30sIHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdHMgKTtcbiAgdGhpcy5vcHRpb24oIG9wdGlvbnMgKTtcblxuICAvLyBraWNrIHRoaW5ncyBvZmZcbiAgdGhpcy5fY3JlYXRlKCk7XG59XG5cbkZsaWNraXR5LmRlZmF1bHRzID0ge1xuICBhY2Nlc3NpYmlsaXR5OiB0cnVlLFxuICAvLyBhZGFwdGl2ZUhlaWdodDogZmFsc2UsXG4gIGNlbGxBbGlnbjogJ2NlbnRlcicsXG4gIC8vIGNlbGxTZWxlY3RvcjogdW5kZWZpbmVkLFxuICAvLyBjb250YWluOiBmYWxzZSxcbiAgZnJlZVNjcm9sbEZyaWN0aW9uOiAwLjA3NSwgLy8gZnJpY3Rpb24gd2hlbiBmcmVlLXNjcm9sbGluZ1xuICBmcmljdGlvbjogMC4yOCwgLy8gZnJpY3Rpb24gd2hlbiBzZWxlY3RpbmdcbiAgbmFtZXNwYWNlSlF1ZXJ5RXZlbnRzOiB0cnVlLFxuICAvLyBpbml0aWFsSW5kZXg6IDAsXG4gIHBlcmNlbnRQb3NpdGlvbjogdHJ1ZSxcbiAgcmVzaXplOiB0cnVlLFxuICBzZWxlY3RlZEF0dHJhY3Rpb246IDAuMDI1LFxuICBzZXRHYWxsZXJ5U2l6ZTogdHJ1ZSxcbiAgLy8gd2F0Y2hDU1M6IGZhbHNlLFxuICAvLyB3cmFwQXJvdW5kOiBmYWxzZVxufTtcblxuLy8gaGFzaCBvZiBtZXRob2RzIHRyaWdnZXJlZCBvbiBfY3JlYXRlKClcbkZsaWNraXR5LmNyZWF0ZU1ldGhvZHMgPSBbXTtcblxudmFyIHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xuLy8gaW5oZXJpdCBFdmVudEVtaXR0ZXJcbnV0aWxzLmV4dGVuZCggcHJvdG8sIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxucHJvdG8uX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBhZGQgaWQgZm9yIEZsaWNraXR5LmRhdGFcbiAgdmFyIGlkID0gdGhpcy5ndWlkID0gKytHVUlEO1xuICB0aGlzLmVsZW1lbnQuZmxpY2tpdHlHVUlEID0gaWQ7IC8vIGV4cGFuZG9cbiAgaW5zdGFuY2VzWyBpZCBdID0gdGhpczsgLy8gYXNzb2NpYXRlIHZpYSBpZFxuICAvLyBpbml0aWFsIHByb3BlcnRpZXNcbiAgdGhpcy5zZWxlY3RlZEluZGV4ID0gMDtcbiAgLy8gaG93IG1hbnkgZnJhbWVzIHNsaWRlciBoYXMgYmVlbiBpbiBzYW1lIHBvc2l0aW9uXG4gIHRoaXMucmVzdGluZ0ZyYW1lcyA9IDA7XG4gIC8vIGluaXRpYWwgcGh5c2ljcyBwcm9wZXJ0aWVzXG4gIHRoaXMueCA9IDA7XG4gIHRoaXMudmVsb2NpdHkgPSAwO1xuICB0aGlzLm9yaWdpblNpZGUgPSB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAvLyBjcmVhdGUgdmlld3BvcnQgJiBzbGlkZXJcbiAgdGhpcy52aWV3cG9ydCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB0aGlzLnZpZXdwb3J0LmNsYXNzTmFtZSA9ICdmbGlja2l0eS12aWV3cG9ydCc7XG4gIHRoaXMuX2NyZWF0ZVNsaWRlcigpO1xuXG4gIGlmICggdGhpcy5vcHRpb25zLnJlc2l6ZSB8fCB0aGlzLm9wdGlvbnMud2F0Y2hDU1MgKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdyZXNpemUnLCB0aGlzICk7XG4gIH1cblxuICAvLyBhZGQgbGlzdGVuZXJzIGZyb20gb24gb3B0aW9uXG4gIGZvciAoIHZhciBldmVudE5hbWUgaW4gdGhpcy5vcHRpb25zLm9uICkge1xuICAgIHZhciBsaXN0ZW5lciA9IHRoaXMub3B0aW9ucy5vblsgZXZlbnROYW1lIF07XG4gICAgdGhpcy5vbiggZXZlbnROYW1lLCBsaXN0ZW5lciApO1xuICB9XG5cbiAgRmxpY2tpdHkuY3JlYXRlTWV0aG9kcy5mb3JFYWNoKCBmdW5jdGlvbiggbWV0aG9kICkge1xuICAgIHRoaXNbIG1ldGhvZCBdKCk7XG4gIH0sIHRoaXMgKTtcblxuICBpZiAoIHRoaXMub3B0aW9ucy53YXRjaENTUyApIHtcbiAgICB0aGlzLndhdGNoQ1NTKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5hY3RpdmF0ZSgpO1xuICB9XG5cbn07XG5cbi8qKlxuICogc2V0IG9wdGlvbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0byBleHRlbmRcbiAqL1xucHJvdG8ub3B0aW9uID0gZnVuY3Rpb24oIG9wdHMgKSB7XG4gIHV0aWxzLmV4dGVuZCggdGhpcy5vcHRpb25zLCBvcHRzICk7XG59O1xuXG5wcm90by5hY3RpdmF0ZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMuaXNBY3RpdmUgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xuICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZmxpY2tpdHktZW5hYmxlZCcpO1xuICBpZiAoIHRoaXMub3B0aW9ucy5yaWdodFRvTGVmdCApIHtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZmxpY2tpdHktcnRsJyk7XG4gIH1cblxuICB0aGlzLmdldFNpemUoKTtcbiAgLy8gbW92ZSBpbml0aWFsIGNlbGwgZWxlbWVudHMgc28gdGhleSBjYW4gYmUgbG9hZGVkIGFzIGNlbGxzXG4gIHZhciBjZWxsRWxlbXMgPSB0aGlzLl9maWx0ZXJGaW5kQ2VsbEVsZW1lbnRzKCB0aGlzLmVsZW1lbnQuY2hpbGRyZW4gKTtcbiAgbW92ZUVsZW1lbnRzKCBjZWxsRWxlbXMsIHRoaXMuc2xpZGVyICk7XG4gIHRoaXMudmlld3BvcnQuYXBwZW5kQ2hpbGQoIHRoaXMuc2xpZGVyICk7XG4gIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCggdGhpcy52aWV3cG9ydCApO1xuICAvLyBnZXQgY2VsbHMgZnJvbSBjaGlsZHJlblxuICB0aGlzLnJlbG9hZENlbGxzKCk7XG5cbiAgaWYgKCB0aGlzLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSApIHtcbiAgICAvLyBhbGxvdyBlbGVtZW50IHRvIGZvY3VzYWJsZVxuICAgIHRoaXMuZWxlbWVudC50YWJJbmRleCA9IDA7XG4gICAgLy8gbGlzdGVuIGZvciBrZXkgcHJlc3Nlc1xuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIHRoaXMgKTtcbiAgfVxuXG4gIHRoaXMuZW1pdEV2ZW50KCdhY3RpdmF0ZScpO1xuICB0aGlzLnNlbGVjdEluaXRpYWxJbmRleCgpO1xuICAvLyBmbGFnIGZvciBpbml0aWFsIGFjdGl2YXRpb24sIGZvciB1c2luZyBpbml0aWFsSW5kZXhcbiAgdGhpcy5pc0luaXRBY3RpdmF0ZWQgPSB0cnVlO1xuICAvLyByZWFkeSBldmVudC4gIzQ5M1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoJ3JlYWR5Jyk7XG59O1xuXG4vLyBzbGlkZXIgcG9zaXRpb25zIHRoZSBjZWxsc1xucHJvdG8uX2NyZWF0ZVNsaWRlciA9IGZ1bmN0aW9uKCkge1xuICAvLyBzbGlkZXIgZWxlbWVudCBkb2VzIGFsbCB0aGUgcG9zaXRpb25pbmdcbiAgdmFyIHNsaWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBzbGlkZXIuY2xhc3NOYW1lID0gJ2ZsaWNraXR5LXNsaWRlcic7XG4gIHNsaWRlci5zdHlsZVsgdGhpcy5vcmlnaW5TaWRlIF0gPSAwO1xuICB0aGlzLnNsaWRlciA9IHNsaWRlcjtcbn07XG5cbnByb3RvLl9maWx0ZXJGaW5kQ2VsbEVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICByZXR1cm4gdXRpbHMuZmlsdGVyRmluZEVsZW1lbnRzKCBlbGVtcywgdGhpcy5vcHRpb25zLmNlbGxTZWxlY3RvciApO1xufTtcblxuLy8gZ29lcyB0aHJvdWdoIGFsbCBjaGlsZHJlblxucHJvdG8ucmVsb2FkQ2VsbHMgPSBmdW5jdGlvbigpIHtcbiAgLy8gY29sbGVjdGlvbiBvZiBpdGVtIGVsZW1lbnRzXG4gIHRoaXMuY2VsbHMgPSB0aGlzLl9tYWtlQ2VsbHMoIHRoaXMuc2xpZGVyLmNoaWxkcmVuICk7XG4gIHRoaXMucG9zaXRpb25DZWxscygpO1xuICB0aGlzLl9nZXRXcmFwU2hpZnRDZWxscygpO1xuICB0aGlzLnNldEdhbGxlcnlTaXplKCk7XG59O1xuXG4vKipcbiAqIHR1cm4gZWxlbWVudHMgaW50byBGbGlja2l0eS5DZWxsc1xuICogQHBhcmFtIHtbQXJyYXksIE5vZGVMaXN0LCBIVE1MRWxlbWVudF19IGVsZW1zIC0gZWxlbWVudHMgdG8gbWFrZSBpbnRvIGNlbGxzXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zIC0gY29sbGVjdGlvbiBvZiBuZXcgRmxpY2tpdHkgQ2VsbHNcbiAqL1xucHJvdG8uX21ha2VDZWxscyA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgdmFyIGNlbGxFbGVtcyA9IHRoaXMuX2ZpbHRlckZpbmRDZWxsRWxlbWVudHMoIGVsZW1zICk7XG5cbiAgLy8gY3JlYXRlIG5ldyBGbGlja2l0eSBmb3IgY29sbGVjdGlvblxuICB2YXIgY2VsbHMgPSBjZWxsRWxlbXMubWFwKCBmdW5jdGlvbiggY2VsbEVsZW0gKSB7XG4gICAgcmV0dXJuIG5ldyBDZWxsKCBjZWxsRWxlbSwgdGhpcyApO1xuICB9LCB0aGlzICk7XG5cbiAgcmV0dXJuIGNlbGxzO1xufTtcblxucHJvdG8uZ2V0TGFzdENlbGwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY2VsbHNbIHRoaXMuY2VsbHMubGVuZ3RoIC0gMSBdO1xufTtcblxucHJvdG8uZ2V0TGFzdFNsaWRlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNsaWRlc1sgdGhpcy5zbGlkZXMubGVuZ3RoIC0gMSBdO1xufTtcblxuLy8gcG9zaXRpb25zIGFsbCBjZWxsc1xucHJvdG8ucG9zaXRpb25DZWxscyA9IGZ1bmN0aW9uKCkge1xuICAvLyBzaXplIGFsbCBjZWxsc1xuICB0aGlzLl9zaXplQ2VsbHMoIHRoaXMuY2VsbHMgKTtcbiAgLy8gcG9zaXRpb24gYWxsIGNlbGxzXG4gIHRoaXMuX3Bvc2l0aW9uQ2VsbHMoIDAgKTtcbn07XG5cbi8qKlxuICogcG9zaXRpb24gY2VydGFpbiBjZWxsc1xuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmRleCAtIHdoaWNoIGNlbGwgdG8gc3RhcnQgd2l0aFxuICovXG5wcm90by5fcG9zaXRpb25DZWxscyA9IGZ1bmN0aW9uKCBpbmRleCApIHtcbiAgaW5kZXggPSBpbmRleCB8fCAwO1xuICAvLyBhbHNvIG1lYXN1cmUgbWF4Q2VsbEhlaWdodFxuICAvLyBzdGFydCAwIGlmIHBvc2l0aW9uaW5nIGFsbCBjZWxsc1xuICB0aGlzLm1heENlbGxIZWlnaHQgPSBpbmRleCA/IHRoaXMubWF4Q2VsbEhlaWdodCB8fCAwIDogMDtcbiAgdmFyIGNlbGxYID0gMDtcbiAgLy8gZ2V0IGNlbGxYXG4gIGlmICggaW5kZXggPiAwICkge1xuICAgIHZhciBzdGFydENlbGwgPSB0aGlzLmNlbGxzWyBpbmRleCAtIDEgXTtcbiAgICBjZWxsWCA9IHN0YXJ0Q2VsbC54ICsgc3RhcnRDZWxsLnNpemUub3V0ZXJXaWR0aDtcbiAgfVxuICB2YXIgbGVuID0gdGhpcy5jZWxscy5sZW5ndGg7XG4gIGZvciAoIHZhciBpID0gaW5kZXg7IGkgPCBsZW47IGkrKyApIHtcbiAgICB2YXIgY2VsbCA9IHRoaXMuY2VsbHNbaV07XG4gICAgY2VsbC5zZXRQb3NpdGlvbiggY2VsbFggKTtcbiAgICBjZWxsWCArPSBjZWxsLnNpemUub3V0ZXJXaWR0aDtcbiAgICB0aGlzLm1heENlbGxIZWlnaHQgPSBNYXRoLm1heCggY2VsbC5zaXplLm91dGVySGVpZ2h0LCB0aGlzLm1heENlbGxIZWlnaHQgKTtcbiAgfVxuICAvLyBrZWVwIHRyYWNrIG9mIGNlbGxYIGZvciB3cmFwLWFyb3VuZFxuICB0aGlzLnNsaWRlYWJsZVdpZHRoID0gY2VsbFg7XG4gIC8vIHNsaWRlc1xuICB0aGlzLnVwZGF0ZVNsaWRlcygpO1xuICAvLyBjb250YWluIHNsaWRlcyB0YXJnZXRcbiAgdGhpcy5fY29udGFpblNsaWRlcygpO1xuICAvLyB1cGRhdGUgc2xpZGVzV2lkdGhcbiAgdGhpcy5zbGlkZXNXaWR0aCA9IGxlbiA/IHRoaXMuZ2V0TGFzdFNsaWRlKCkudGFyZ2V0IC0gdGhpcy5zbGlkZXNbMF0udGFyZ2V0IDogMDtcbn07XG5cbi8qKlxuICogY2VsbC5nZXRTaXplKCkgb24gbXVsdGlwbGUgY2VsbHNcbiAqIEBwYXJhbSB7QXJyYXl9IGNlbGxzIC0gY2VsbHMgdG8gc2l6ZVxuICovXG5wcm90by5fc2l6ZUNlbGxzID0gZnVuY3Rpb24oIGNlbGxzICkge1xuICBjZWxscy5mb3JFYWNoKCBmdW5jdGlvbiggY2VsbCApIHtcbiAgICBjZWxsLmdldFNpemUoKTtcbiAgfSApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnByb3RvLnVwZGF0ZVNsaWRlcyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNsaWRlcyA9IFtdO1xuICBpZiAoICF0aGlzLmNlbGxzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2xpZGUgPSBuZXcgU2xpZGUoIHRoaXMgKTtcbiAgdGhpcy5zbGlkZXMucHVzaCggc2xpZGUgKTtcbiAgdmFyIGlzT3JpZ2luTGVmdCA9IHRoaXMub3JpZ2luU2lkZSA9PSAnbGVmdCc7XG4gIHZhciBuZXh0TWFyZ2luID0gaXNPcmlnaW5MZWZ0ID8gJ21hcmdpblJpZ2h0JyA6ICdtYXJnaW5MZWZ0JztcblxuICB2YXIgY2FuQ2VsbEZpdCA9IHRoaXMuX2dldENhbkNlbGxGaXQoKTtcblxuICB0aGlzLmNlbGxzLmZvckVhY2goIGZ1bmN0aW9uKCBjZWxsLCBpICkge1xuICAgIC8vIGp1c3QgYWRkIGNlbGwgaWYgZmlyc3QgY2VsbCBpbiBzbGlkZVxuICAgIGlmICggIXNsaWRlLmNlbGxzLmxlbmd0aCApIHtcbiAgICAgIHNsaWRlLmFkZENlbGwoIGNlbGwgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc2xpZGVXaWR0aCA9ICggc2xpZGUub3V0ZXJXaWR0aCAtIHNsaWRlLmZpcnN0TWFyZ2luICkgK1xuICAgICAgKCBjZWxsLnNpemUub3V0ZXJXaWR0aCAtIGNlbGwuc2l6ZVsgbmV4dE1hcmdpbiBdICk7XG5cbiAgICBpZiAoIGNhbkNlbGxGaXQuY2FsbCggdGhpcywgaSwgc2xpZGVXaWR0aCApICkge1xuICAgICAgc2xpZGUuYWRkQ2VsbCggY2VsbCApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBkb2Vzbid0IGZpdCwgbmV3IHNsaWRlXG4gICAgICBzbGlkZS51cGRhdGVUYXJnZXQoKTtcblxuICAgICAgc2xpZGUgPSBuZXcgU2xpZGUoIHRoaXMgKTtcbiAgICAgIHRoaXMuc2xpZGVzLnB1c2goIHNsaWRlICk7XG4gICAgICBzbGlkZS5hZGRDZWxsKCBjZWxsICk7XG4gICAgfVxuICB9LCB0aGlzICk7XG4gIC8vIGxhc3Qgc2xpZGVcbiAgc2xpZGUudXBkYXRlVGFyZ2V0KCk7XG4gIC8vIHVwZGF0ZSAuc2VsZWN0ZWRTbGlkZVxuICB0aGlzLnVwZGF0ZVNlbGVjdGVkU2xpZGUoKTtcbn07XG5cbnByb3RvLl9nZXRDYW5DZWxsRml0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBncm91cENlbGxzID0gdGhpcy5vcHRpb25zLmdyb3VwQ2VsbHM7XG4gIGlmICggIWdyb3VwQ2VsbHMgKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBncm91cENlbGxzID09ICdudW1iZXInICkge1xuICAgIC8vIGdyb3VwIGJ5IG51bWJlci4gMyAtPiBbMCwxLDJdLCBbMyw0LDVdLCAuLi5cbiAgICB2YXIgbnVtYmVyID0gcGFyc2VJbnQoIGdyb3VwQ2VsbHMsIDEwICk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCBpICkge1xuICAgICAgcmV0dXJuICggaSAlIG51bWJlciApICE9PSAwO1xuICAgIH07XG4gIH1cbiAgLy8gZGVmYXVsdCwgZ3JvdXAgYnkgd2lkdGggb2Ygc2xpZGVcbiAgLy8gcGFyc2UgJzc1JVxuICB2YXIgcGVyY2VudE1hdGNoID0gdHlwZW9mIGdyb3VwQ2VsbHMgPT0gJ3N0cmluZycgJiZcbiAgICBncm91cENlbGxzLm1hdGNoKCAvXihcXGQrKSUkLyApO1xuICB2YXIgcGVyY2VudCA9IHBlcmNlbnRNYXRjaCA/IHBhcnNlSW50KCBwZXJjZW50TWF0Y2hbMV0sIDEwICkgLyAxMDAgOiAxO1xuICByZXR1cm4gZnVuY3Rpb24oIGksIHNsaWRlV2lkdGggKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWludmFsaWQtdGhpcyAqL1xuICAgIHJldHVybiBzbGlkZVdpZHRoIDw9ICggdGhpcy5zaXplLmlubmVyV2lkdGggKyAxICkgKiBwZXJjZW50O1xuICB9O1xufTtcblxuLy8gYWxpYXMgX2luaXQgZm9yIGpRdWVyeSBwbHVnaW4gLmZsaWNraXR5KClcbnByb3RvLl9pbml0ID1cbnByb3RvLnJlcG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wb3NpdGlvbkNlbGxzKCk7XG4gIHRoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCk7XG59O1xuXG5wcm90by5nZXRTaXplID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2l6ZSA9IGdldFNpemUoIHRoaXMuZWxlbWVudCApO1xuICB0aGlzLnNldENlbGxBbGlnbigpO1xuICB0aGlzLmN1cnNvclBvc2l0aW9uID0gdGhpcy5zaXplLmlubmVyV2lkdGggKiB0aGlzLmNlbGxBbGlnbjtcbn07XG5cbnZhciBjZWxsQWxpZ25TaG9ydGhhbmRzID0ge1xuICAvLyBjZWxsIGFsaWduLCB0aGVuIGJhc2VkIG9uIG9yaWdpbiBzaWRlXG4gIGNlbnRlcjoge1xuICAgIGxlZnQ6IDAuNSxcbiAgICByaWdodDogMC41LFxuICB9LFxuICBsZWZ0OiB7XG4gICAgbGVmdDogMCxcbiAgICByaWdodDogMSxcbiAgfSxcbiAgcmlnaHQ6IHtcbiAgICByaWdodDogMCxcbiAgICBsZWZ0OiAxLFxuICB9LFxufTtcblxucHJvdG8uc2V0Q2VsbEFsaWduID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzaG9ydGhhbmQgPSBjZWxsQWxpZ25TaG9ydGhhbmRzWyB0aGlzLm9wdGlvbnMuY2VsbEFsaWduIF07XG4gIHRoaXMuY2VsbEFsaWduID0gc2hvcnRoYW5kID8gc2hvcnRoYW5kWyB0aGlzLm9yaWdpblNpZGUgXSA6IHRoaXMub3B0aW9ucy5jZWxsQWxpZ247XG59O1xuXG5wcm90by5zZXRHYWxsZXJ5U2l6ZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMub3B0aW9ucy5zZXRHYWxsZXJ5U2l6ZSApIHtcbiAgICB2YXIgaGVpZ2h0ID0gdGhpcy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ICYmIHRoaXMuc2VsZWN0ZWRTbGlkZSA/XG4gICAgICB0aGlzLnNlbGVjdGVkU2xpZGUuaGVpZ2h0IDogdGhpcy5tYXhDZWxsSGVpZ2h0O1xuICAgIHRoaXMudmlld3BvcnQuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcbiAgfVxufTtcblxucHJvdG8uX2dldFdyYXBTaGlmdENlbGxzID0gZnVuY3Rpb24oKSB7XG4gIC8vIG9ubHkgZm9yIHdyYXAtYXJvdW5kXG4gIGlmICggIXRoaXMub3B0aW9ucy53cmFwQXJvdW5kICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyB1bnNoaWZ0IHByZXZpb3VzIGNlbGxzXG4gIHRoaXMuX3Vuc2hpZnRDZWxscyggdGhpcy5iZWZvcmVTaGlmdENlbGxzICk7XG4gIHRoaXMuX3Vuc2hpZnRDZWxscyggdGhpcy5hZnRlclNoaWZ0Q2VsbHMgKTtcbiAgLy8gZ2V0IGJlZm9yZSBjZWxsc1xuICAvLyBpbml0aWFsIGdhcFxuICB2YXIgZ2FwWCA9IHRoaXMuY3Vyc29yUG9zaXRpb247XG4gIHZhciBjZWxsSW5kZXggPSB0aGlzLmNlbGxzLmxlbmd0aCAtIDE7XG4gIHRoaXMuYmVmb3JlU2hpZnRDZWxscyA9IHRoaXMuX2dldEdhcENlbGxzKCBnYXBYLCBjZWxsSW5kZXgsIC0xICk7XG4gIC8vIGdldCBhZnRlciBjZWxsc1xuICAvLyBlbmRpbmcgZ2FwIGJldHdlZW4gbGFzdCBjZWxsIGFuZCBlbmQgb2YgZ2FsbGVyeSB2aWV3cG9ydFxuICBnYXBYID0gdGhpcy5zaXplLmlubmVyV2lkdGggLSB0aGlzLmN1cnNvclBvc2l0aW9uO1xuICAvLyBzdGFydCBjbG9uaW5nIGF0IGZpcnN0IGNlbGwsIHdvcmtpbmcgZm9yd2FyZHNcbiAgdGhpcy5hZnRlclNoaWZ0Q2VsbHMgPSB0aGlzLl9nZXRHYXBDZWxscyggZ2FwWCwgMCwgMSApO1xufTtcblxucHJvdG8uX2dldEdhcENlbGxzID0gZnVuY3Rpb24oIGdhcFgsIGNlbGxJbmRleCwgaW5jcmVtZW50ICkge1xuICAvLyBrZWVwIGFkZGluZyBjZWxscyB1bnRpbCB0aGUgY292ZXIgdGhlIGluaXRpYWwgZ2FwXG4gIHZhciBjZWxscyA9IFtdO1xuICB3aGlsZSAoIGdhcFggPiAwICkge1xuICAgIHZhciBjZWxsID0gdGhpcy5jZWxsc1sgY2VsbEluZGV4IF07XG4gICAgaWYgKCAhY2VsbCApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjZWxscy5wdXNoKCBjZWxsICk7XG4gICAgY2VsbEluZGV4ICs9IGluY3JlbWVudDtcbiAgICBnYXBYIC09IGNlbGwuc2l6ZS5vdXRlcldpZHRoO1xuICB9XG4gIHJldHVybiBjZWxscztcbn07XG5cbi8vIC0tLS0tIGNvbnRhaW4gLS0tLS0gLy9cblxuLy8gY29udGFpbiBjZWxsIHRhcmdldHMgc28gbm8gZXhjZXNzIHNsaWRpbmdcbnByb3RvLl9jb250YWluU2xpZGVzID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5jb250YWluIHx8IHRoaXMub3B0aW9ucy53cmFwQXJvdW5kIHx8ICF0aGlzLmNlbGxzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGlzUmlnaHRUb0xlZnQgPSB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQ7XG4gIHZhciBiZWdpbk1hcmdpbiA9IGlzUmlnaHRUb0xlZnQgPyAnbWFyZ2luUmlnaHQnIDogJ21hcmdpbkxlZnQnO1xuICB2YXIgZW5kTWFyZ2luID0gaXNSaWdodFRvTGVmdCA/ICdtYXJnaW5MZWZ0JyA6ICdtYXJnaW5SaWdodCc7XG4gIHZhciBjb250ZW50V2lkdGggPSB0aGlzLnNsaWRlYWJsZVdpZHRoIC0gdGhpcy5nZXRMYXN0Q2VsbCgpLnNpemVbIGVuZE1hcmdpbiBdO1xuICAvLyBjb250ZW50IGlzIGxlc3MgdGhhbiBnYWxsZXJ5IHNpemVcbiAgdmFyIGlzQ29udGVudFNtYWxsZXIgPSBjb250ZW50V2lkdGggPCB0aGlzLnNpemUuaW5uZXJXaWR0aDtcbiAgLy8gYm91bmRzXG4gIHZhciBiZWdpbkJvdW5kID0gdGhpcy5jdXJzb3JQb3NpdGlvbiArIHRoaXMuY2VsbHNbMF0uc2l6ZVsgYmVnaW5NYXJnaW4gXTtcbiAgdmFyIGVuZEJvdW5kID0gY29udGVudFdpZHRoIC0gdGhpcy5zaXplLmlubmVyV2lkdGggKiAoIDEgLSB0aGlzLmNlbGxBbGlnbiApO1xuICAvLyBjb250YWluIGVhY2ggY2VsbCB0YXJnZXRcbiAgdGhpcy5zbGlkZXMuZm9yRWFjaCggZnVuY3Rpb24oIHNsaWRlICkge1xuICAgIGlmICggaXNDb250ZW50U21hbGxlciApIHtcbiAgICAgIC8vIGFsbCBjZWxscyBmaXQgaW5zaWRlIGdhbGxlcnlcbiAgICAgIHNsaWRlLnRhcmdldCA9IGNvbnRlbnRXaWR0aCAqIHRoaXMuY2VsbEFsaWduO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBjb250YWluIHRvIGJvdW5kc1xuICAgICAgc2xpZGUudGFyZ2V0ID0gTWF0aC5tYXgoIHNsaWRlLnRhcmdldCwgYmVnaW5Cb3VuZCApO1xuICAgICAgc2xpZGUudGFyZ2V0ID0gTWF0aC5taW4oIHNsaWRlLnRhcmdldCwgZW5kQm91bmQgKTtcbiAgICB9XG4gIH0sIHRoaXMgKTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG4vKipcbiAqIGVtaXRzIGV2ZW50cyB2aWEgZXZlbnRFbWl0dGVyIGFuZCBqUXVlcnkgZXZlbnRzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSAtIG5hbWUgb2YgZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gb3JpZ2luYWwgZXZlbnRcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgLSBleHRyYSBhcmd1bWVudHNcbiAqL1xucHJvdG8uZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uKCB0eXBlLCBldmVudCwgYXJncyApIHtcbiAgdmFyIGVtaXRBcmdzID0gZXZlbnQgPyBbIGV2ZW50IF0uY29uY2F0KCBhcmdzICkgOiBhcmdzO1xuICB0aGlzLmVtaXRFdmVudCggdHlwZSwgZW1pdEFyZ3MgKTtcblxuICBpZiAoIGpRdWVyeSAmJiB0aGlzLiRlbGVtZW50ICkge1xuICAgIC8vIGRlZmF1bHQgdHJpZ2dlciB3aXRoIHR5cGUgaWYgbm8gZXZlbnRcbiAgICB0eXBlICs9IHRoaXMub3B0aW9ucy5uYW1lc3BhY2VKUXVlcnlFdmVudHMgPyAnLmZsaWNraXR5JyA6ICcnO1xuICAgIHZhciAkZXZlbnQgPSB0eXBlO1xuICAgIGlmICggZXZlbnQgKSB7XG4gICAgICAvLyBjcmVhdGUgalF1ZXJ5IGV2ZW50XG4gICAgICB2YXIgalFFdmVudCA9IG5ldyBqUXVlcnkuRXZlbnQoIGV2ZW50ICk7XG4gICAgICBqUUV2ZW50LnR5cGUgPSB0eXBlO1xuICAgICAgJGV2ZW50ID0galFFdmVudDtcbiAgICB9XG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCAkZXZlbnQsIGFyZ3MgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gc2VsZWN0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmRleCAtIGluZGV4IG9mIHRoZSBzbGlkZVxuICogQHBhcmFtIHtCb29sZWFufSBpc1dyYXAgLSB3aWxsIHdyYXAtYXJvdW5kIHRvIGxhc3QvZmlyc3QgaWYgYXQgdGhlIGVuZFxuICogQHBhcmFtIHtCb29sZWFufSBpc0luc3RhbnQgLSB3aWxsIGltbWVkaWF0ZWx5IHNldCBwb3NpdGlvbiBhdCBzZWxlY3RlZCBjZWxsXG4gKi9cbnByb3RvLnNlbGVjdCA9IGZ1bmN0aW9uKCBpbmRleCwgaXNXcmFwLCBpc0luc3RhbnQgKSB7XG4gIGlmICggIXRoaXMuaXNBY3RpdmUgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGluZGV4ID0gcGFyc2VJbnQoIGluZGV4LCAxMCApO1xuICB0aGlzLl93cmFwU2VsZWN0KCBpbmRleCApO1xuXG4gIGlmICggdGhpcy5vcHRpb25zLndyYXBBcm91bmQgfHwgaXNXcmFwICkge1xuICAgIGluZGV4ID0gdXRpbHMubW9kdWxvKCBpbmRleCwgdGhpcy5zbGlkZXMubGVuZ3RoICk7XG4gIH1cbiAgLy8gYmFpbCBpZiBpbnZhbGlkIGluZGV4XG4gIGlmICggIXRoaXMuc2xpZGVzWyBpbmRleCBdICkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgcHJldkluZGV4ID0gdGhpcy5zZWxlY3RlZEluZGV4O1xuICB0aGlzLnNlbGVjdGVkSW5kZXggPSBpbmRleDtcbiAgdGhpcy51cGRhdGVTZWxlY3RlZFNsaWRlKCk7XG4gIGlmICggaXNJbnN0YW50ICkge1xuICAgIHRoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGFydEFuaW1hdGlvbigpO1xuICB9XG4gIGlmICggdGhpcy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ICkge1xuICAgIHRoaXMuc2V0R2FsbGVyeVNpemUoKTtcbiAgfVxuICAvLyBldmVudHNcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnc2VsZWN0JywgbnVsbCwgWyBpbmRleCBdICk7XG4gIC8vIGNoYW5nZSBldmVudCBpZiBuZXcgaW5kZXhcbiAgaWYgKCBpbmRleCAhPSBwcmV2SW5kZXggKSB7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnY2hhbmdlJywgbnVsbCwgWyBpbmRleCBdICk7XG4gIH1cbiAgLy8gb2xkIHYxIGV2ZW50IG5hbWUsIHJlbW92ZSBpbiB2M1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoJ2NlbGxTZWxlY3QnKTtcbn07XG5cbi8vIHdyYXBzIHBvc2l0aW9uIGZvciB3cmFwQXJvdW5kLCB0byBtb3ZlIHRvIGNsb3Nlc3Qgc2xpZGUuICMxMTNcbnByb3RvLl93cmFwU2VsZWN0ID0gZnVuY3Rpb24oIGluZGV4ICkge1xuICB2YXIgbGVuID0gdGhpcy5zbGlkZXMubGVuZ3RoO1xuICB2YXIgaXNXcmFwcGluZyA9IHRoaXMub3B0aW9ucy53cmFwQXJvdW5kICYmIGxlbiA+IDE7XG4gIGlmICggIWlzV3JhcHBpbmcgKSB7XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG4gIHZhciB3cmFwSW5kZXggPSB1dGlscy5tb2R1bG8oIGluZGV4LCBsZW4gKTtcbiAgLy8gZ28gdG8gc2hvcnRlc3RcbiAgdmFyIGRlbHRhID0gTWF0aC5hYnMoIHdyYXBJbmRleCAtIHRoaXMuc2VsZWN0ZWRJbmRleCApO1xuICB2YXIgYmFja1dyYXBEZWx0YSA9IE1hdGguYWJzKCAoIHdyYXBJbmRleCArIGxlbiApIC0gdGhpcy5zZWxlY3RlZEluZGV4ICk7XG4gIHZhciBmb3Jld2FyZFdyYXBEZWx0YSA9IE1hdGguYWJzKCAoIHdyYXBJbmRleCAtIGxlbiApIC0gdGhpcy5zZWxlY3RlZEluZGV4ICk7XG4gIGlmICggIXRoaXMuaXNEcmFnU2VsZWN0ICYmIGJhY2tXcmFwRGVsdGEgPCBkZWx0YSApIHtcbiAgICBpbmRleCArPSBsZW47XG4gIH0gZWxzZSBpZiAoICF0aGlzLmlzRHJhZ1NlbGVjdCAmJiBmb3Jld2FyZFdyYXBEZWx0YSA8IGRlbHRhICkge1xuICAgIGluZGV4IC09IGxlbjtcbiAgfVxuICAvLyB3cmFwIHBvc2l0aW9uIHNvIHNsaWRlciBpcyB3aXRoaW4gbm9ybWFsIGFyZWFcbiAgaWYgKCBpbmRleCA8IDAgKSB7XG4gICAgdGhpcy54IC09IHRoaXMuc2xpZGVhYmxlV2lkdGg7XG4gIH0gZWxzZSBpZiAoIGluZGV4ID49IGxlbiApIHtcbiAgICB0aGlzLnggKz0gdGhpcy5zbGlkZWFibGVXaWR0aDtcbiAgfVxufTtcblxucHJvdG8ucHJldmlvdXMgPSBmdW5jdGlvbiggaXNXcmFwLCBpc0luc3RhbnQgKSB7XG4gIHRoaXMuc2VsZWN0KCB0aGlzLnNlbGVjdGVkSW5kZXggLSAxLCBpc1dyYXAsIGlzSW5zdGFudCApO1xufTtcblxucHJvdG8ubmV4dCA9IGZ1bmN0aW9uKCBpc1dyYXAsIGlzSW5zdGFudCApIHtcbiAgdGhpcy5zZWxlY3QoIHRoaXMuc2VsZWN0ZWRJbmRleCArIDEsIGlzV3JhcCwgaXNJbnN0YW50ICk7XG59O1xuXG5wcm90by51cGRhdGVTZWxlY3RlZFNsaWRlID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzbGlkZSA9IHRoaXMuc2xpZGVzWyB0aGlzLnNlbGVjdGVkSW5kZXggXTtcbiAgLy8gc2VsZWN0ZWRJbmRleCBjb3VsZCBiZSBvdXRzaWRlIG9mIHNsaWRlcywgaWYgdHJpZ2dlcmVkIGJlZm9yZSByZXNpemUoKVxuICBpZiAoICFzbGlkZSApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gdW5zZWxlY3QgcHJldmlvdXMgc2VsZWN0ZWQgc2xpZGVcbiAgdGhpcy51bnNlbGVjdFNlbGVjdGVkU2xpZGUoKTtcbiAgLy8gdXBkYXRlIG5ldyBzZWxlY3RlZCBzbGlkZVxuICB0aGlzLnNlbGVjdGVkU2xpZGUgPSBzbGlkZTtcbiAgc2xpZGUuc2VsZWN0KCk7XG4gIHRoaXMuc2VsZWN0ZWRDZWxscyA9IHNsaWRlLmNlbGxzO1xuICB0aGlzLnNlbGVjdGVkRWxlbWVudHMgPSBzbGlkZS5nZXRDZWxsRWxlbWVudHMoKTtcbiAgLy8gSEFDSzogc2VsZWN0ZWRDZWxsICYgc2VsZWN0ZWRFbGVtZW50IGlzIGZpcnN0IGNlbGwgaW4gc2xpZGUsIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gIC8vIFJlbW92ZSBpbiB2Mz9cbiAgdGhpcy5zZWxlY3RlZENlbGwgPSBzbGlkZS5jZWxsc1swXTtcbiAgdGhpcy5zZWxlY3RlZEVsZW1lbnQgPSB0aGlzLnNlbGVjdGVkRWxlbWVudHNbMF07XG59O1xuXG5wcm90by51bnNlbGVjdFNlbGVjdGVkU2xpZGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLnNlbGVjdGVkU2xpZGUgKSB7XG4gICAgdGhpcy5zZWxlY3RlZFNsaWRlLnVuc2VsZWN0KCk7XG4gIH1cbn07XG5cbnByb3RvLnNlbGVjdEluaXRpYWxJbmRleCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaW5pdGlhbEluZGV4ID0gdGhpcy5vcHRpb25zLmluaXRpYWxJbmRleDtcbiAgLy8gYWxyZWFkeSBhY3RpdmF0ZWQsIHNlbGVjdCBwcmV2aW91cyBzZWxlY3RlZEluZGV4XG4gIGlmICggdGhpcy5pc0luaXRBY3RpdmF0ZWQgKSB7XG4gICAgdGhpcy5zZWxlY3QoIHRoaXMuc2VsZWN0ZWRJbmRleCwgZmFsc2UsIHRydWUgKTtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gc2VsZWN0IHdpdGggc2VsZWN0b3Igc3RyaW5nXG4gIGlmICggaW5pdGlhbEluZGV4ICYmIHR5cGVvZiBpbml0aWFsSW5kZXggPT0gJ3N0cmluZycgKSB7XG4gICAgdmFyIGNlbGwgPSB0aGlzLnF1ZXJ5Q2VsbCggaW5pdGlhbEluZGV4ICk7XG4gICAgaWYgKCBjZWxsICkge1xuICAgICAgdGhpcy5zZWxlY3RDZWxsKCBpbml0aWFsSW5kZXgsIGZhbHNlLCB0cnVlICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgdmFyIGluZGV4ID0gMDtcbiAgLy8gc2VsZWN0IHdpdGggbnVtYmVyXG4gIGlmICggaW5pdGlhbEluZGV4ICYmIHRoaXMuc2xpZGVzWyBpbml0aWFsSW5kZXggXSApIHtcbiAgICBpbmRleCA9IGluaXRpYWxJbmRleDtcbiAgfVxuICAvLyBzZWxlY3QgaW5zdGFudGx5XG4gIHRoaXMuc2VsZWN0KCBpbmRleCwgZmFsc2UsIHRydWUgKTtcbn07XG5cbi8qKlxuICogc2VsZWN0IHNsaWRlIGZyb20gbnVtYmVyIG9yIGNlbGwgZWxlbWVudFxuICogQHBhcmFtIHtbRWxlbWVudCwgTnVtYmVyXX0gdmFsdWUgLSB6ZXJvLWJhc2VkIGluZGV4IG9yIGVsZW1lbnQgdG8gc2VsZWN0XG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzV3JhcCAtIGVuYWJsZXMgd3JhcHBpbmcgYXJvdW5kIGZvciBleHRyYSBpbmRleFxuICogQHBhcmFtIHtCb29sZWFufSBpc0luc3RhbnQgLSBkaXNhYmxlcyBzbGlkZSBhbmltYXRpb25cbiAqL1xucHJvdG8uc2VsZWN0Q2VsbCA9IGZ1bmN0aW9uKCB2YWx1ZSwgaXNXcmFwLCBpc0luc3RhbnQgKSB7XG4gIC8vIGdldCBjZWxsXG4gIHZhciBjZWxsID0gdGhpcy5xdWVyeUNlbGwoIHZhbHVlICk7XG4gIGlmICggIWNlbGwgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gdGhpcy5nZXRDZWxsU2xpZGVJbmRleCggY2VsbCApO1xuICB0aGlzLnNlbGVjdCggaW5kZXgsIGlzV3JhcCwgaXNJbnN0YW50ICk7XG59O1xuXG5wcm90by5nZXRDZWxsU2xpZGVJbmRleCA9IGZ1bmN0aW9uKCBjZWxsICkge1xuICAvLyBnZXQgaW5kZXggb2Ygc2xpZGVzIHRoYXQgaGFzIGNlbGxcbiAgZm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5zbGlkZXMubGVuZ3RoOyBpKysgKSB7XG4gICAgdmFyIHNsaWRlID0gdGhpcy5zbGlkZXNbaV07XG4gICAgdmFyIGluZGV4ID0gc2xpZGUuY2VsbHMuaW5kZXhPZiggY2VsbCApO1xuICAgIGlmICggaW5kZXggIT0gLTEgKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGdldCBjZWxscyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIGdldCBGbGlja2l0eS5DZWxsLCBnaXZlbiBhbiBFbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW0gLSBtYXRjaGluZyBjZWxsIGVsZW1lbnRcbiAqIEByZXR1cm5zIHtGbGlja2l0eS5DZWxsfSBjZWxsIC0gbWF0Y2hpbmcgY2VsbFxuICovXG5wcm90by5nZXRDZWxsID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIC8vIGxvb3AgdGhyb3VnaCBjZWxscyB0byBnZXQgdGhlIG9uZSB0aGF0IG1hdGNoZXNcbiAgZm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5jZWxscy5sZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgY2VsbCA9IHRoaXMuY2VsbHNbaV07XG4gICAgaWYgKCBjZWxsLmVsZW1lbnQgPT0gZWxlbSApIHtcbiAgICAgIHJldHVybiBjZWxsO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBnZXQgY29sbGVjdGlvbiBvZiBGbGlja2l0eS5DZWxscywgZ2l2ZW4gRWxlbWVudHNcbiAqIEBwYXJhbSB7W0VsZW1lbnQsIEFycmF5LCBOb2RlTGlzdF19IGVsZW1zIC0gbXVsdGlwbGUgZWxlbWVudHNcbiAqIEByZXR1cm5zIHtBcnJheX0gY2VsbHMgLSBGbGlja2l0eS5DZWxsc1xuICovXG5wcm90by5nZXRDZWxscyA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XG4gIHZhciBjZWxscyA9IFtdO1xuICBlbGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggZWxlbSApIHtcbiAgICB2YXIgY2VsbCA9IHRoaXMuZ2V0Q2VsbCggZWxlbSApO1xuICAgIGlmICggY2VsbCApIHtcbiAgICAgIGNlbGxzLnB1c2goIGNlbGwgKTtcbiAgICB9XG4gIH0sIHRoaXMgKTtcbiAgcmV0dXJuIGNlbGxzO1xufTtcblxuLyoqXG4gKiBnZXQgY2VsbCBlbGVtZW50c1xuICogQHJldHVybnMge0FycmF5fSBjZWxsRWxlbXNcbiAqL1xucHJvdG8uZ2V0Q2VsbEVsZW1lbnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmNlbGxzLm1hcCggZnVuY3Rpb24oIGNlbGwgKSB7XG4gICAgcmV0dXJuIGNlbGwuZWxlbWVudDtcbiAgfSApO1xufTtcblxuLyoqXG4gKiBnZXQgcGFyZW50IGNlbGwgZnJvbSBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW0gLSBjaGlsZCBlbGVtZW50XG4gKiBAcmV0dXJucyB7RmxpY2tpdC5DZWxsfSBjZWxsIC0gcGFyZW50IGNlbGxcbiAqL1xucHJvdG8uZ2V0UGFyZW50Q2VsbCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICAvLyBmaXJzdCBjaGVjayBpZiBlbGVtIGlzIGNlbGxcbiAgdmFyIGNlbGwgPSB0aGlzLmdldENlbGwoIGVsZW0gKTtcbiAgaWYgKCBjZWxsICkge1xuICAgIHJldHVybiBjZWxsO1xuICB9XG4gIC8vIHRyeSB0byBnZXQgcGFyZW50IGNlbGwgZWxlbVxuICBlbGVtID0gdXRpbHMuZ2V0UGFyZW50KCBlbGVtLCAnLmZsaWNraXR5LXNsaWRlciA+IConICk7XG4gIHJldHVybiB0aGlzLmdldENlbGwoIGVsZW0gKTtcbn07XG5cbi8qKlxuICogZ2V0IGNlbGxzIGFkamFjZW50IHRvIGEgc2xpZGVcbiAqIEBwYXJhbSB7SW50ZWdlcn0gYWRqQ291bnQgLSBudW1iZXIgb2YgYWRqYWNlbnQgc2xpZGVzXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGluZGV4IC0gaW5kZXggb2Ygc2xpZGUgdG8gc3RhcnRcbiAqIEByZXR1cm5zIHtBcnJheX0gY2VsbHMgLSBhcnJheSBvZiBGbGlja2l0eS5DZWxsc1xuICovXG5wcm90by5nZXRBZGphY2VudENlbGxFbGVtZW50cyA9IGZ1bmN0aW9uKCBhZGpDb3VudCwgaW5kZXggKSB7XG4gIGlmICggIWFkakNvdW50ICkge1xuICAgIHJldHVybiB0aGlzLnNlbGVjdGVkU2xpZGUuZ2V0Q2VsbEVsZW1lbnRzKCk7XG4gIH1cbiAgaW5kZXggPSBpbmRleCA9PT0gdW5kZWZpbmVkID8gdGhpcy5zZWxlY3RlZEluZGV4IDogaW5kZXg7XG5cbiAgdmFyIGxlbiA9IHRoaXMuc2xpZGVzLmxlbmd0aDtcbiAgaWYgKCAxICsgKCBhZGpDb3VudCAqIDIgKSA+PSBsZW4gKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Q2VsbEVsZW1lbnRzKCk7XG4gIH1cblxuICB2YXIgY2VsbEVsZW1zID0gW107XG4gIGZvciAoIHZhciBpID0gaW5kZXggLSBhZGpDb3VudDsgaSA8PSBpbmRleCArIGFkakNvdW50OyBpKysgKSB7XG4gICAgdmFyIHNsaWRlSW5kZXggPSB0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCA/IHV0aWxzLm1vZHVsbyggaSwgbGVuICkgOiBpO1xuICAgIHZhciBzbGlkZSA9IHRoaXMuc2xpZGVzWyBzbGlkZUluZGV4IF07XG4gICAgaWYgKCBzbGlkZSApIHtcbiAgICAgIGNlbGxFbGVtcyA9IGNlbGxFbGVtcy5jb25jYXQoIHNsaWRlLmdldENlbGxFbGVtZW50cygpICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjZWxsRWxlbXM7XG59O1xuXG4vKipcbiAqIHNlbGVjdCBzbGlkZSBmcm9tIG51bWJlciBvciBjZWxsIGVsZW1lbnRcbiAqIEBwYXJhbSB7W0VsZW1lbnQsIFN0cmluZywgTnVtYmVyXX0gc2VsZWN0b3IgLSBlbGVtZW50LCBzZWxlY3RvciBzdHJpbmcsIG9yIGluZGV4XG4gKiBAcmV0dXJucyB7RmxpY2tpdHkuQ2VsbH0gLSBtYXRjaGluZyBjZWxsXG4gKi9cbnByb3RvLnF1ZXJ5Q2VsbCA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcbiAgaWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT0gJ251bWJlcicgKSB7XG4gICAgLy8gdXNlIG51bWJlciBhcyBpbmRleFxuICAgIHJldHVybiB0aGlzLmNlbGxzWyBzZWxlY3RvciBdO1xuICB9XG4gIGlmICggdHlwZW9mIHNlbGVjdG9yID09ICdzdHJpbmcnICkge1xuICAgIC8vIGRvIG5vdCBzZWxlY3QgaW52YWxpZCBzZWxlY3RvcnMgZnJvbSBoYXNoOiAjMTIzLCAjLy4gIzc5MVxuICAgIGlmICggc2VsZWN0b3IubWF0Y2goIC9eWyMuXT9bXFxkL10vICkgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHVzZSBzdHJpbmcgYXMgc2VsZWN0b3IsIGdldCBlbGVtZW50XG4gICAgc2VsZWN0b3IgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3Rvciggc2VsZWN0b3IgKTtcbiAgfVxuICAvLyBnZXQgY2VsbCBmcm9tIGVsZW1lbnRcbiAgcmV0dXJuIHRoaXMuZ2V0Q2VsbCggc2VsZWN0b3IgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGV2ZW50cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5wcm90by51aUNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVtaXRFdmVudCgndWlDaGFuZ2UnKTtcbn07XG5cbi8vIGtlZXAgZm9jdXMgb24gZWxlbWVudCB3aGVuIGNoaWxkIFVJIGVsZW1lbnRzIGFyZSBjbGlja2VkXG5wcm90by5jaGlsZFVJUG9pbnRlckRvd24gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIC8vIEhBQ0sgaU9TIGRvZXMgbm90IGFsbG93IHRvdWNoIGV2ZW50cyB0byBidWJibGUgdXA/IVxuICBpZiAoIGV2ZW50LnR5cGUgIT0gJ3RvdWNoc3RhcnQnICkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgdGhpcy5mb2N1cygpO1xufTtcblxuLy8gLS0tLS0gcmVzaXplIC0tLS0tIC8vXG5cbnByb3RvLm9ucmVzaXplID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMud2F0Y2hDU1MoKTtcbiAgdGhpcy5yZXNpemUoKTtcbn07XG5cbnV0aWxzLmRlYm91bmNlTWV0aG9kKCBGbGlja2l0eSwgJ29ucmVzaXplJywgMTUwICk7XG5cbnByb3RvLnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyAjMTE3NyBkaXNhYmxlIHJlc2l6ZSBiZWhhdmlvciB3aGVuIGFuaW1hdGluZyBvciBkcmFnZ2luZyBmb3IgaU9TIDE1XG4gIGlmICggIXRoaXMuaXNBY3RpdmUgfHwgdGhpcy5pc0FuaW1hdGluZyB8fCB0aGlzLmlzRHJhZ2dpbmcgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuZ2V0U2l6ZSgpO1xuICAvLyB3cmFwIHZhbHVlc1xuICBpZiAoIHRoaXMub3B0aW9ucy53cmFwQXJvdW5kICkge1xuICAgIHRoaXMueCA9IHV0aWxzLm1vZHVsbyggdGhpcy54LCB0aGlzLnNsaWRlYWJsZVdpZHRoICk7XG4gIH1cbiAgdGhpcy5wb3NpdGlvbkNlbGxzKCk7XG4gIHRoaXMuX2dldFdyYXBTaGlmdENlbGxzKCk7XG4gIHRoaXMuc2V0R2FsbGVyeVNpemUoKTtcbiAgdGhpcy5lbWl0RXZlbnQoJ3Jlc2l6ZScpO1xuICAvLyB1cGRhdGUgc2VsZWN0ZWQgaW5kZXggZm9yIGdyb3VwIHNsaWRlcywgaW5zdGFudFxuICAvLyBUT0RPOiBwb3NpdGlvbiBjYW4gYmUgbG9zdCBiZXR3ZWVuIGdyb3VwcyBvZiB2YXJpb3VzIG51bWJlcnNcbiAgdmFyIHNlbGVjdGVkRWxlbWVudCA9IHRoaXMuc2VsZWN0ZWRFbGVtZW50cyAmJiB0aGlzLnNlbGVjdGVkRWxlbWVudHNbMF07XG4gIHRoaXMuc2VsZWN0Q2VsbCggc2VsZWN0ZWRFbGVtZW50LCBmYWxzZSwgdHJ1ZSApO1xufTtcblxuLy8gd2F0Y2hlcyB0aGUgOmFmdGVyIHByb3BlcnR5LCBhY3RpdmF0ZXMvZGVhY3RpdmF0ZXNcbnByb3RvLndhdGNoQ1NTID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3YXRjaE9wdGlvbiA9IHRoaXMub3B0aW9ucy53YXRjaENTUztcbiAgaWYgKCAhd2F0Y2hPcHRpb24gKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGFmdGVyQ29udGVudCA9IGdldENvbXB1dGVkU3R5bGUoIHRoaXMuZWxlbWVudCwgJzphZnRlcicgKS5jb250ZW50O1xuICAvLyBhY3RpdmF0ZSBpZiA6YWZ0ZXIgeyBjb250ZW50OiAnZmxpY2tpdHknIH1cbiAgaWYgKCBhZnRlckNvbnRlbnQuaW5kZXhPZignZmxpY2tpdHknKSAhPSAtMSApIHtcbiAgICB0aGlzLmFjdGl2YXRlKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIGtleWRvd24gLS0tLS0gLy9cblxuLy8gZ28gcHJldmlvdXMvbmV4dCBpZiBsZWZ0L3JpZ2h0IGtleXMgcHJlc3NlZFxucHJvdG8ub25rZXlkb3duID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICAvLyBvbmx5IHdvcmsgaWYgZWxlbWVudCBpcyBpbiBmb2N1c1xuICB2YXIgaXNOb3RGb2N1c2VkID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9IHRoaXMuZWxlbWVudDtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgfHwgaXNOb3RGb2N1c2VkICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBoYW5kbGVyID0gRmxpY2tpdHkua2V5Ym9hcmRIYW5kbGVyc1sgZXZlbnQua2V5Q29kZSBdO1xuICBpZiAoIGhhbmRsZXIgKSB7XG4gICAgaGFuZGxlci5jYWxsKCB0aGlzICk7XG4gIH1cbn07XG5cbkZsaWNraXR5LmtleWJvYXJkSGFuZGxlcnMgPSB7XG4gIC8vIGxlZnQgYXJyb3dcbiAgMzc6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0TWV0aG9kID0gdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ID8gJ25leHQnIDogJ3ByZXZpb3VzJztcbiAgICB0aGlzLnVpQ2hhbmdlKCk7XG4gICAgdGhpc1sgbGVmdE1ldGhvZCBdKCk7XG4gIH0sXG4gIC8vIHJpZ2h0IGFycm93XG4gIDM5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmlnaHRNZXRob2QgPSB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQgPyAncHJldmlvdXMnIDogJ25leHQnO1xuICAgIHRoaXMudWlDaGFuZ2UoKTtcbiAgICB0aGlzWyByaWdodE1ldGhvZCBdKCk7XG4gIH0sXG59O1xuXG4vLyAtLS0tLSBmb2N1cyAtLS0tLSAvL1xuXG5wcm90by5mb2N1cyA9IGZ1bmN0aW9uKCkge1xuICAvLyBUT0RPIHJlbW92ZSBzY3JvbGxUbyBvbmNlIGZvY3VzIG9wdGlvbnMgZ2V0cyBtb3JlIHN1cHBvcnRcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxFbGVtZW50L2ZvY3VzIC4uLlxuICAvLyAgICAjQnJvd3Nlcl9jb21wYXRpYmlsaXR5XG4gIHZhciBwcmV2U2Nyb2xsWSA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgdGhpcy5lbGVtZW50LmZvY3VzKHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9KTtcbiAgLy8gaGFjayB0byBmaXggc2Nyb2xsIGp1bXAgYWZ0ZXIgZm9jdXMsICM3NlxuICBpZiAoIHdpbmRvdy5wYWdlWU9mZnNldCAhPSBwcmV2U2Nyb2xsWSApIHtcbiAgICB3aW5kb3cuc2Nyb2xsVG8oIHdpbmRvdy5wYWdlWE9mZnNldCwgcHJldlNjcm9sbFkgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZGVzdHJveSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyBkZWFjdGl2YXRlIGFsbCBGbGlja2l0eSBmdW5jdGlvbmFsaXR5LCBidXQga2VlcCBzdHVmZiBhdmFpbGFibGVcbnByb3RvLmRlYWN0aXZhdGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5pc0FjdGl2ZSApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2ZsaWNraXR5LWVuYWJsZWQnKTtcbiAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2ZsaWNraXR5LXJ0bCcpO1xuICB0aGlzLnVuc2VsZWN0U2VsZWN0ZWRTbGlkZSgpO1xuICAvLyBkZXN0cm95IGNlbGxzXG4gIHRoaXMuY2VsbHMuZm9yRWFjaCggZnVuY3Rpb24oIGNlbGwgKSB7XG4gICAgY2VsbC5kZXN0cm95KCk7XG4gIH0gKTtcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUNoaWxkKCB0aGlzLnZpZXdwb3J0ICk7XG4gIC8vIG1vdmUgY2hpbGQgZWxlbWVudHMgYmFjayBpbnRvIGVsZW1lbnRcbiAgbW92ZUVsZW1lbnRzKCB0aGlzLnNsaWRlci5jaGlsZHJlbiwgdGhpcy5lbGVtZW50ICk7XG4gIGlmICggdGhpcy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgKSB7XG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgndGFiSW5kZXgnKTtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2tleWRvd24nLCB0aGlzICk7XG4gIH1cbiAgLy8gc2V0IGZsYWdzXG4gIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgdGhpcy5lbWl0RXZlbnQoJ2RlYWN0aXZhdGUnKTtcbn07XG5cbnByb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAncmVzaXplJywgdGhpcyApO1xuICB0aGlzLmFsbE9mZigpO1xuICB0aGlzLmVtaXRFdmVudCgnZGVzdHJveScpO1xuICBpZiAoIGpRdWVyeSAmJiB0aGlzLiRlbGVtZW50ICkge1xuICAgIGpRdWVyeS5yZW1vdmVEYXRhKCB0aGlzLmVsZW1lbnQsICdmbGlja2l0eScgKTtcbiAgfVxuICBkZWxldGUgdGhpcy5lbGVtZW50LmZsaWNraXR5R1VJRDtcbiAgZGVsZXRlIGluc3RhbmNlc1sgdGhpcy5ndWlkIF07XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBwcm90b3R5cGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudXRpbHMuZXh0ZW5kKCBwcm90bywgYW5pbWF0ZVByb3RvdHlwZSApO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBleHRyYXMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBnZXQgRmxpY2tpdHkgaW5zdGFuY2UgZnJvbSBlbGVtZW50XG4gKiBAcGFyYW0ge1tFbGVtZW50LCBTdHJpbmddfSBlbGVtIC0gZWxlbWVudCBvciBzZWxlY3RvciBzdHJpbmdcbiAqIEByZXR1cm5zIHtGbGlja2l0eX0gLSBGbGlja2l0eSBpbnN0YW5jZVxuICovXG5GbGlja2l0eS5kYXRhID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIGVsZW0gPSB1dGlscy5nZXRRdWVyeUVsZW1lbnQoIGVsZW0gKTtcbiAgdmFyIGlkID0gZWxlbSAmJiBlbGVtLmZsaWNraXR5R1VJRDtcbiAgcmV0dXJuIGlkICYmIGluc3RhbmNlc1sgaWQgXTtcbn07XG5cbnV0aWxzLmh0bWxJbml0KCBGbGlja2l0eSwgJ2ZsaWNraXR5JyApO1xuXG5pZiAoIGpRdWVyeSAmJiBqUXVlcnkuYnJpZGdldCApIHtcbiAgalF1ZXJ5LmJyaWRnZXQoICdmbGlja2l0eScsIEZsaWNraXR5ICk7XG59XG5cbi8vIHNldCBpbnRlcm5hbCBqUXVlcnksIGZvciBXZWJwYWNrICsgalF1ZXJ5IHYzLCAjNDc4XG5GbGlja2l0eS5zZXRKUXVlcnkgPSBmdW5jdGlvbigganEgKSB7XG4gIGpRdWVyeSA9IGpxO1xufTtcblxuRmxpY2tpdHkuQ2VsbCA9IENlbGw7XG5GbGlja2l0eS5TbGlkZSA9IFNsaWRlO1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0gKSApO1xuIiwiLyohXG4gKiBGbGlja2l0eSB2Mi4zLjBcbiAqIFRvdWNoLCByZXNwb25zaXZlLCBmbGlja2FibGUgY2Fyb3VzZWxzXG4gKlxuICogTGljZW5zZWQgR1BMdjMgZm9yIG9wZW4gc291cmNlIHVzZVxuICogb3IgRmxpY2tpdHkgQ29tbWVyY2lhbCBMaWNlbnNlIGZvciBjb21tZXJjaWFsIHVzZVxuICpcbiAqIGh0dHBzOi8vZmxpY2tpdHkubWV0YWZpenp5LmNvXG4gKiBDb3B5cmlnaHQgMjAxNS0yMDIxIE1ldGFmaXp6eVxuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAnLi9mbGlja2l0eScsXG4gICAgICAnLi9kcmFnJyxcbiAgICAgICcuL3ByZXYtbmV4dC1idXR0b24nLFxuICAgICAgJy4vcGFnZS1kb3RzJyxcbiAgICAgICcuL3BsYXllcicsXG4gICAgICAnLi9hZGQtcmVtb3ZlLWNlbGwnLFxuICAgICAgJy4vbGF6eWxvYWQnLFxuICAgIF0sIGZhY3RvcnkgKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgICAgcmVxdWlyZSgnLi9mbGlja2l0eScpLFxuICAgICAgICByZXF1aXJlKCcuL2RyYWcnKSxcbiAgICAgICAgcmVxdWlyZSgnLi9wcmV2LW5leHQtYnV0dG9uJyksXG4gICAgICAgIHJlcXVpcmUoJy4vcGFnZS1kb3RzJyksXG4gICAgICAgIHJlcXVpcmUoJy4vcGxheWVyJyksXG4gICAgICAgIHJlcXVpcmUoJy4vYWRkLXJlbW92ZS1jZWxsJyksXG4gICAgICAgIHJlcXVpcmUoJy4vbGF6eWxvYWQnKVxuICAgICk7XG4gIH1cblxufSApKCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIEZsaWNraXR5ICkge1xuICByZXR1cm4gRmxpY2tpdHk7XG59ICk7XG4iLCIvLyBsYXp5bG9hZFxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICcuL2ZsaWNraXR5JyxcbiAgICAgICdmaXp6eS11aS11dGlscy91dGlscycsXG4gICAgXSwgZnVuY3Rpb24oIEZsaWNraXR5LCB1dGlscyApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIEZsaWNraXR5LCB1dGlscyApO1xuICAgIH0gKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICByZXF1aXJlKCcuL2ZsaWNraXR5JyksXG4gICAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICB3aW5kb3cuRmxpY2tpdHksXG4gICAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHNcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBGbGlja2l0eSwgdXRpbHMgKSB7XG4ndXNlIHN0cmljdCc7XG5cbkZsaWNraXR5LmNyZWF0ZU1ldGhvZHMucHVzaCgnX2NyZWF0ZUxhenlsb2FkJyk7XG52YXIgcHJvdG8gPSBGbGlja2l0eS5wcm90b3R5cGU7XG5cbnByb3RvLl9jcmVhdGVMYXp5bG9hZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm9uKCAnc2VsZWN0JywgdGhpcy5sYXp5TG9hZCApO1xufTtcblxucHJvdG8ubGF6eUxvYWQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGxhenlMb2FkID0gdGhpcy5vcHRpb25zLmxhenlMb2FkO1xuICBpZiAoICFsYXp5TG9hZCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gZ2V0IGFkamFjZW50IGNlbGxzLCB1c2UgbGF6eUxvYWQgb3B0aW9uIGZvciBhZGphY2VudCBjb3VudFxuICB2YXIgYWRqQ291bnQgPSB0eXBlb2YgbGF6eUxvYWQgPT0gJ251bWJlcicgPyBsYXp5TG9hZCA6IDA7XG4gIHZhciBjZWxsRWxlbXMgPSB0aGlzLmdldEFkamFjZW50Q2VsbEVsZW1lbnRzKCBhZGpDb3VudCApO1xuICAvLyBnZXQgbGF6eSBpbWFnZXMgaW4gdGhvc2UgY2VsbHNcbiAgdmFyIGxhenlJbWFnZXMgPSBbXTtcbiAgY2VsbEVsZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBjZWxsRWxlbSApIHtcbiAgICB2YXIgbGF6eUNlbGxJbWFnZXMgPSBnZXRDZWxsTGF6eUltYWdlcyggY2VsbEVsZW0gKTtcbiAgICBsYXp5SW1hZ2VzID0gbGF6eUltYWdlcy5jb25jYXQoIGxhenlDZWxsSW1hZ2VzICk7XG4gIH0gKTtcbiAgLy8gbG9hZCBsYXp5IGltYWdlc1xuICBsYXp5SW1hZ2VzLmZvckVhY2goIGZ1bmN0aW9uKCBpbWcgKSB7XG4gICAgbmV3IExhenlMb2FkZXIoIGltZywgdGhpcyApO1xuICB9LCB0aGlzICk7XG59O1xuXG5mdW5jdGlvbiBnZXRDZWxsTGF6eUltYWdlcyggY2VsbEVsZW0gKSB7XG4gIC8vIGNoZWNrIGlmIGNlbGwgZWxlbWVudCBpcyBsYXp5IGltYWdlXG4gIGlmICggY2VsbEVsZW0ubm9kZU5hbWUgPT0gJ0lNRycgKSB7XG4gICAgdmFyIGxhenlsb2FkQXR0ciA9IGNlbGxFbGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1mbGlja2l0eS1sYXp5bG9hZCcpO1xuICAgIHZhciBzcmNBdHRyID0gY2VsbEVsZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWZsaWNraXR5LWxhenlsb2FkLXNyYycpO1xuICAgIHZhciBzcmNzZXRBdHRyID0gY2VsbEVsZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWZsaWNraXR5LWxhenlsb2FkLXNyY3NldCcpO1xuICAgIGlmICggbGF6eWxvYWRBdHRyIHx8IHNyY0F0dHIgfHwgc3Jjc2V0QXR0ciApIHtcbiAgICAgIHJldHVybiBbIGNlbGxFbGVtIF07XG4gICAgfVxuICB9XG4gIC8vIHNlbGVjdCBsYXp5IGltYWdlcyBpbiBjZWxsXG4gIHZhciBsYXp5U2VsZWN0b3IgPSAnaW1nW2RhdGEtZmxpY2tpdHktbGF6eWxvYWRdLCAnICtcbiAgICAnaW1nW2RhdGEtZmxpY2tpdHktbGF6eWxvYWQtc3JjXSwgaW1nW2RhdGEtZmxpY2tpdHktbGF6eWxvYWQtc3Jjc2V0XSc7XG4gIHZhciBpbWdzID0gY2VsbEVsZW0ucXVlcnlTZWxlY3RvckFsbCggbGF6eVNlbGVjdG9yICk7XG4gIHJldHVybiB1dGlscy5tYWtlQXJyYXkoIGltZ3MgKTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTGF6eUxvYWRlciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIGNsYXNzIHRvIGhhbmRsZSBsb2FkaW5nIGltYWdlc1xuICogQHBhcmFtIHtJbWFnZX0gaW1nIC0gSW1hZ2UgZWxlbWVudFxuICogQHBhcmFtIHtGbGlja2l0eX0gZmxpY2tpdHkgLSBGbGlja2l0eSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBMYXp5TG9hZGVyKCBpbWcsIGZsaWNraXR5ICkge1xuICB0aGlzLmltZyA9IGltZztcbiAgdGhpcy5mbGlja2l0eSA9IGZsaWNraXR5O1xuICB0aGlzLmxvYWQoKTtcbn1cblxuTGF6eUxvYWRlci5wcm90b3R5cGUuaGFuZGxlRXZlbnQgPSB1dGlscy5oYW5kbGVFdmVudDtcblxuTGF6eUxvYWRlci5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICAvLyBnZXQgc3JjICYgc3Jjc2V0XG4gIHZhciBzcmMgPSB0aGlzLmltZy5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmxpY2tpdHktbGF6eWxvYWQnKSB8fFxuICAgIHRoaXMuaW1nLmdldEF0dHJpYnV0ZSgnZGF0YS1mbGlja2l0eS1sYXp5bG9hZC1zcmMnKTtcbiAgdmFyIHNyY3NldCA9IHRoaXMuaW1nLmdldEF0dHJpYnV0ZSgnZGF0YS1mbGlja2l0eS1sYXp5bG9hZC1zcmNzZXQnKTtcbiAgLy8gc2V0IHNyYyAmIHNlcnNldFxuICB0aGlzLmltZy5zcmMgPSBzcmM7XG4gIGlmICggc3Jjc2V0ICkge1xuICAgIHRoaXMuaW1nLnNldEF0dHJpYnV0ZSggJ3NyY3NldCcsIHNyY3NldCApO1xuICB9XG4gIC8vIHJlbW92ZSBhdHRyXG4gIHRoaXMuaW1nLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1mbGlja2l0eS1sYXp5bG9hZCcpO1xuICB0aGlzLmltZy5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtZmxpY2tpdHktbGF6eWxvYWQtc3JjJyk7XG4gIHRoaXMuaW1nLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1mbGlja2l0eS1sYXp5bG9hZC1zcmNzZXQnKTtcbn07XG5cbkxhenlMb2FkZXIucHJvdG90eXBlLm9ubG9hZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5jb21wbGV0ZSggZXZlbnQsICdmbGlja2l0eS1sYXp5bG9hZGVkJyApO1xufTtcblxuTGF6eUxvYWRlci5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5jb21wbGV0ZSggZXZlbnQsICdmbGlja2l0eS1sYXp5ZXJyb3InICk7XG59O1xuXG5MYXp5TG9hZGVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uKCBldmVudCwgY2xhc3NOYW1lICkge1xuICAvLyB1bmJpbmQgZXZlbnRzXG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG5cbiAgdmFyIGNlbGwgPSB0aGlzLmZsaWNraXR5LmdldFBhcmVudENlbGwoIHRoaXMuaW1nICk7XG4gIHZhciBjZWxsRWxlbSA9IGNlbGwgJiYgY2VsbC5lbGVtZW50O1xuICB0aGlzLmZsaWNraXR5LmNlbGxTaXplQ2hhbmdlKCBjZWxsRWxlbSApO1xuXG4gIHRoaXMuaW1nLmNsYXNzTGlzdC5hZGQoIGNsYXNzTmFtZSApO1xuICB0aGlzLmZsaWNraXR5LmRpc3BhdGNoRXZlbnQoICdsYXp5TG9hZCcsIGV2ZW50LCBjZWxsRWxlbSApO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbkZsaWNraXR5LkxhenlMb2FkZXIgPSBMYXp5TG9hZGVyO1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0gKSApO1xuIiwiLy8gcGFnZSBkb3RzXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgJy4vZmxpY2tpdHknLFxuICAgICAgJ3VuaXBvaW50ZXIvdW5pcG9pbnRlcicsXG4gICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnLFxuICAgIF0sIGZ1bmN0aW9uKCBGbGlja2l0eSwgVW5pcG9pbnRlciwgdXRpbHMgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBGbGlja2l0eSwgVW5pcG9pbnRlciwgdXRpbHMgKTtcbiAgICB9ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgcmVxdWlyZSgnLi9mbGlja2l0eScpLFxuICAgICAgICByZXF1aXJlKCd1bmlwb2ludGVyJyksXG4gICAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICB3aW5kb3cuRmxpY2tpdHksXG4gICAgICAgIHdpbmRvdy5Vbmlwb2ludGVyLFxuICAgICAgICB3aW5kb3cuZml6enlVSVV0aWxzXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRmxpY2tpdHksIFVuaXBvaW50ZXIsIHV0aWxzICkge1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBQYWdlRG90cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIFBhZ2VEb3RzKCBwYXJlbnQgKSB7XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLl9jcmVhdGUoKTtcbn1cblxuUGFnZURvdHMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVW5pcG9pbnRlci5wcm90b3R5cGUgKTtcblxuUGFnZURvdHMucHJvdG90eXBlLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gY3JlYXRlIGhvbGRlciBlbGVtZW50XG4gIHRoaXMuaG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb2wnKTtcbiAgdGhpcy5ob2xkZXIuY2xhc3NOYW1lID0gJ2ZsaWNraXR5LXBhZ2UtZG90cyc7XG4gIC8vIGNyZWF0ZSBkb3RzLCBhcnJheSBvZiBlbGVtZW50c1xuICB0aGlzLmRvdHMgPSBbXTtcbiAgLy8gZXZlbnRzXG4gIHRoaXMuaGFuZGxlQ2xpY2sgPSB0aGlzLm9uQ2xpY2suYmluZCggdGhpcyApO1xuICB0aGlzLm9uKCAncG9pbnRlckRvd24nLCB0aGlzLnBhcmVudC5jaGlsZFVJUG9pbnRlckRvd24uYmluZCggdGhpcy5wYXJlbnQgKSApO1xufTtcblxuUGFnZURvdHMucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2V0RG90cygpO1xuICB0aGlzLmhvbGRlci5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCB0aGlzLmhhbmRsZUNsaWNrICk7XG4gIHRoaXMuYmluZFN0YXJ0RXZlbnQoIHRoaXMuaG9sZGVyICk7XG4gIC8vIGFkZCB0byBET01cbiAgdGhpcy5wYXJlbnQuZWxlbWVudC5hcHBlbmRDaGlsZCggdGhpcy5ob2xkZXIgKTtcbn07XG5cblBhZ2VEb3RzLnByb3RvdHlwZS5kZWFjdGl2YXRlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaG9sZGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdjbGljaycsIHRoaXMuaGFuZGxlQ2xpY2sgKTtcbiAgdGhpcy51bmJpbmRTdGFydEV2ZW50KCB0aGlzLmhvbGRlciApO1xuICAvLyByZW1vdmUgZnJvbSBET01cbiAgdGhpcy5wYXJlbnQuZWxlbWVudC5yZW1vdmVDaGlsZCggdGhpcy5ob2xkZXIgKTtcbn07XG5cblBhZ2VEb3RzLnByb3RvdHlwZS5zZXREb3RzID0gZnVuY3Rpb24oKSB7XG4gIC8vIGdldCBkaWZmZXJlbmNlIGJldHdlZW4gbnVtYmVyIG9mIHNsaWRlcyBhbmQgbnVtYmVyIG9mIGRvdHNcbiAgdmFyIGRlbHRhID0gdGhpcy5wYXJlbnQuc2xpZGVzLmxlbmd0aCAtIHRoaXMuZG90cy5sZW5ndGg7XG4gIGlmICggZGVsdGEgPiAwICkge1xuICAgIHRoaXMuYWRkRG90cyggZGVsdGEgKTtcbiAgfSBlbHNlIGlmICggZGVsdGEgPCAwICkge1xuICAgIHRoaXMucmVtb3ZlRG90cyggLWRlbHRhICk7XG4gIH1cbn07XG5cblBhZ2VEb3RzLnByb3RvdHlwZS5hZGREb3RzID0gZnVuY3Rpb24oIGNvdW50ICkge1xuICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gIHZhciBuZXdEb3RzID0gW107XG4gIHZhciBsZW5ndGggPSB0aGlzLmRvdHMubGVuZ3RoO1xuICB2YXIgbWF4ID0gbGVuZ3RoICsgY291bnQ7XG5cbiAgZm9yICggdmFyIGkgPSBsZW5ndGg7IGkgPCBtYXg7IGkrKyApIHtcbiAgICB2YXIgZG90ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICBkb3QuY2xhc3NOYW1lID0gJ2RvdCc7XG4gICAgZG90LnNldEF0dHJpYnV0ZSggJ2FyaWEtbGFiZWwnLCAnUGFnZSBkb3QgJyArICggaSArIDEgKSApO1xuICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb3QgKTtcbiAgICBuZXdEb3RzLnB1c2goIGRvdCApO1xuICB9XG5cbiAgdGhpcy5ob2xkZXIuYXBwZW5kQ2hpbGQoIGZyYWdtZW50ICk7XG4gIHRoaXMuZG90cyA9IHRoaXMuZG90cy5jb25jYXQoIG5ld0RvdHMgKTtcbn07XG5cblBhZ2VEb3RzLnByb3RvdHlwZS5yZW1vdmVEb3RzID0gZnVuY3Rpb24oIGNvdW50ICkge1xuICAvLyByZW1vdmUgZnJvbSB0aGlzLmRvdHMgY29sbGVjdGlvblxuICB2YXIgcmVtb3ZlRG90cyA9IHRoaXMuZG90cy5zcGxpY2UoIHRoaXMuZG90cy5sZW5ndGggLSBjb3VudCwgY291bnQgKTtcbiAgLy8gcmVtb3ZlIGZyb20gRE9NXG4gIHJlbW92ZURvdHMuZm9yRWFjaCggZnVuY3Rpb24oIGRvdCApIHtcbiAgICB0aGlzLmhvbGRlci5yZW1vdmVDaGlsZCggZG90ICk7XG4gIH0sIHRoaXMgKTtcbn07XG5cblBhZ2VEb3RzLnByb3RvdHlwZS51cGRhdGVTZWxlY3RlZCA9IGZ1bmN0aW9uKCkge1xuICAvLyByZW1vdmUgc2VsZWN0ZWQgY2xhc3Mgb24gcHJldmlvdXNcbiAgaWYgKCB0aGlzLnNlbGVjdGVkRG90ICkge1xuICAgIHRoaXMuc2VsZWN0ZWREb3QuY2xhc3NOYW1lID0gJ2RvdCc7XG4gICAgdGhpcy5zZWxlY3RlZERvdC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtY3VycmVudCcpO1xuICB9XG4gIC8vIGRvbid0IHByb2NlZWQgaWYgbm8gZG90c1xuICBpZiAoICF0aGlzLmRvdHMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLnNlbGVjdGVkRG90ID0gdGhpcy5kb3RzWyB0aGlzLnBhcmVudC5zZWxlY3RlZEluZGV4IF07XG4gIHRoaXMuc2VsZWN0ZWREb3QuY2xhc3NOYW1lID0gJ2RvdCBpcy1zZWxlY3RlZCc7XG4gIHRoaXMuc2VsZWN0ZWREb3Quc2V0QXR0cmlidXRlKCAnYXJpYS1jdXJyZW50JywgJ3N0ZXAnICk7XG59O1xuXG5QYWdlRG90cy5wcm90b3R5cGUub25UYXAgPSAvLyBvbGQgbWV0aG9kIG5hbWUsIGJhY2t3YXJkcy1jb21wYXRpYmxlXG5QYWdlRG90cy5wcm90b3R5cGUub25DbGljayA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgLy8gb25seSBjYXJlIGFib3V0IGRvdCBjbGlja3NcbiAgaWYgKCB0YXJnZXQubm9kZU5hbWUgIT0gJ0xJJyApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLnBhcmVudC51aUNoYW5nZSgpO1xuICB2YXIgaW5kZXggPSB0aGlzLmRvdHMuaW5kZXhPZiggdGFyZ2V0ICk7XG4gIHRoaXMucGFyZW50LnNlbGVjdCggaW5kZXggKTtcbn07XG5cblBhZ2VEb3RzLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZGVhY3RpdmF0ZSgpO1xuICB0aGlzLmFsbE9mZigpO1xufTtcblxuRmxpY2tpdHkuUGFnZURvdHMgPSBQYWdlRG90cztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRmxpY2tpdHkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudXRpbHMuZXh0ZW5kKCBGbGlja2l0eS5kZWZhdWx0cywge1xuICBwYWdlRG90czogdHJ1ZSxcbn0gKTtcblxuRmxpY2tpdHkuY3JlYXRlTWV0aG9kcy5wdXNoKCdfY3JlYXRlUGFnZURvdHMnKTtcblxudmFyIHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xuXG5wcm90by5fY3JlYXRlUGFnZURvdHMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLnBhZ2VEb3RzICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLnBhZ2VEb3RzID0gbmV3IFBhZ2VEb3RzKCB0aGlzICk7XG4gIC8vIGV2ZW50c1xuICB0aGlzLm9uKCAnYWN0aXZhdGUnLCB0aGlzLmFjdGl2YXRlUGFnZURvdHMgKTtcbiAgdGhpcy5vbiggJ3NlbGVjdCcsIHRoaXMudXBkYXRlU2VsZWN0ZWRQYWdlRG90cyApO1xuICB0aGlzLm9uKCAnY2VsbENoYW5nZScsIHRoaXMudXBkYXRlUGFnZURvdHMgKTtcbiAgdGhpcy5vbiggJ3Jlc2l6ZScsIHRoaXMudXBkYXRlUGFnZURvdHMgKTtcbiAgdGhpcy5vbiggJ2RlYWN0aXZhdGUnLCB0aGlzLmRlYWN0aXZhdGVQYWdlRG90cyApO1xufTtcblxucHJvdG8uYWN0aXZhdGVQYWdlRG90cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBhZ2VEb3RzLmFjdGl2YXRlKCk7XG59O1xuXG5wcm90by51cGRhdGVTZWxlY3RlZFBhZ2VEb3RzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGFnZURvdHMudXBkYXRlU2VsZWN0ZWQoKTtcbn07XG5cbnByb3RvLnVwZGF0ZVBhZ2VEb3RzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGFnZURvdHMuc2V0RG90cygpO1xufTtcblxucHJvdG8uZGVhY3RpdmF0ZVBhZ2VEb3RzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGFnZURvdHMuZGVhY3RpdmF0ZSgpO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbkZsaWNraXR5LlBhZ2VEb3RzID0gUGFnZURvdHM7XG5cbnJldHVybiBGbGlja2l0eTtcblxufSApICk7XG4iLCIvLyBwbGF5ZXIgJiBhdXRvUGxheVxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICdldi1lbWl0dGVyL2V2LWVtaXR0ZXInLFxuICAgICAgJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJyxcbiAgICAgICcuL2ZsaWNraXR5JyxcbiAgICBdLCBmdW5jdGlvbiggRXZFbWl0dGVyLCB1dGlscywgRmxpY2tpdHkgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggRXZFbWl0dGVyLCB1dGlscywgRmxpY2tpdHkgKTtcbiAgICB9ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHJlcXVpcmUoJ2V2LWVtaXR0ZXInKSxcbiAgICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKSxcbiAgICAgICAgcmVxdWlyZSgnLi9mbGlja2l0eScpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdy5FdkVtaXR0ZXIsXG4gICAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHMsXG4gICAgICAgIHdpbmRvdy5GbGlja2l0eVxuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBFdkVtaXR0ZXIsIHV0aWxzLCBGbGlja2l0eSApIHtcblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBQbGF5ZXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gUGxheWVyKCBwYXJlbnQgKSB7XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLnN0YXRlID0gJ3N0b3BwZWQnO1xuICAvLyB2aXNpYmlsaXR5IGNoYW5nZSBldmVudCBoYW5kbGVyXG4gIHRoaXMub25WaXNpYmlsaXR5Q2hhbmdlID0gdGhpcy52aXNpYmlsaXR5Q2hhbmdlLmJpbmQoIHRoaXMgKTtcbiAgdGhpcy5vblZpc2liaWxpdHlQbGF5ID0gdGhpcy52aXNpYmlsaXR5UGxheS5iaW5kKCB0aGlzICk7XG59XG5cblBsYXllci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFdkVtaXR0ZXIucHJvdG90eXBlICk7XG5cbi8vIHN0YXJ0IHBsYXlcblBsYXllci5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMuc3RhdGUgPT0gJ3BsYXlpbmcnICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBkbyBub3QgcGxheSBpZiBwYWdlIGlzIGhpZGRlbiwgc3RhcnQgcGxheWluZyB3aGVuIHBhZ2UgaXMgdmlzaWJsZVxuICB2YXIgaXNQYWdlSGlkZGVuID0gZG9jdW1lbnQuaGlkZGVuO1xuICBpZiAoIGlzUGFnZUhpZGRlbiApIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAndmlzaWJpbGl0eWNoYW5nZScsIHRoaXMub25WaXNpYmlsaXR5UGxheSApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuc3RhdGUgPSAncGxheWluZyc7XG4gIC8vIGxpc3RlbiB0byB2aXNpYmlsaXR5IGNoYW5nZVxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAndmlzaWJpbGl0eWNoYW5nZScsIHRoaXMub25WaXNpYmlsaXR5Q2hhbmdlICk7XG4gIC8vIHN0YXJ0IHRpY2tpbmdcbiAgdGhpcy50aWNrKCk7XG59O1xuXG5QbGF5ZXIucHJvdG90eXBlLnRpY2sgPSBmdW5jdGlvbigpIHtcbiAgLy8gZG8gbm90IHRpY2sgaWYgbm90IHBsYXlpbmdcbiAgaWYgKCB0aGlzLnN0YXRlICE9ICdwbGF5aW5nJyApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdGltZSA9IHRoaXMucGFyZW50Lm9wdGlvbnMuYXV0b1BsYXk7XG4gIC8vIGRlZmF1bHQgdG8gMyBzZWNvbmRzXG4gIHRpbWUgPSB0eXBlb2YgdGltZSA9PSAnbnVtYmVyJyA/IHRpbWUgOiAzMDAwO1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuICAvLyBIQUNLOiByZXNldCB0aWNrcyBpZiBzdG9wcGVkIGFuZCBzdGFydGVkIHdpdGhpbiBpbnRlcnZhbFxuICB0aGlzLmNsZWFyKCk7XG4gIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgIF90aGlzLnBhcmVudC5uZXh0KCB0cnVlICk7XG4gICAgX3RoaXMudGljaygpO1xuICB9LCB0aW1lICk7XG59O1xuXG5QbGF5ZXIucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zdGF0ZSA9ICdzdG9wcGVkJztcbiAgdGhpcy5jbGVhcigpO1xuICAvLyByZW1vdmUgdmlzaWJpbGl0eSBjaGFuZ2UgZXZlbnRcbiAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3Zpc2liaWxpdHljaGFuZ2UnLCB0aGlzLm9uVmlzaWJpbGl0eUNoYW5nZSApO1xufTtcblxuUGxheWVyLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICBjbGVhclRpbWVvdXQoIHRoaXMudGltZW91dCApO1xufTtcblxuUGxheWVyLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMuc3RhdGUgPT0gJ3BsYXlpbmcnICkge1xuICAgIHRoaXMuc3RhdGUgPSAncGF1c2VkJztcbiAgICB0aGlzLmNsZWFyKCk7XG4gIH1cbn07XG5cblBsYXllci5wcm90b3R5cGUudW5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICAvLyByZS1zdGFydCBwbGF5IGlmIHBhdXNlZFxuICBpZiAoIHRoaXMuc3RhdGUgPT0gJ3BhdXNlZCcgKSB7XG4gICAgdGhpcy5wbGF5KCk7XG4gIH1cbn07XG5cbi8vIHBhdXNlIGlmIHBhZ2UgdmlzaWJpbGl0eSBpcyBoaWRkZW4sIHVucGF1c2UgaWYgdmlzaWJsZVxuUGxheWVyLnByb3RvdHlwZS52aXNpYmlsaXR5Q2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpc1BhZ2VIaWRkZW4gPSBkb2N1bWVudC5oaWRkZW47XG4gIHRoaXNbIGlzUGFnZUhpZGRlbiA/ICdwYXVzZScgOiAndW5wYXVzZScgXSgpO1xufTtcblxuUGxheWVyLnByb3RvdHlwZS52aXNpYmlsaXR5UGxheSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBsYXkoKTtcbiAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3Zpc2liaWxpdHljaGFuZ2UnLCB0aGlzLm9uVmlzaWJpbGl0eVBsYXkgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEZsaWNraXR5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnV0aWxzLmV4dGVuZCggRmxpY2tpdHkuZGVmYXVsdHMsIHtcbiAgcGF1c2VBdXRvUGxheU9uSG92ZXI6IHRydWUsXG59ICk7XG5cbkZsaWNraXR5LmNyZWF0ZU1ldGhvZHMucHVzaCgnX2NyZWF0ZVBsYXllcicpO1xudmFyIHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xuXG5wcm90by5fY3JlYXRlUGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyID0gbmV3IFBsYXllciggdGhpcyApO1xuXG4gIHRoaXMub24oICdhY3RpdmF0ZScsIHRoaXMuYWN0aXZhdGVQbGF5ZXIgKTtcbiAgdGhpcy5vbiggJ3VpQ2hhbmdlJywgdGhpcy5zdG9wUGxheWVyICk7XG4gIHRoaXMub24oICdwb2ludGVyRG93bicsIHRoaXMuc3RvcFBsYXllciApO1xuICB0aGlzLm9uKCAnZGVhY3RpdmF0ZScsIHRoaXMuZGVhY3RpdmF0ZVBsYXllciApO1xufTtcblxucHJvdG8uYWN0aXZhdGVQbGF5ZXIgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLmF1dG9QbGF5ICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLnBsYXllci5wbGF5KCk7XG4gIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAnbW91c2VlbnRlcicsIHRoaXMgKTtcbn07XG5cbi8vIFBsYXllciBBUEksIGRvbid0IGhhdGUgdGhlIC4uLiB0aGFua3MgSSBrbm93IHdoZXJlIHRoZSBkb29yIGlzXG5cbnByb3RvLnBsYXlQbGF5ZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wbGF5ZXIucGxheSgpO1xufTtcblxucHJvdG8uc3RvcFBsYXllciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBsYXllci5zdG9wKCk7XG59O1xuXG5wcm90by5wYXVzZVBsYXllciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBsYXllci5wYXVzZSgpO1xufTtcblxucHJvdG8udW5wYXVzZVBsYXllciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBsYXllci51bnBhdXNlKCk7XG59O1xuXG5wcm90by5kZWFjdGl2YXRlUGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnN0b3AoKTtcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdtb3VzZWVudGVyJywgdGhpcyApO1xufTtcblxuLy8gLS0tLS0gbW91c2VlbnRlci9sZWF2ZSAtLS0tLSAvL1xuXG4vLyBwYXVzZSBhdXRvLXBsYXkgb24gaG92ZXJcbnByb3RvLm9ubW91c2VlbnRlciA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLm9wdGlvbnMucGF1c2VBdXRvUGxheU9uSG92ZXIgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMucGxheWVyLnBhdXNlKCk7XG4gIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAnbW91c2VsZWF2ZScsIHRoaXMgKTtcbn07XG5cbi8vIHJlc3VtZSBhdXRvLXBsYXkgb24gaG92ZXIgb2ZmXG5wcm90by5vbm1vdXNlbGVhdmUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wbGF5ZXIudW5wYXVzZSgpO1xuICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ21vdXNlbGVhdmUnLCB0aGlzICk7XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxuRmxpY2tpdHkuUGxheWVyID0gUGxheWVyO1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0gKSApO1xuIiwiLy8gcHJldi9uZXh0IGJ1dHRvbnNcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAnLi9mbGlja2l0eScsXG4gICAgICAndW5pcG9pbnRlci91bmlwb2ludGVyJyxcbiAgICAgICdmaXp6eS11aS11dGlscy91dGlscycsXG4gICAgXSwgZnVuY3Rpb24oIEZsaWNraXR5LCBVbmlwb2ludGVyLCB1dGlscyApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIEZsaWNraXR5LCBVbmlwb2ludGVyLCB1dGlscyApO1xuICAgIH0gKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICByZXF1aXJlKCcuL2ZsaWNraXR5JyksXG4gICAgICAgIHJlcXVpcmUoJ3VuaXBvaW50ZXInKSxcbiAgICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBmYWN0b3J5KFxuICAgICAgICB3aW5kb3csXG4gICAgICAgIHdpbmRvdy5GbGlja2l0eSxcbiAgICAgICAgd2luZG93LlVuaXBvaW50ZXIsXG4gICAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHNcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBGbGlja2l0eSwgVW5pcG9pbnRlciwgdXRpbHMgKSB7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBzdmdVUkkgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBQcmV2TmV4dEJ1dHRvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBQcmV2TmV4dEJ1dHRvbiggZGlyZWN0aW9uLCBwYXJlbnQgKSB7XG4gIHRoaXMuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5fY3JlYXRlKCk7XG59XG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFVuaXBvaW50ZXIucHJvdG90eXBlICk7XG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5fY3JlYXRlID0gZnVuY3Rpb24oKSB7XG4gIC8vIHByb3BlcnRpZXNcbiAgdGhpcy5pc0VuYWJsZWQgPSB0cnVlO1xuICB0aGlzLmlzUHJldmlvdXMgPSB0aGlzLmRpcmVjdGlvbiA9PSAtMTtcbiAgdmFyIGxlZnREaXJlY3Rpb24gPSB0aGlzLnBhcmVudC5vcHRpb25zLnJpZ2h0VG9MZWZ0ID8gMSA6IC0xO1xuICB0aGlzLmlzTGVmdCA9IHRoaXMuZGlyZWN0aW9uID09IGxlZnREaXJlY3Rpb247XG5cbiAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgZWxlbWVudC5jbGFzc05hbWUgPSAnZmxpY2tpdHktYnV0dG9uIGZsaWNraXR5LXByZXYtbmV4dC1idXR0b24nO1xuICBlbGVtZW50LmNsYXNzTmFtZSArPSB0aGlzLmlzUHJldmlvdXMgPyAnIHByZXZpb3VzJyA6ICcgbmV4dCc7XG4gIC8vIHByZXZlbnQgYnV0dG9uIGZyb20gc3VibWl0dGluZyBmb3JtIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzEwODM2MDc2LzE4MjE4M1xuICBlbGVtZW50LnNldEF0dHJpYnV0ZSggJ3R5cGUnLCAnYnV0dG9uJyApO1xuICAvLyBpbml0IGFzIGRpc2FibGVkXG4gIHRoaXMuZGlzYWJsZSgpO1xuXG4gIGVsZW1lbnQuc2V0QXR0cmlidXRlKCAnYXJpYS1sYWJlbCcsIHRoaXMuaXNQcmV2aW91cyA/ICdQcmV2aW91cycgOiAnTmV4dCcgKTtcblxuICAvLyBjcmVhdGUgYXJyb3dcbiAgdmFyIHN2ZyA9IHRoaXMuY3JlYXRlU1ZHKCk7XG4gIGVsZW1lbnQuYXBwZW5kQ2hpbGQoIHN2ZyApO1xuICAvLyBldmVudHNcbiAgdGhpcy5wYXJlbnQub24oICdzZWxlY3QnLCB0aGlzLnVwZGF0ZS5iaW5kKCB0aGlzICkgKTtcbiAgdGhpcy5vbiggJ3BvaW50ZXJEb3duJywgdGhpcy5wYXJlbnQuY2hpbGRVSVBvaW50ZXJEb3duLmJpbmQoIHRoaXMucGFyZW50ICkgKTtcbn07XG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmJpbmRTdGFydEV2ZW50KCB0aGlzLmVsZW1lbnQgKTtcbiAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsIHRoaXMgKTtcbiAgLy8gYWRkIHRvIERPTVxuICB0aGlzLnBhcmVudC5lbGVtZW50LmFwcGVuZENoaWxkKCB0aGlzLmVsZW1lbnQgKTtcbn07XG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5kZWFjdGl2YXRlID0gZnVuY3Rpb24oKSB7XG4gIC8vIHJlbW92ZSBmcm9tIERPTVxuICB0aGlzLnBhcmVudC5lbGVtZW50LnJlbW92ZUNoaWxkKCB0aGlzLmVsZW1lbnQgKTtcbiAgLy8gY2xpY2sgZXZlbnRzXG4gIHRoaXMudW5iaW5kU3RhcnRFdmVudCggdGhpcy5lbGVtZW50ICk7XG4gIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnY2xpY2snLCB0aGlzICk7XG59O1xuXG5QcmV2TmV4dEJ1dHRvbi5wcm90b3R5cGUuY3JlYXRlU1ZHID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoIHN2Z1VSSSwgJ3N2ZycgKTtcbiAgc3ZnLnNldEF0dHJpYnV0ZSggJ2NsYXNzJywgJ2ZsaWNraXR5LWJ1dHRvbi1pY29uJyApO1xuICBzdmcuc2V0QXR0cmlidXRlKCAndmlld0JveCcsICcwIDAgMTAwIDEwMCcgKTtcbiAgdmFyIHBhdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoIHN2Z1VSSSwgJ3BhdGgnICk7XG4gIHZhciBwYXRoTW92ZW1lbnRzID0gZ2V0QXJyb3dNb3ZlbWVudHMoIHRoaXMucGFyZW50Lm9wdGlvbnMuYXJyb3dTaGFwZSApO1xuICBwYXRoLnNldEF0dHJpYnV0ZSggJ2QnLCBwYXRoTW92ZW1lbnRzICk7XG4gIHBhdGguc2V0QXR0cmlidXRlKCAnY2xhc3MnLCAnYXJyb3cnICk7XG4gIC8vIHJvdGF0ZSBhcnJvd1xuICBpZiAoICF0aGlzLmlzTGVmdCApIHtcbiAgICBwYXRoLnNldEF0dHJpYnV0ZSggJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoMTAwLCAxMDApIHJvdGF0ZSgxODApICcgKTtcbiAgfVxuICBzdmcuYXBwZW5kQ2hpbGQoIHBhdGggKTtcbiAgcmV0dXJuIHN2Zztcbn07XG5cbi8vIGdldCBTVkcgcGF0aCBtb3ZtZW1lbnRcbmZ1bmN0aW9uIGdldEFycm93TW92ZW1lbnRzKCBzaGFwZSApIHtcbiAgLy8gdXNlIHNoYXBlIGFzIG1vdmVtZW50IGlmIHN0cmluZ1xuICBpZiAoIHR5cGVvZiBzaGFwZSA9PSAnc3RyaW5nJyApIHtcbiAgICByZXR1cm4gc2hhcGU7XG4gIH1cbiAgLy8gY3JlYXRlIG1vdmVtZW50IHN0cmluZ1xuICByZXR1cm4gJ00gJyArIHNoYXBlLngwICsgJyw1MCcgK1xuICAgICcgTCAnICsgc2hhcGUueDEgKyAnLCcgKyAoIHNoYXBlLnkxICsgNTAgKSArXG4gICAgJyBMICcgKyBzaGFwZS54MiArICcsJyArICggc2hhcGUueTIgKyA1MCApICtcbiAgICAnIEwgJyArIHNoYXBlLngzICsgJyw1MCAnICtcbiAgICAnIEwgJyArIHNoYXBlLngyICsgJywnICsgKCA1MCAtIHNoYXBlLnkyICkgK1xuICAgICcgTCAnICsgc2hhcGUueDEgKyAnLCcgKyAoIDUwIC0gc2hhcGUueTEgKSArXG4gICAgJyBaJztcbn1cblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gdXRpbHMuaGFuZGxlRXZlbnQ7XG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5vbmNsaWNrID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMuaXNFbmFibGVkICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLnBhcmVudC51aUNoYW5nZSgpO1xuICB2YXIgbWV0aG9kID0gdGhpcy5pc1ByZXZpb3VzID8gJ3ByZXZpb3VzJyA6ICduZXh0JztcbiAgdGhpcy5wYXJlbnRbIG1ldGhvZCBdKCk7XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMuaXNFbmFibGVkICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmVsZW1lbnQuZGlzYWJsZWQgPSBmYWxzZTtcbiAgdGhpcy5pc0VuYWJsZWQgPSB0cnVlO1xufTtcblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5pc0VuYWJsZWQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuZWxlbWVudC5kaXNhYmxlZCA9IHRydWU7XG4gIHRoaXMuaXNFbmFibGVkID0gZmFsc2U7XG59O1xuXG5QcmV2TmV4dEJ1dHRvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gIC8vIGluZGV4IG9mIGZpcnN0IG9yIGxhc3Qgc2xpZGUsIGlmIHByZXZpb3VzIG9yIG5leHRcbiAgdmFyIHNsaWRlcyA9IHRoaXMucGFyZW50LnNsaWRlcztcbiAgLy8gZW5hYmxlIGlzIHdyYXBBcm91bmQgYW5kIGF0IGxlYXN0IDIgc2xpZGVzXG4gIGlmICggdGhpcy5wYXJlbnQub3B0aW9ucy53cmFwQXJvdW5kICYmIHNsaWRlcy5sZW5ndGggPiAxICkge1xuICAgIHRoaXMuZW5hYmxlKCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBzbGlkZXMubGVuZ3RoID8gc2xpZGVzLmxlbmd0aCAtIDEgOiAwO1xuICB2YXIgYm91bmRJbmRleCA9IHRoaXMuaXNQcmV2aW91cyA/IDAgOiBsYXN0SW5kZXg7XG4gIHZhciBtZXRob2QgPSB0aGlzLnBhcmVudC5zZWxlY3RlZEluZGV4ID09IGJvdW5kSW5kZXggPyAnZGlzYWJsZScgOiAnZW5hYmxlJztcbiAgdGhpc1sgbWV0aG9kIF0oKTtcbn07XG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZGVhY3RpdmF0ZSgpO1xuICB0aGlzLmFsbE9mZigpO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRmxpY2tpdHkgcHJvdG90eXBlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnV0aWxzLmV4dGVuZCggRmxpY2tpdHkuZGVmYXVsdHMsIHtcbiAgcHJldk5leHRCdXR0b25zOiB0cnVlLFxuICBhcnJvd1NoYXBlOiB7XG4gICAgeDA6IDEwLFxuICAgIHgxOiA2MCwgeTE6IDUwLFxuICAgIHgyOiA3MCwgeTI6IDQwLFxuICAgIHgzOiAzMCxcbiAgfSxcbn0gKTtcblxuRmxpY2tpdHkuY3JlYXRlTWV0aG9kcy5wdXNoKCdfY3JlYXRlUHJldk5leHRCdXR0b25zJyk7XG52YXIgcHJvdG8gPSBGbGlja2l0eS5wcm90b3R5cGU7XG5cbnByb3RvLl9jcmVhdGVQcmV2TmV4dEJ1dHRvbnMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLnByZXZOZXh0QnV0dG9ucyApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLnByZXZCdXR0b24gPSBuZXcgUHJldk5leHRCdXR0b24oIC0xLCB0aGlzICk7XG4gIHRoaXMubmV4dEJ1dHRvbiA9IG5ldyBQcmV2TmV4dEJ1dHRvbiggMSwgdGhpcyApO1xuXG4gIHRoaXMub24oICdhY3RpdmF0ZScsIHRoaXMuYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMgKTtcbn07XG5cbnByb3RvLmFjdGl2YXRlUHJldk5leHRCdXR0b25zID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucHJldkJ1dHRvbi5hY3RpdmF0ZSgpO1xuICB0aGlzLm5leHRCdXR0b24uYWN0aXZhdGUoKTtcbiAgdGhpcy5vbiggJ2RlYWN0aXZhdGUnLCB0aGlzLmRlYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMgKTtcbn07XG5cbnByb3RvLmRlYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wcmV2QnV0dG9uLmRlYWN0aXZhdGUoKTtcbiAgdGhpcy5uZXh0QnV0dG9uLmRlYWN0aXZhdGUoKTtcbiAgdGhpcy5vZmYoICdkZWFjdGl2YXRlJywgdGhpcy5kZWFjdGl2YXRlUHJldk5leHRCdXR0b25zICk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuRmxpY2tpdHkuUHJldk5leHRCdXR0b24gPSBQcmV2TmV4dEJ1dHRvbjtcblxucmV0dXJuIEZsaWNraXR5O1xuXG59ICkgKTtcbiIsIi8vIHNsaWRlXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggZmFjdG9yeSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuRmxpY2tpdHkgPSB3aW5kb3cuRmxpY2tpdHkgfHwge307XG4gICAgd2luZG93LkZsaWNraXR5LlNsaWRlID0gZmFjdG9yeSgpO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSgpIHtcbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gU2xpZGUoIHBhcmVudCApIHtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuaXNPcmlnaW5MZWZ0ID0gcGFyZW50Lm9yaWdpblNpZGUgPT0gJ2xlZnQnO1xuICB0aGlzLmNlbGxzID0gW107XG4gIHRoaXMub3V0ZXJXaWR0aCA9IDA7XG4gIHRoaXMuaGVpZ2h0ID0gMDtcbn1cblxudmFyIHByb3RvID0gU2xpZGUucHJvdG90eXBlO1xuXG5wcm90by5hZGRDZWxsID0gZnVuY3Rpb24oIGNlbGwgKSB7XG4gIHRoaXMuY2VsbHMucHVzaCggY2VsbCApO1xuICB0aGlzLm91dGVyV2lkdGggKz0gY2VsbC5zaXplLm91dGVyV2lkdGg7XG4gIHRoaXMuaGVpZ2h0ID0gTWF0aC5tYXgoIGNlbGwuc2l6ZS5vdXRlckhlaWdodCwgdGhpcy5oZWlnaHQgKTtcbiAgLy8gZmlyc3QgY2VsbCBzdHVmZlxuICBpZiAoIHRoaXMuY2VsbHMubGVuZ3RoID09IDEgKSB7XG4gICAgdGhpcy54ID0gY2VsbC54OyAvLyB4IGNvbWVzIGZyb20gZmlyc3QgY2VsbFxuICAgIHZhciBiZWdpbk1hcmdpbiA9IHRoaXMuaXNPcmlnaW5MZWZ0ID8gJ21hcmdpbkxlZnQnIDogJ21hcmdpblJpZ2h0JztcbiAgICB0aGlzLmZpcnN0TWFyZ2luID0gY2VsbC5zaXplWyBiZWdpbk1hcmdpbiBdO1xuICB9XG59O1xuXG5wcm90by51cGRhdGVUYXJnZXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGVuZE1hcmdpbiA9IHRoaXMuaXNPcmlnaW5MZWZ0ID8gJ21hcmdpblJpZ2h0JyA6ICdtYXJnaW5MZWZ0JztcbiAgdmFyIGxhc3RDZWxsID0gdGhpcy5nZXRMYXN0Q2VsbCgpO1xuICB2YXIgbGFzdE1hcmdpbiA9IGxhc3RDZWxsID8gbGFzdENlbGwuc2l6ZVsgZW5kTWFyZ2luIF0gOiAwO1xuICB2YXIgc2xpZGVXaWR0aCA9IHRoaXMub3V0ZXJXaWR0aCAtICggdGhpcy5maXJzdE1hcmdpbiArIGxhc3RNYXJnaW4gKTtcbiAgdGhpcy50YXJnZXQgPSB0aGlzLnggKyB0aGlzLmZpcnN0TWFyZ2luICsgc2xpZGVXaWR0aCAqIHRoaXMucGFyZW50LmNlbGxBbGlnbjtcbn07XG5cbnByb3RvLmdldExhc3RDZWxsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmNlbGxzWyB0aGlzLmNlbGxzLmxlbmd0aCAtIDEgXTtcbn07XG5cbnByb3RvLnNlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNlbGxzLmZvckVhY2goIGZ1bmN0aW9uKCBjZWxsICkge1xuICAgIGNlbGwuc2VsZWN0KCk7XG4gIH0gKTtcbn07XG5cbnByb3RvLnVuc2VsZWN0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY2VsbHMuZm9yRWFjaCggZnVuY3Rpb24oIGNlbGwgKSB7XG4gICAgY2VsbC51bnNlbGVjdCgpO1xuICB9ICk7XG59O1xuXG5wcm90by5nZXRDZWxsRWxlbWVudHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY2VsbHMubWFwKCBmdW5jdGlvbiggY2VsbCApIHtcbiAgICByZXR1cm4gY2VsbC5lbGVtZW50O1xuICB9ICk7XG59O1xuXG5yZXR1cm4gU2xpZGU7XG5cbn0gKSApO1xuIiwiLyohXG4gKiBnZXRTaXplIHYyLjAuM1xuICogbWVhc3VyZSBzaXplIG9mIGVsZW1lbnRzXG4gKiBNSVQgbGljZW5zZVxuICovXG5cbi8qIGpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUgKi9cbi8qIGdsb2JhbHMgY29uc29sZTogZmFsc2UgKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKiBnbG9iYWxzIGRlZmluZSwgbW9kdWxlICovXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5nZXRTaXplID0gZmFjdG9yeSgpO1xuICB9XG5cbn0pKCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZ2V0IGEgbnVtYmVyIGZyb20gYSBzdHJpbmcsIG5vdCBhIHBlcmNlbnRhZ2VcbmZ1bmN0aW9uIGdldFN0eWxlU2l6ZSggdmFsdWUgKSB7XG4gIHZhciBudW0gPSBwYXJzZUZsb2F0KCB2YWx1ZSApO1xuICAvLyBub3QgYSBwZXJjZW50IGxpa2UgJzEwMCUnLCBhbmQgYSBudW1iZXJcbiAgdmFyIGlzVmFsaWQgPSB2YWx1ZS5pbmRleE9mKCclJykgPT0gLTEgJiYgIWlzTmFOKCBudW0gKTtcbiAgcmV0dXJuIGlzVmFsaWQgJiYgbnVtO1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cblxudmFyIGxvZ0Vycm9yID0gdHlwZW9mIGNvbnNvbGUgPT0gJ3VuZGVmaW5lZCcgPyBub29wIDpcbiAgZnVuY3Rpb24oIG1lc3NhZ2UgKSB7XG4gICAgY29uc29sZS5lcnJvciggbWVzc2FnZSApO1xuICB9O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtZWFzdXJlbWVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudmFyIG1lYXN1cmVtZW50cyA9IFtcbiAgJ3BhZGRpbmdMZWZ0JyxcbiAgJ3BhZGRpbmdSaWdodCcsXG4gICdwYWRkaW5nVG9wJyxcbiAgJ3BhZGRpbmdCb3R0b20nLFxuICAnbWFyZ2luTGVmdCcsXG4gICdtYXJnaW5SaWdodCcsXG4gICdtYXJnaW5Ub3AnLFxuICAnbWFyZ2luQm90dG9tJyxcbiAgJ2JvcmRlckxlZnRXaWR0aCcsXG4gICdib3JkZXJSaWdodFdpZHRoJyxcbiAgJ2JvcmRlclRvcFdpZHRoJyxcbiAgJ2JvcmRlckJvdHRvbVdpZHRoJ1xuXTtcblxudmFyIG1lYXN1cmVtZW50c0xlbmd0aCA9IG1lYXN1cmVtZW50cy5sZW5ndGg7XG5cbmZ1bmN0aW9uIGdldFplcm9TaXplKCkge1xuICB2YXIgc2l6ZSA9IHtcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDAsXG4gICAgaW5uZXJXaWR0aDogMCxcbiAgICBpbm5lckhlaWdodDogMCxcbiAgICBvdXRlcldpZHRoOiAwLFxuICAgIG91dGVySGVpZ2h0OiAwXG4gIH07XG4gIGZvciAoIHZhciBpPTA7IGkgPCBtZWFzdXJlbWVudHNMZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudHNbaV07XG4gICAgc2l6ZVsgbWVhc3VyZW1lbnQgXSA9IDA7XG4gIH1cbiAgcmV0dXJuIHNpemU7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGdldFN0eWxlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogZ2V0U3R5bGUsIGdldCBzdHlsZSBvZiBlbGVtZW50LCBjaGVjayBmb3IgRmlyZWZveCBidWdcbiAqIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xuICovXG5mdW5jdGlvbiBnZXRTdHlsZSggZWxlbSApIHtcbiAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuICBpZiAoICFzdHlsZSApIHtcbiAgICBsb2dFcnJvciggJ1N0eWxlIHJldHVybmVkICcgKyBzdHlsZSArXG4gICAgICAnLiBBcmUgeW91IHJ1bm5pbmcgdGhpcyBjb2RlIGluIGEgaGlkZGVuIGlmcmFtZSBvbiBGaXJlZm94PyAnICtcbiAgICAgICdTZWUgaHR0cHM6Ly9iaXQubHkvZ2V0c2l6ZWJ1ZzEnICk7XG4gIH1cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBzZXR1cCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG52YXIgaXNTZXR1cCA9IGZhbHNlO1xuXG52YXIgaXNCb3hTaXplT3V0ZXI7XG5cbi8qKlxuICogc2V0dXBcbiAqIGNoZWNrIGlzQm94U2l6ZXJPdXRlclxuICogZG8gb24gZmlyc3QgZ2V0U2l6ZSgpIHJhdGhlciB0aGFuIG9uIHBhZ2UgbG9hZCBmb3IgRmlyZWZveCBidWdcbiAqL1xuZnVuY3Rpb24gc2V0dXAoKSB7XG4gIC8vIHNldHVwIG9uY2VcbiAgaWYgKCBpc1NldHVwICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpc1NldHVwID0gdHJ1ZTtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBib3ggc2l6aW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgLyoqXG4gICAqIENocm9tZSAmIFNhZmFyaSBtZWFzdXJlIHRoZSBvdXRlci13aWR0aCBvbiBzdHlsZS53aWR0aCBvbiBib3JkZXItYm94IGVsZW1zXG4gICAqIElFMTEgJiBGaXJlZm94PDI5IG1lYXN1cmVzIHRoZSBpbm5lci13aWR0aFxuICAgKi9cbiAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuc3R5bGUud2lkdGggPSAnMjAwcHgnO1xuICBkaXYuc3R5bGUucGFkZGluZyA9ICcxcHggMnB4IDNweCA0cHgnO1xuICBkaXYuc3R5bGUuYm9yZGVyU3R5bGUgPSAnc29saWQnO1xuICBkaXYuc3R5bGUuYm9yZGVyV2lkdGggPSAnMXB4IDJweCAzcHggNHB4JztcbiAgZGl2LnN0eWxlLmJveFNpemluZyA9ICdib3JkZXItYm94JztcblxuICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHkgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICBib2R5LmFwcGVuZENoaWxkKCBkaXYgKTtcbiAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoIGRpdiApO1xuICAvLyByb3VuZCB2YWx1ZSBmb3IgYnJvd3NlciB6b29tLiBkZXNhbmRyby9tYXNvbnJ5IzkyOFxuICBpc0JveFNpemVPdXRlciA9IE1hdGgucm91bmQoIGdldFN0eWxlU2l6ZSggc3R5bGUud2lkdGggKSApID09IDIwMDtcbiAgZ2V0U2l6ZS5pc0JveFNpemVPdXRlciA9IGlzQm94U2l6ZU91dGVyO1xuXG4gIGJvZHkucmVtb3ZlQ2hpbGQoIGRpdiApO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBnZXRTaXplIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIGdldFNpemUoIGVsZW0gKSB7XG4gIHNldHVwKCk7XG5cbiAgLy8gdXNlIHF1ZXJ5U2VsZXRvciBpZiBlbGVtIGlzIHN0cmluZ1xuICBpZiAoIHR5cGVvZiBlbGVtID09ICdzdHJpbmcnICkge1xuICAgIGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBlbGVtICk7XG4gIH1cblxuICAvLyBkbyBub3QgcHJvY2VlZCBvbiBub24tb2JqZWN0c1xuICBpZiAoICFlbGVtIHx8IHR5cGVvZiBlbGVtICE9ICdvYmplY3QnIHx8ICFlbGVtLm5vZGVUeXBlICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzdHlsZSA9IGdldFN0eWxlKCBlbGVtICk7XG5cbiAgLy8gaWYgaGlkZGVuLCBldmVyeXRoaW5nIGlzIDBcbiAgaWYgKCBzdHlsZS5kaXNwbGF5ID09ICdub25lJyApIHtcbiAgICByZXR1cm4gZ2V0WmVyb1NpemUoKTtcbiAgfVxuXG4gIHZhciBzaXplID0ge307XG4gIHNpemUud2lkdGggPSBlbGVtLm9mZnNldFdpZHRoO1xuICBzaXplLmhlaWdodCA9IGVsZW0ub2Zmc2V0SGVpZ2h0O1xuXG4gIHZhciBpc0JvcmRlckJveCA9IHNpemUuaXNCb3JkZXJCb3ggPSBzdHlsZS5ib3hTaXppbmcgPT0gJ2JvcmRlci1ib3gnO1xuXG4gIC8vIGdldCBhbGwgbWVhc3VyZW1lbnRzXG4gIGZvciAoIHZhciBpPTA7IGkgPCBtZWFzdXJlbWVudHNMZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudHNbaV07XG4gICAgdmFyIHZhbHVlID0gc3R5bGVbIG1lYXN1cmVtZW50IF07XG4gICAgdmFyIG51bSA9IHBhcnNlRmxvYXQoIHZhbHVlICk7XG4gICAgLy8gYW55ICdhdXRvJywgJ21lZGl1bScgdmFsdWUgd2lsbCBiZSAwXG4gICAgc2l6ZVsgbWVhc3VyZW1lbnQgXSA9ICFpc05hTiggbnVtICkgPyBudW0gOiAwO1xuICB9XG5cbiAgdmFyIHBhZGRpbmdXaWR0aCA9IHNpemUucGFkZGluZ0xlZnQgKyBzaXplLnBhZGRpbmdSaWdodDtcbiAgdmFyIHBhZGRpbmdIZWlnaHQgPSBzaXplLnBhZGRpbmdUb3AgKyBzaXplLnBhZGRpbmdCb3R0b207XG4gIHZhciBtYXJnaW5XaWR0aCA9IHNpemUubWFyZ2luTGVmdCArIHNpemUubWFyZ2luUmlnaHQ7XG4gIHZhciBtYXJnaW5IZWlnaHQgPSBzaXplLm1hcmdpblRvcCArIHNpemUubWFyZ2luQm90dG9tO1xuICB2YXIgYm9yZGVyV2lkdGggPSBzaXplLmJvcmRlckxlZnRXaWR0aCArIHNpemUuYm9yZGVyUmlnaHRXaWR0aDtcbiAgdmFyIGJvcmRlckhlaWdodCA9IHNpemUuYm9yZGVyVG9wV2lkdGggKyBzaXplLmJvcmRlckJvdHRvbVdpZHRoO1xuXG4gIHZhciBpc0JvcmRlckJveFNpemVPdXRlciA9IGlzQm9yZGVyQm94ICYmIGlzQm94U2l6ZU91dGVyO1xuXG4gIC8vIG92ZXJ3cml0ZSB3aWR0aCBhbmQgaGVpZ2h0IGlmIHdlIGNhbiBnZXQgaXQgZnJvbSBzdHlsZVxuICB2YXIgc3R5bGVXaWR0aCA9IGdldFN0eWxlU2l6ZSggc3R5bGUud2lkdGggKTtcbiAgaWYgKCBzdHlsZVdpZHRoICE9PSBmYWxzZSApIHtcbiAgICBzaXplLndpZHRoID0gc3R5bGVXaWR0aCArXG4gICAgICAvLyBhZGQgcGFkZGluZyBhbmQgYm9yZGVyIHVubGVzcyBpdCdzIGFscmVhZHkgaW5jbHVkaW5nIGl0XG4gICAgICAoIGlzQm9yZGVyQm94U2l6ZU91dGVyID8gMCA6IHBhZGRpbmdXaWR0aCArIGJvcmRlcldpZHRoICk7XG4gIH1cblxuICB2YXIgc3R5bGVIZWlnaHQgPSBnZXRTdHlsZVNpemUoIHN0eWxlLmhlaWdodCApO1xuICBpZiAoIHN0eWxlSGVpZ2h0ICE9PSBmYWxzZSApIHtcbiAgICBzaXplLmhlaWdodCA9IHN0eWxlSGVpZ2h0ICtcbiAgICAgIC8vIGFkZCBwYWRkaW5nIGFuZCBib3JkZXIgdW5sZXNzIGl0J3MgYWxyZWFkeSBpbmNsdWRpbmcgaXRcbiAgICAgICggaXNCb3JkZXJCb3hTaXplT3V0ZXIgPyAwIDogcGFkZGluZ0hlaWdodCArIGJvcmRlckhlaWdodCApO1xuICB9XG5cbiAgc2l6ZS5pbm5lcldpZHRoID0gc2l6ZS53aWR0aCAtICggcGFkZGluZ1dpZHRoICsgYm9yZGVyV2lkdGggKTtcbiAgc2l6ZS5pbm5lckhlaWdodCA9IHNpemUuaGVpZ2h0IC0gKCBwYWRkaW5nSGVpZ2h0ICsgYm9yZGVySGVpZ2h0ICk7XG5cbiAgc2l6ZS5vdXRlcldpZHRoID0gc2l6ZS53aWR0aCArIG1hcmdpbldpZHRoO1xuICBzaXplLm91dGVySGVpZ2h0ID0gc2l6ZS5oZWlnaHQgKyBtYXJnaW5IZWlnaHQ7XG5cbiAgcmV0dXJuIHNpemU7XG59XG5cbnJldHVybiBnZXRTaXplO1xuXG59KTtcbiIsIi8qIVxuICogaW1hZ2VzTG9hZGVkIHY0LjEuNFxuICogSmF2YVNjcmlwdCBpcyBhbGwgbGlrZSBcIllvdSBpbWFnZXMgYXJlIGRvbmUgeWV0IG9yIHdoYXQ/XCJcbiAqIE1JVCBMaWNlbnNlXG4gKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkgeyAndXNlIHN0cmljdCc7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuXG4gIC8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIG1vZHVsZTogZmFsc2UsIHJlcXVpcmU6IGZhbHNlICovXG5cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICdldi1lbWl0dGVyL2V2LWVtaXR0ZXInXG4gICAgXSwgZnVuY3Rpb24oIEV2RW1pdHRlciApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIEV2RW1pdHRlciApO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnZXYtZW1pdHRlcicpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5pbWFnZXNMb2FkZWQgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LkV2RW1pdHRlclxuICAgICk7XG4gIH1cblxufSkoIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcyxcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIGZhY3RvcnkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBFdkVtaXR0ZXIgKSB7XG5cbid1c2Ugc3RyaWN0JztcblxudmFyICQgPSB3aW5kb3cualF1ZXJ5O1xudmFyIGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaGVscGVycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyBleHRlbmQgb2JqZWN0c1xuZnVuY3Rpb24gZXh0ZW5kKCBhLCBiICkge1xuICBmb3IgKCB2YXIgcHJvcCBpbiBiICkge1xuICAgIGFbIHByb3AgXSA9IGJbIHByb3AgXTtcbiAgfVxuICByZXR1cm4gYTtcbn1cblxudmFyIGFycmF5U2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbi8vIHR1cm4gZWxlbWVudCBvciBub2RlTGlzdCBpbnRvIGFuIGFycmF5XG5mdW5jdGlvbiBtYWtlQXJyYXkoIG9iaiApIHtcbiAgaWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcbiAgICAvLyB1c2Ugb2JqZWN0IGlmIGFscmVhZHkgYW4gYXJyYXlcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgdmFyIGlzQXJyYXlMaWtlID0gdHlwZW9mIG9iaiA9PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqLmxlbmd0aCA9PSAnbnVtYmVyJztcbiAgaWYgKCBpc0FycmF5TGlrZSApIHtcbiAgICAvLyBjb252ZXJ0IG5vZGVMaXN0IHRvIGFycmF5XG4gICAgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCggb2JqICk7XG4gIH1cblxuICAvLyBhcnJheSBvZiBzaW5nbGUgaW5kZXhcbiAgcmV0dXJuIFsgb2JqIF07XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGltYWdlc0xvYWRlZCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXksIEVsZW1lbnQsIE5vZGVMaXN0LCBTdHJpbmd9IGVsZW1cbiAqIEBwYXJhbSB7T2JqZWN0IG9yIEZ1bmN0aW9ufSBvcHRpb25zIC0gaWYgZnVuY3Rpb24sIHVzZSBhcyBjYWxsYmFja1xuICogQHBhcmFtIHtGdW5jdGlvbn0gb25BbHdheXMgLSBjYWxsYmFjayBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBJbWFnZXNMb2FkZWQoIGVsZW0sIG9wdGlvbnMsIG9uQWx3YXlzICkge1xuICAvLyBjb2VyY2UgSW1hZ2VzTG9hZGVkKCkgd2l0aG91dCBuZXcsIHRvIGJlIG5ldyBJbWFnZXNMb2FkZWQoKVxuICBpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBJbWFnZXNMb2FkZWQgKSApIHtcbiAgICByZXR1cm4gbmV3IEltYWdlc0xvYWRlZCggZWxlbSwgb3B0aW9ucywgb25BbHdheXMgKTtcbiAgfVxuICAvLyB1c2UgZWxlbSBhcyBzZWxlY3RvciBzdHJpbmdcbiAgdmFyIHF1ZXJ5RWxlbSA9IGVsZW07XG4gIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSB7XG4gICAgcXVlcnlFbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggZWxlbSApO1xuICB9XG4gIC8vIGJhaWwgaWYgYmFkIGVsZW1lbnRcbiAgaWYgKCAhcXVlcnlFbGVtICkge1xuICAgIGNvbnNvbGUuZXJyb3IoICdCYWQgZWxlbWVudCBmb3IgaW1hZ2VzTG9hZGVkICcgKyAoIHF1ZXJ5RWxlbSB8fCBlbGVtICkgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmVsZW1lbnRzID0gbWFrZUFycmF5KCBxdWVyeUVsZW0gKTtcbiAgdGhpcy5vcHRpb25zID0gZXh0ZW5kKCB7fSwgdGhpcy5vcHRpb25zICk7XG4gIC8vIHNoaWZ0IGFyZ3VtZW50cyBpZiBubyBvcHRpb25zIHNldFxuICBpZiAoIHR5cGVvZiBvcHRpb25zID09ICdmdW5jdGlvbicgKSB7XG4gICAgb25BbHdheXMgPSBvcHRpb25zO1xuICB9IGVsc2Uge1xuICAgIGV4dGVuZCggdGhpcy5vcHRpb25zLCBvcHRpb25zICk7XG4gIH1cblxuICBpZiAoIG9uQWx3YXlzICkge1xuICAgIHRoaXMub24oICdhbHdheXMnLCBvbkFsd2F5cyApO1xuICB9XG5cbiAgdGhpcy5nZXRJbWFnZXMoKTtcblxuICBpZiAoICQgKSB7XG4gICAgLy8gYWRkIGpRdWVyeSBEZWZlcnJlZCBvYmplY3RcbiAgICB0aGlzLmpxRGVmZXJyZWQgPSBuZXcgJC5EZWZlcnJlZCgpO1xuICB9XG5cbiAgLy8gSEFDSyBjaGVjayBhc3luYyB0byBhbGxvdyB0aW1lIHRvIGJpbmQgbGlzdGVuZXJzXG4gIHNldFRpbWVvdXQoIHRoaXMuY2hlY2suYmluZCggdGhpcyApICk7XG59XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFdkVtaXR0ZXIucHJvdG90eXBlICk7XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUub3B0aW9ucyA9IHt9O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmdldEltYWdlcyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmltYWdlcyA9IFtdO1xuXG4gIC8vIGZpbHRlciAmIGZpbmQgaXRlbXMgaWYgd2UgaGF2ZSBhbiBpdGVtIHNlbGVjdG9yXG4gIHRoaXMuZWxlbWVudHMuZm9yRWFjaCggdGhpcy5hZGRFbGVtZW50SW1hZ2VzLCB0aGlzICk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudFxuICovXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmFkZEVsZW1lbnRJbWFnZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgLy8gZmlsdGVyIHNpYmxpbmdzXG4gIGlmICggZWxlbS5ub2RlTmFtZSA9PSAnSU1HJyApIHtcbiAgICB0aGlzLmFkZEltYWdlKCBlbGVtICk7XG4gIH1cbiAgLy8gZ2V0IGJhY2tncm91bmQgaW1hZ2Ugb24gZWxlbWVudFxuICBpZiAoIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kID09PSB0cnVlICkge1xuICAgIHRoaXMuYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMoIGVsZW0gKTtcbiAgfVxuXG4gIC8vIGZpbmQgY2hpbGRyZW5cbiAgLy8gbm8gbm9uLWVsZW1lbnQgbm9kZXMsICMxNDNcbiAgdmFyIG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcbiAgaWYgKCAhbm9kZVR5cGUgfHwgIWVsZW1lbnROb2RlVHlwZXNbIG5vZGVUeXBlIF0gKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBjaGlsZEltZ3MgPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2ltZycpO1xuICAvLyBjb25jYXQgY2hpbGRFbGVtcyB0byBmaWx0ZXJGb3VuZCBhcnJheVxuICBmb3IgKCB2YXIgaT0wOyBpIDwgY2hpbGRJbWdzLmxlbmd0aDsgaSsrICkge1xuICAgIHZhciBpbWcgPSBjaGlsZEltZ3NbaV07XG4gICAgdGhpcy5hZGRJbWFnZSggaW1nICk7XG4gIH1cblxuICAvLyBnZXQgY2hpbGQgYmFja2dyb3VuZCBpbWFnZXNcbiAgaWYgKCB0eXBlb2YgdGhpcy5vcHRpb25zLmJhY2tncm91bmQgPT0gJ3N0cmluZycgKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gZWxlbS5xdWVyeVNlbGVjdG9yQWxsKCB0aGlzLm9wdGlvbnMuYmFja2dyb3VuZCApO1xuICAgIGZvciAoIGk9MDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrICkge1xuICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICB0aGlzLmFkZEVsZW1lbnRCYWNrZ3JvdW5kSW1hZ2VzKCBjaGlsZCApO1xuICAgIH1cbiAgfVxufTtcblxudmFyIGVsZW1lbnROb2RlVHlwZXMgPSB7XG4gIDE6IHRydWUsXG4gIDk6IHRydWUsXG4gIDExOiB0cnVlXG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmFkZEVsZW1lbnRCYWNrZ3JvdW5kSW1hZ2VzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIHZhciBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcbiAgaWYgKCAhc3R5bGUgKSB7XG4gICAgLy8gRmlyZWZveCByZXR1cm5zIG51bGwgaWYgaW4gYSBoaWRkZW4gaWZyYW1lIGh0dHBzOi8vYnVnemlsLmxhLzU0ODM5N1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBnZXQgdXJsIGluc2lkZSB1cmwoXCIuLi5cIilcbiAgdmFyIHJlVVJMID0gL3VybFxcKChbJ1wiXSk/KC4qPylcXDFcXCkvZ2k7XG4gIHZhciBtYXRjaGVzID0gcmVVUkwuZXhlYyggc3R5bGUuYmFja2dyb3VuZEltYWdlICk7XG4gIHdoaWxlICggbWF0Y2hlcyAhPT0gbnVsbCApIHtcbiAgICB2YXIgdXJsID0gbWF0Y2hlcyAmJiBtYXRjaGVzWzJdO1xuICAgIGlmICggdXJsICkge1xuICAgICAgdGhpcy5hZGRCYWNrZ3JvdW5kKCB1cmwsIGVsZW0gKTtcbiAgICB9XG4gICAgbWF0Y2hlcyA9IHJlVVJMLmV4ZWMoIHN0eWxlLmJhY2tncm91bmRJbWFnZSApO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7SW1hZ2V9IGltZ1xuICovXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmFkZEltYWdlID0gZnVuY3Rpb24oIGltZyApIHtcbiAgdmFyIGxvYWRpbmdJbWFnZSA9IG5ldyBMb2FkaW5nSW1hZ2UoIGltZyApO1xuICB0aGlzLmltYWdlcy5wdXNoKCBsb2FkaW5nSW1hZ2UgKTtcbn07XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuYWRkQmFja2dyb3VuZCA9IGZ1bmN0aW9uKCB1cmwsIGVsZW0gKSB7XG4gIHZhciBiYWNrZ3JvdW5kID0gbmV3IEJhY2tncm91bmQoIHVybCwgZWxlbSApO1xuICB0aGlzLmltYWdlcy5wdXNoKCBiYWNrZ3JvdW5kICk7XG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG4gIHRoaXMucHJvZ3Jlc3NlZENvdW50ID0gMDtcbiAgdGhpcy5oYXNBbnlCcm9rZW4gPSBmYWxzZTtcbiAgLy8gY29tcGxldGUgaWYgbm8gaW1hZ2VzXG4gIGlmICggIXRoaXMuaW1hZ2VzLmxlbmd0aCApIHtcbiAgICB0aGlzLmNvbXBsZXRlKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9ncmVzcyggaW1hZ2UsIGVsZW0sIG1lc3NhZ2UgKSB7XG4gICAgLy8gSEFDSyAtIENocm9tZSB0cmlnZ2VycyBldmVudCBiZWZvcmUgb2JqZWN0IHByb3BlcnRpZXMgaGF2ZSBjaGFuZ2VkLiAjODNcbiAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgIF90aGlzLnByb2dyZXNzKCBpbWFnZSwgZWxlbSwgbWVzc2FnZSApO1xuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5pbWFnZXMuZm9yRWFjaCggZnVuY3Rpb24oIGxvYWRpbmdJbWFnZSApIHtcbiAgICBsb2FkaW5nSW1hZ2Uub25jZSggJ3Byb2dyZXNzJywgb25Qcm9ncmVzcyApO1xuICAgIGxvYWRpbmdJbWFnZS5jaGVjaygpO1xuICB9KTtcbn07XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUucHJvZ3Jlc3MgPSBmdW5jdGlvbiggaW1hZ2UsIGVsZW0sIG1lc3NhZ2UgKSB7XG4gIHRoaXMucHJvZ3Jlc3NlZENvdW50Kys7XG4gIHRoaXMuaGFzQW55QnJva2VuID0gdGhpcy5oYXNBbnlCcm9rZW4gfHwgIWltYWdlLmlzTG9hZGVkO1xuICAvLyBwcm9ncmVzcyBldmVudFxuICB0aGlzLmVtaXRFdmVudCggJ3Byb2dyZXNzJywgWyB0aGlzLCBpbWFnZSwgZWxlbSBdICk7XG4gIGlmICggdGhpcy5qcURlZmVycmVkICYmIHRoaXMuanFEZWZlcnJlZC5ub3RpZnkgKSB7XG4gICAgdGhpcy5qcURlZmVycmVkLm5vdGlmeSggdGhpcywgaW1hZ2UgKTtcbiAgfVxuICAvLyBjaGVjayBpZiBjb21wbGV0ZWRcbiAgaWYgKCB0aGlzLnByb2dyZXNzZWRDb3VudCA9PSB0aGlzLmltYWdlcy5sZW5ndGggKSB7XG4gICAgdGhpcy5jb21wbGV0ZSgpO1xuICB9XG5cbiAgaWYgKCB0aGlzLm9wdGlvbnMuZGVidWcgJiYgY29uc29sZSApIHtcbiAgICBjb25zb2xlLmxvZyggJ3Byb2dyZXNzOiAnICsgbWVzc2FnZSwgaW1hZ2UsIGVsZW0gKTtcbiAgfVxufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZXZlbnROYW1lID0gdGhpcy5oYXNBbnlCcm9rZW4gPyAnZmFpbCcgOiAnZG9uZSc7XG4gIHRoaXMuaXNDb21wbGV0ZSA9IHRydWU7XG4gIHRoaXMuZW1pdEV2ZW50KCBldmVudE5hbWUsIFsgdGhpcyBdICk7XG4gIHRoaXMuZW1pdEV2ZW50KCAnYWx3YXlzJywgWyB0aGlzIF0gKTtcbiAgaWYgKCB0aGlzLmpxRGVmZXJyZWQgKSB7XG4gICAgdmFyIGpxTWV0aG9kID0gdGhpcy5oYXNBbnlCcm9rZW4gPyAncmVqZWN0JyA6ICdyZXNvbHZlJztcbiAgICB0aGlzLmpxRGVmZXJyZWRbIGpxTWV0aG9kIF0oIHRoaXMgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIExvYWRpbmdJbWFnZSggaW1nICkge1xuICB0aGlzLmltZyA9IGltZztcbn1cblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKCkge1xuICAvLyBJZiBjb21wbGV0ZSBpcyB0cnVlIGFuZCBicm93c2VyIHN1cHBvcnRzIG5hdHVyYWwgc2l6ZXMsXG4gIC8vIHRyeSB0byBjaGVjayBmb3IgaW1hZ2Ugc3RhdHVzIG1hbnVhbGx5LlxuICB2YXIgaXNDb21wbGV0ZSA9IHRoaXMuZ2V0SXNJbWFnZUNvbXBsZXRlKCk7XG4gIGlmICggaXNDb21wbGV0ZSApIHtcbiAgICAvLyByZXBvcnQgYmFzZWQgb24gbmF0dXJhbFdpZHRoXG4gICAgdGhpcy5jb25maXJtKCB0aGlzLmltZy5uYXR1cmFsV2lkdGggIT09IDAsICduYXR1cmFsV2lkdGgnICk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSWYgbm9uZSBvZiB0aGUgY2hlY2tzIGFib3ZlIG1hdGNoZWQsIHNpbXVsYXRlIGxvYWRpbmcgb24gZGV0YWNoZWQgZWxlbWVudC5cbiAgdGhpcy5wcm94eUltYWdlID0gbmV3IEltYWdlKCk7XG4gIHRoaXMucHJveHlJbWFnZS5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5wcm94eUltYWdlLmFkZEV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbiAgLy8gYmluZCB0byBpbWFnZSBhcyB3ZWxsIGZvciBGaXJlZm94LiAjMTkxXG4gIHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIHRoaXMucHJveHlJbWFnZS5zcmMgPSB0aGlzLmltZy5zcmM7XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLmdldElzSW1hZ2VDb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBjaGVjayBmb3Igbm9uLXplcm8sIG5vbi11bmRlZmluZWQgbmF0dXJhbFdpZHRoXG4gIC8vIGZpeGVzIFNhZmFyaStJbmZpbml0ZVNjcm9sbCtNYXNvbnJ5IGJ1ZyBpbmZpbml0ZS1zY3JvbGwjNjcxXG4gIHJldHVybiB0aGlzLmltZy5jb21wbGV0ZSAmJiB0aGlzLmltZy5uYXR1cmFsV2lkdGg7XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLmNvbmZpcm0gPSBmdW5jdGlvbiggaXNMb2FkZWQsIG1lc3NhZ2UgKSB7XG4gIHRoaXMuaXNMb2FkZWQgPSBpc0xvYWRlZDtcbiAgdGhpcy5lbWl0RXZlbnQoICdwcm9ncmVzcycsIFsgdGhpcywgdGhpcy5pbWcsIG1lc3NhZ2UgXSApO1xufTtcblxuLy8gLS0tLS0gZXZlbnRzIC0tLS0tIC8vXG5cbi8vIHRyaWdnZXIgc3BlY2lmaWVkIGhhbmRsZXIgZm9yIGV2ZW50IHR5cGVcbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUuaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHZhciBtZXRob2QgPSAnb24nICsgZXZlbnQudHlwZTtcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcbiAgICB0aGlzWyBtZXRob2QgXSggZXZlbnQgKTtcbiAgfVxufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jb25maXJtKCB0cnVlLCAnb25sb2FkJyApO1xuICB0aGlzLnVuYmluZEV2ZW50cygpO1xufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY29uZmlybSggZmFsc2UsICdvbmVycm9yJyApO1xuICB0aGlzLnVuYmluZEV2ZW50cygpO1xufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS51bmJpbmRFdmVudHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wcm94eUltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLnByb3h5SW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQmFja2dyb3VuZCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBCYWNrZ3JvdW5kKCB1cmwsIGVsZW1lbnQgKSB7XG4gIHRoaXMudXJsID0gdXJsO1xuICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICB0aGlzLmltZyA9IG5ldyBJbWFnZSgpO1xufVxuXG4vLyBpbmhlcml0IExvYWRpbmdJbWFnZSBwcm90b3R5cGVcbkJhY2tncm91bmQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTG9hZGluZ0ltYWdlLnByb3RvdHlwZSApO1xuXG5CYWNrZ3JvdW5kLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICB0aGlzLmltZy5zcmMgPSB0aGlzLnVybDtcbiAgLy8gY2hlY2sgaWYgaW1hZ2UgaXMgYWxyZWFkeSBjb21wbGV0ZVxuICB2YXIgaXNDb21wbGV0ZSA9IHRoaXMuZ2V0SXNJbWFnZUNvbXBsZXRlKCk7XG4gIGlmICggaXNDb21wbGV0ZSApIHtcbiAgICB0aGlzLmNvbmZpcm0oIHRoaXMuaW1nLm5hdHVyYWxXaWR0aCAhPT0gMCwgJ25hdHVyYWxXaWR0aCcgKTtcbiAgICB0aGlzLnVuYmluZEV2ZW50cygpO1xuICB9XG59O1xuXG5CYWNrZ3JvdW5kLnByb3RvdHlwZS51bmJpbmRFdmVudHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbn07XG5cbkJhY2tncm91bmQucHJvdG90eXBlLmNvbmZpcm0gPSBmdW5jdGlvbiggaXNMb2FkZWQsIG1lc3NhZ2UgKSB7XG4gIHRoaXMuaXNMb2FkZWQgPSBpc0xvYWRlZDtcbiAgdGhpcy5lbWl0RXZlbnQoICdwcm9ncmVzcycsIFsgdGhpcywgdGhpcy5lbGVtZW50LCBtZXNzYWdlIF0gKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGpRdWVyeSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5JbWFnZXNMb2FkZWQubWFrZUpRdWVyeVBsdWdpbiA9IGZ1bmN0aW9uKCBqUXVlcnkgKSB7XG4gIGpRdWVyeSA9IGpRdWVyeSB8fCB3aW5kb3cualF1ZXJ5O1xuICBpZiAoICFqUXVlcnkgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIHNldCBsb2NhbCB2YXJpYWJsZVxuICAkID0galF1ZXJ5O1xuICAvLyAkKCkuaW1hZ2VzTG9hZGVkKClcbiAgJC5mbi5pbWFnZXNMb2FkZWQgPSBmdW5jdGlvbiggb3B0aW9ucywgY2FsbGJhY2sgKSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IEltYWdlc0xvYWRlZCggdGhpcywgb3B0aW9ucywgY2FsbGJhY2sgKTtcbiAgICByZXR1cm4gaW5zdGFuY2UuanFEZWZlcnJlZC5wcm9taXNlKCAkKHRoaXMpICk7XG4gIH07XG59O1xuLy8gdHJ5IG1ha2luZyBwbHVnaW5cbkltYWdlc0xvYWRlZC5tYWtlSlF1ZXJ5UGx1Z2luKCk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5yZXR1cm4gSW1hZ2VzTG9hZGVkO1xuXG59KTtcbiIsIi8qIHNtb290aHNjcm9sbCB2MC40LjQgLSAyMDE5IC0gRHVzdGFuIEthc3RlbiwgSmVyZW1pYXMgTWVuaWNoZWxsaSAtIE1JVCBMaWNlbnNlICovXG4oZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gcG9seWZpbGxcbiAgZnVuY3Rpb24gcG9seWZpbGwoKSB7XG4gICAgLy8gYWxpYXNlc1xuICAgIHZhciB3ID0gd2luZG93O1xuICAgIHZhciBkID0gZG9jdW1lbnQ7XG5cbiAgICAvLyByZXR1cm4gaWYgc2Nyb2xsIGJlaGF2aW9yIGlzIHN1cHBvcnRlZCBhbmQgcG9seWZpbGwgaXMgbm90IGZvcmNlZFxuICAgIGlmIChcbiAgICAgICdzY3JvbGxCZWhhdmlvcicgaW4gZC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiZcbiAgICAgIHcuX19mb3JjZVNtb290aFNjcm9sbFBvbHlmaWxsX18gIT09IHRydWVcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBnbG9iYWxzXG4gICAgdmFyIEVsZW1lbnQgPSB3LkhUTUxFbGVtZW50IHx8IHcuRWxlbWVudDtcbiAgICB2YXIgU0NST0xMX1RJTUUgPSA0Njg7XG5cbiAgICAvLyBvYmplY3QgZ2F0aGVyaW5nIG9yaWdpbmFsIHNjcm9sbCBtZXRob2RzXG4gICAgdmFyIG9yaWdpbmFsID0ge1xuICAgICAgc2Nyb2xsOiB3LnNjcm9sbCB8fCB3LnNjcm9sbFRvLFxuICAgICAgc2Nyb2xsQnk6IHcuc2Nyb2xsQnksXG4gICAgICBlbGVtZW50U2Nyb2xsOiBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGwgfHwgc2Nyb2xsRWxlbWVudCxcbiAgICAgIHNjcm9sbEludG9WaWV3OiBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxJbnRvVmlld1xuICAgIH07XG5cbiAgICAvLyBkZWZpbmUgdGltaW5nIG1ldGhvZFxuICAgIHZhciBub3cgPVxuICAgICAgdy5wZXJmb3JtYW5jZSAmJiB3LnBlcmZvcm1hbmNlLm5vd1xuICAgICAgICA/IHcucGVyZm9ybWFuY2Uubm93LmJpbmQody5wZXJmb3JtYW5jZSlcbiAgICAgICAgOiBEYXRlLm5vdztcblxuICAgIC8qKlxuICAgICAqIGluZGljYXRlcyBpZiBhIHRoZSBjdXJyZW50IGJyb3dzZXIgaXMgbWFkZSBieSBNaWNyb3NvZnRcbiAgICAgKiBAbWV0aG9kIGlzTWljcm9zb2Z0QnJvd3NlclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1c2VyQWdlbnRcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01pY3Jvc29mdEJyb3dzZXIodXNlckFnZW50KSB7XG4gICAgICB2YXIgdXNlckFnZW50UGF0dGVybnMgPSBbJ01TSUUgJywgJ1RyaWRlbnQvJywgJ0VkZ2UvJ107XG5cbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKHVzZXJBZ2VudFBhdHRlcm5zLmpvaW4oJ3wnKSkudGVzdCh1c2VyQWdlbnQpO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogSUUgaGFzIHJvdW5kaW5nIGJ1ZyByb3VuZGluZyBkb3duIGNsaWVudEhlaWdodCBhbmQgY2xpZW50V2lkdGggYW5kXG4gICAgICogcm91bmRpbmcgdXAgc2Nyb2xsSGVpZ2h0IGFuZCBzY3JvbGxXaWR0aCBjYXVzaW5nIGZhbHNlIHBvc2l0aXZlc1xuICAgICAqIG9uIGhhc1Njcm9sbGFibGVTcGFjZVxuICAgICAqL1xuICAgIHZhciBST1VORElOR19UT0xFUkFOQ0UgPSBpc01pY3Jvc29mdEJyb3dzZXIody5uYXZpZ2F0b3IudXNlckFnZW50KSA/IDEgOiAwO1xuXG4gICAgLyoqXG4gICAgICogY2hhbmdlcyBzY3JvbGwgcG9zaXRpb24gaW5zaWRlIGFuIGVsZW1lbnRcbiAgICAgKiBAbWV0aG9kIHNjcm9sbEVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzY3JvbGxFbGVtZW50KHgsIHkpIHtcbiAgICAgIHRoaXMuc2Nyb2xsTGVmdCA9IHg7XG4gICAgICB0aGlzLnNjcm9sbFRvcCA9IHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcmV0dXJucyByZXN1bHQgb2YgYXBwbHlpbmcgZWFzZSBtYXRoIGZ1bmN0aW9uIHRvIGEgbnVtYmVyXG4gICAgICogQG1ldGhvZCBlYXNlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGtcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVhc2Uoaykge1xuICAgICAgcmV0dXJuIDAuNSAqICgxIC0gTWF0aC5jb3MoTWF0aC5QSSAqIGspKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpbmRpY2F0ZXMgaWYgYSBzbW9vdGggYmVoYXZpb3Igc2hvdWxkIGJlIGFwcGxpZWRcbiAgICAgKiBAbWV0aG9kIHNob3VsZEJhaWxPdXRcbiAgICAgKiBAcGFyYW0ge051bWJlcnxPYmplY3R9IGZpcnN0QXJnXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2hvdWxkQmFpbE91dChmaXJzdEFyZykge1xuICAgICAgaWYgKFxuICAgICAgICBmaXJzdEFyZyA9PT0gbnVsbCB8fFxuICAgICAgICB0eXBlb2YgZmlyc3RBcmcgIT09ICdvYmplY3QnIHx8XG4gICAgICAgIGZpcnN0QXJnLmJlaGF2aW9yID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgZmlyc3RBcmcuYmVoYXZpb3IgPT09ICdhdXRvJyB8fFxuICAgICAgICBmaXJzdEFyZy5iZWhhdmlvciA9PT0gJ2luc3RhbnQnXG4gICAgICApIHtcbiAgICAgICAgLy8gZmlyc3QgYXJndW1lbnQgaXMgbm90IGFuIG9iamVjdC9udWxsXG4gICAgICAgIC8vIG9yIGJlaGF2aW9yIGlzIGF1dG8sIGluc3RhbnQgb3IgdW5kZWZpbmVkXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGZpcnN0QXJnID09PSAnb2JqZWN0JyAmJiBmaXJzdEFyZy5iZWhhdmlvciA9PT0gJ3Ntb290aCcpIHtcbiAgICAgICAgLy8gZmlyc3QgYXJndW1lbnQgaXMgYW4gb2JqZWN0IGFuZCBiZWhhdmlvciBpcyBzbW9vdGhcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyB0aHJvdyBlcnJvciB3aGVuIGJlaGF2aW9yIGlzIG5vdCBzdXBwb3J0ZWRcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdiZWhhdmlvciBtZW1iZXIgb2YgU2Nyb2xsT3B0aW9ucyAnICtcbiAgICAgICAgICBmaXJzdEFyZy5iZWhhdmlvciArXG4gICAgICAgICAgJyBpcyBub3QgYSB2YWxpZCB2YWx1ZSBmb3IgZW51bWVyYXRpb24gU2Nyb2xsQmVoYXZpb3IuJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpbmRpY2F0ZXMgaWYgYW4gZWxlbWVudCBoYXMgc2Nyb2xsYWJsZSBzcGFjZSBpbiB0aGUgcHJvdmlkZWQgYXhpc1xuICAgICAqIEBtZXRob2QgaGFzU2Nyb2xsYWJsZVNwYWNlXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBheGlzXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzU2Nyb2xsYWJsZVNwYWNlKGVsLCBheGlzKSB7XG4gICAgICBpZiAoYXhpcyA9PT0gJ1knKSB7XG4gICAgICAgIHJldHVybiBlbC5jbGllbnRIZWlnaHQgKyBST1VORElOR19UT0xFUkFOQ0UgPCBlbC5zY3JvbGxIZWlnaHQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChheGlzID09PSAnWCcpIHtcbiAgICAgICAgcmV0dXJuIGVsLmNsaWVudFdpZHRoICsgUk9VTkRJTkdfVE9MRVJBTkNFIDwgZWwuc2Nyb2xsV2lkdGg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaW5kaWNhdGVzIGlmIGFuIGVsZW1lbnQgaGFzIGEgc2Nyb2xsYWJsZSBvdmVyZmxvdyBwcm9wZXJ0eSBpbiB0aGUgYXhpc1xuICAgICAqIEBtZXRob2QgY2FuT3ZlcmZsb3dcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGF4aXNcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYW5PdmVyZmxvdyhlbCwgYXhpcykge1xuICAgICAgdmFyIG92ZXJmbG93VmFsdWUgPSB3LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpWydvdmVyZmxvdycgKyBheGlzXTtcblxuICAgICAgcmV0dXJuIG92ZXJmbG93VmFsdWUgPT09ICdhdXRvJyB8fCBvdmVyZmxvd1ZhbHVlID09PSAnc2Nyb2xsJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpbmRpY2F0ZXMgaWYgYW4gZWxlbWVudCBjYW4gYmUgc2Nyb2xsZWQgaW4gZWl0aGVyIGF4aXNcbiAgICAgKiBAbWV0aG9kIGlzU2Nyb2xsYWJsZVxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYXhpc1xuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU2Nyb2xsYWJsZShlbCkge1xuICAgICAgdmFyIGlzU2Nyb2xsYWJsZVkgPSBoYXNTY3JvbGxhYmxlU3BhY2UoZWwsICdZJykgJiYgY2FuT3ZlcmZsb3coZWwsICdZJyk7XG4gICAgICB2YXIgaXNTY3JvbGxhYmxlWCA9IGhhc1Njcm9sbGFibGVTcGFjZShlbCwgJ1gnKSAmJiBjYW5PdmVyZmxvdyhlbCwgJ1gnKTtcblxuICAgICAgcmV0dXJuIGlzU2Nyb2xsYWJsZVkgfHwgaXNTY3JvbGxhYmxlWDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBmaW5kcyBzY3JvbGxhYmxlIHBhcmVudCBvZiBhbiBlbGVtZW50XG4gICAgICogQG1ldGhvZCBmaW5kU2Nyb2xsYWJsZVBhcmVudFxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxcbiAgICAgKiBAcmV0dXJucyB7Tm9kZX0gZWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kU2Nyb2xsYWJsZVBhcmVudChlbCkge1xuICAgICAgd2hpbGUgKGVsICE9PSBkLmJvZHkgJiYgaXNTY3JvbGxhYmxlKGVsKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZWwgPSBlbC5wYXJlbnROb2RlIHx8IGVsLmhvc3Q7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzZWxmIGludm9rZWQgZnVuY3Rpb24gdGhhdCwgZ2l2ZW4gYSBjb250ZXh0LCBzdGVwcyB0aHJvdWdoIHNjcm9sbGluZ1xuICAgICAqIEBtZXRob2Qgc3RlcFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGVwKGNvbnRleHQpIHtcbiAgICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB2YXIgY3VycmVudFg7XG4gICAgICB2YXIgY3VycmVudFk7XG4gICAgICB2YXIgZWxhcHNlZCA9ICh0aW1lIC0gY29udGV4dC5zdGFydFRpbWUpIC8gU0NST0xMX1RJTUU7XG5cbiAgICAgIC8vIGF2b2lkIGVsYXBzZWQgdGltZXMgaGlnaGVyIHRoYW4gb25lXG4gICAgICBlbGFwc2VkID0gZWxhcHNlZCA+IDEgPyAxIDogZWxhcHNlZDtcblxuICAgICAgLy8gYXBwbHkgZWFzaW5nIHRvIGVsYXBzZWQgdGltZVxuICAgICAgdmFsdWUgPSBlYXNlKGVsYXBzZWQpO1xuXG4gICAgICBjdXJyZW50WCA9IGNvbnRleHQuc3RhcnRYICsgKGNvbnRleHQueCAtIGNvbnRleHQuc3RhcnRYKSAqIHZhbHVlO1xuICAgICAgY3VycmVudFkgPSBjb250ZXh0LnN0YXJ0WSArIChjb250ZXh0LnkgLSBjb250ZXh0LnN0YXJ0WSkgKiB2YWx1ZTtcblxuICAgICAgY29udGV4dC5tZXRob2QuY2FsbChjb250ZXh0LnNjcm9sbGFibGUsIGN1cnJlbnRYLCBjdXJyZW50WSk7XG5cbiAgICAgIC8vIHNjcm9sbCBtb3JlIGlmIHdlIGhhdmUgbm90IHJlYWNoZWQgb3VyIGRlc3RpbmF0aW9uXG4gICAgICBpZiAoY3VycmVudFggIT09IGNvbnRleHQueCB8fCBjdXJyZW50WSAhPT0gY29udGV4dC55KSB7XG4gICAgICAgIHcucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXAuYmluZCh3LCBjb250ZXh0KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2Nyb2xscyB3aW5kb3cgb3IgZWxlbWVudCB3aXRoIGEgc21vb3RoIGJlaGF2aW9yXG4gICAgICogQG1ldGhvZCBzbW9vdGhTY3JvbGxcbiAgICAgKiBAcGFyYW0ge09iamVjdHxOb2RlfSBlbFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNtb290aFNjcm9sbChlbCwgeCwgeSkge1xuICAgICAgdmFyIHNjcm9sbGFibGU7XG4gICAgICB2YXIgc3RhcnRYO1xuICAgICAgdmFyIHN0YXJ0WTtcbiAgICAgIHZhciBtZXRob2Q7XG4gICAgICB2YXIgc3RhcnRUaW1lID0gbm93KCk7XG5cbiAgICAgIC8vIGRlZmluZSBzY3JvbGwgY29udGV4dFxuICAgICAgaWYgKGVsID09PSBkLmJvZHkpIHtcbiAgICAgICAgc2Nyb2xsYWJsZSA9IHc7XG4gICAgICAgIHN0YXJ0WCA9IHcuc2Nyb2xsWCB8fCB3LnBhZ2VYT2Zmc2V0O1xuICAgICAgICBzdGFydFkgPSB3LnNjcm9sbFkgfHwgdy5wYWdlWU9mZnNldDtcbiAgICAgICAgbWV0aG9kID0gb3JpZ2luYWwuc2Nyb2xsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2Nyb2xsYWJsZSA9IGVsO1xuICAgICAgICBzdGFydFggPSBlbC5zY3JvbGxMZWZ0O1xuICAgICAgICBzdGFydFkgPSBlbC5zY3JvbGxUb3A7XG4gICAgICAgIG1ldGhvZCA9IHNjcm9sbEVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIC8vIHNjcm9sbCBsb29waW5nIG92ZXIgYSBmcmFtZVxuICAgICAgc3RlcCh7XG4gICAgICAgIHNjcm9sbGFibGU6IHNjcm9sbGFibGUsXG4gICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICBzdGFydFRpbWU6IHN0YXJ0VGltZSxcbiAgICAgICAgc3RhcnRYOiBzdGFydFgsXG4gICAgICAgIHN0YXJ0WTogc3RhcnRZLFxuICAgICAgICB4OiB4LFxuICAgICAgICB5OiB5XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBPUklHSU5BTCBNRVRIT0RTIE9WRVJSSURFU1xuICAgIC8vIHcuc2Nyb2xsIGFuZCB3LnNjcm9sbFRvXG4gICAgdy5zY3JvbGwgPSB3LnNjcm9sbFRvID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhdm9pZCBhY3Rpb24gd2hlbiBubyBhcmd1bWVudHMgYXJlIHBhc3NlZFxuICAgICAgaWYgKGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gYXZvaWQgc21vb3RoIGJlaGF2aW9yIGlmIG5vdCByZXF1aXJlZFxuICAgICAgaWYgKHNob3VsZEJhaWxPdXQoYXJndW1lbnRzWzBdKSA9PT0gdHJ1ZSkge1xuICAgICAgICBvcmlnaW5hbC5zY3JvbGwuY2FsbChcbiAgICAgICAgICB3LFxuICAgICAgICAgIGFyZ3VtZW50c1swXS5sZWZ0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gYXJndW1lbnRzWzBdLmxlZnRcbiAgICAgICAgICAgIDogdHlwZW9mIGFyZ3VtZW50c1swXSAhPT0gJ29iamVjdCdcbiAgICAgICAgICAgICAgPyBhcmd1bWVudHNbMF1cbiAgICAgICAgICAgICAgOiB3LnNjcm9sbFggfHwgdy5wYWdlWE9mZnNldCxcbiAgICAgICAgICAvLyB1c2UgdG9wIHByb3AsIHNlY29uZCBhcmd1bWVudCBpZiBwcmVzZW50IG9yIGZhbGxiYWNrIHRvIHNjcm9sbFlcbiAgICAgICAgICBhcmd1bWVudHNbMF0udG9wICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gYXJndW1lbnRzWzBdLnRvcFxuICAgICAgICAgICAgOiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IGFyZ3VtZW50c1sxXVxuICAgICAgICAgICAgICA6IHcuc2Nyb2xsWSB8fCB3LnBhZ2VZT2Zmc2V0XG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBMRVQgVEhFIFNNT09USE5FU1MgQkVHSU4hXG4gICAgICBzbW9vdGhTY3JvbGwuY2FsbChcbiAgICAgICAgdyxcbiAgICAgICAgZC5ib2R5LFxuICAgICAgICBhcmd1bWVudHNbMF0ubGVmdCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyB+fmFyZ3VtZW50c1swXS5sZWZ0XG4gICAgICAgICAgOiB3LnNjcm9sbFggfHwgdy5wYWdlWE9mZnNldCxcbiAgICAgICAgYXJndW1lbnRzWzBdLnRvcCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyB+fmFyZ3VtZW50c1swXS50b3BcbiAgICAgICAgICA6IHcuc2Nyb2xsWSB8fCB3LnBhZ2VZT2Zmc2V0XG4gICAgICApO1xuICAgIH07XG5cbiAgICAvLyB3LnNjcm9sbEJ5XG4gICAgdy5zY3JvbGxCeSA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gYXZvaWQgYWN0aW9uIHdoZW4gbm8gYXJndW1lbnRzIGFyZSBwYXNzZWRcbiAgICAgIGlmIChhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGF2b2lkIHNtb290aCBiZWhhdmlvciBpZiBub3QgcmVxdWlyZWRcbiAgICAgIGlmIChzaG91bGRCYWlsT3V0KGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgb3JpZ2luYWwuc2Nyb2xsQnkuY2FsbChcbiAgICAgICAgICB3LFxuICAgICAgICAgIGFyZ3VtZW50c1swXS5sZWZ0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gYXJndW1lbnRzWzBdLmxlZnRcbiAgICAgICAgICAgIDogdHlwZW9mIGFyZ3VtZW50c1swXSAhPT0gJ29iamVjdCcgPyBhcmd1bWVudHNbMF0gOiAwLFxuICAgICAgICAgIGFyZ3VtZW50c1swXS50b3AgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBhcmd1bWVudHNbMF0udG9wXG4gICAgICAgICAgICA6IGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMFxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gTEVUIFRIRSBTTU9PVEhORVNTIEJFR0lOIVxuICAgICAgc21vb3RoU2Nyb2xsLmNhbGwoXG4gICAgICAgIHcsXG4gICAgICAgIGQuYm9keSxcbiAgICAgICAgfn5hcmd1bWVudHNbMF0ubGVmdCArICh3LnNjcm9sbFggfHwgdy5wYWdlWE9mZnNldCksXG4gICAgICAgIH5+YXJndW1lbnRzWzBdLnRvcCArICh3LnNjcm9sbFkgfHwgdy5wYWdlWU9mZnNldClcbiAgICAgICk7XG4gICAgfTtcblxuICAgIC8vIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbCBhbmQgRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsVG9cbiAgICBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGwgPSBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxUbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gYXZvaWQgYWN0aW9uIHdoZW4gbm8gYXJndW1lbnRzIGFyZSBwYXNzZWRcbiAgICAgIGlmIChhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGF2b2lkIHNtb290aCBiZWhhdmlvciBpZiBub3QgcmVxdWlyZWRcbiAgICAgIGlmIChzaG91bGRCYWlsT3V0KGFyZ3VtZW50c1swXSkgPT09IHRydWUpIHtcbiAgICAgICAgLy8gaWYgb25lIG51bWJlciBpcyBwYXNzZWQsIHRocm93IGVycm9yIHRvIG1hdGNoIEZpcmVmb3ggaW1wbGVtZW50YXRpb25cbiAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdudW1iZXInICYmIGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdWYWx1ZSBjb3VsZCBub3QgYmUgY29udmVydGVkJyk7XG4gICAgICAgIH1cblxuICAgICAgICBvcmlnaW5hbC5lbGVtZW50U2Nyb2xsLmNhbGwoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICAvLyB1c2UgbGVmdCBwcm9wLCBmaXJzdCBudW1iZXIgYXJndW1lbnQgb3IgZmFsbGJhY2sgdG8gc2Nyb2xsTGVmdFxuICAgICAgICAgIGFyZ3VtZW50c1swXS5sZWZ0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gfn5hcmd1bWVudHNbMF0ubGVmdFxuICAgICAgICAgICAgOiB0eXBlb2YgYXJndW1lbnRzWzBdICE9PSAnb2JqZWN0JyA/IH5+YXJndW1lbnRzWzBdIDogdGhpcy5zY3JvbGxMZWZ0LFxuICAgICAgICAgIC8vIHVzZSB0b3AgcHJvcCwgc2Vjb25kIGFyZ3VtZW50IG9yIGZhbGxiYWNrIHRvIHNjcm9sbFRvcFxuICAgICAgICAgIGFyZ3VtZW50c1swXS50b3AgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyB+fmFyZ3VtZW50c1swXS50b3BcbiAgICAgICAgICAgIDogYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyB+fmFyZ3VtZW50c1sxXSA6IHRoaXMuc2Nyb2xsVG9wXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVmdCA9IGFyZ3VtZW50c1swXS5sZWZ0O1xuICAgICAgdmFyIHRvcCA9IGFyZ3VtZW50c1swXS50b3A7XG5cbiAgICAgIC8vIExFVCBUSEUgU01PT1RITkVTUyBCRUdJTiFcbiAgICAgIHNtb290aFNjcm9sbC5jYWxsKFxuICAgICAgICB0aGlzLFxuICAgICAgICB0aGlzLFxuICAgICAgICB0eXBlb2YgbGVmdCA9PT0gJ3VuZGVmaW5lZCcgPyB0aGlzLnNjcm9sbExlZnQgOiB+fmxlZnQsXG4gICAgICAgIHR5cGVvZiB0b3AgPT09ICd1bmRlZmluZWQnID8gdGhpcy5zY3JvbGxUb3AgOiB+fnRvcFxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgLy8gRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsQnlcbiAgICBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxCeSA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gYXZvaWQgYWN0aW9uIHdoZW4gbm8gYXJndW1lbnRzIGFyZSBwYXNzZWRcbiAgICAgIGlmIChhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGF2b2lkIHNtb290aCBiZWhhdmlvciBpZiBub3QgcmVxdWlyZWRcbiAgICAgIGlmIChzaG91bGRCYWlsT3V0KGFyZ3VtZW50c1swXSkgPT09IHRydWUpIHtcbiAgICAgICAgb3JpZ2luYWwuZWxlbWVudFNjcm9sbC5jYWxsKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgYXJndW1lbnRzWzBdLmxlZnQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyB+fmFyZ3VtZW50c1swXS5sZWZ0ICsgdGhpcy5zY3JvbGxMZWZ0XG4gICAgICAgICAgICA6IH5+YXJndW1lbnRzWzBdICsgdGhpcy5zY3JvbGxMZWZ0LFxuICAgICAgICAgIGFyZ3VtZW50c1swXS50b3AgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyB+fmFyZ3VtZW50c1swXS50b3AgKyB0aGlzLnNjcm9sbFRvcFxuICAgICAgICAgICAgOiB+fmFyZ3VtZW50c1sxXSArIHRoaXMuc2Nyb2xsVG9wXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNjcm9sbCh7XG4gICAgICAgIGxlZnQ6IH5+YXJndW1lbnRzWzBdLmxlZnQgKyB0aGlzLnNjcm9sbExlZnQsXG4gICAgICAgIHRvcDogfn5hcmd1bWVudHNbMF0udG9wICsgdGhpcy5zY3JvbGxUb3AsXG4gICAgICAgIGJlaGF2aW9yOiBhcmd1bWVudHNbMF0uYmVoYXZpb3JcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxJbnRvVmlld1xuICAgIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEludG9WaWV3ID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhdm9pZCBzbW9vdGggYmVoYXZpb3IgaWYgbm90IHJlcXVpcmVkXG4gICAgICBpZiAoc2hvdWxkQmFpbE91dChhcmd1bWVudHNbMF0pID09PSB0cnVlKSB7XG4gICAgICAgIG9yaWdpbmFsLnNjcm9sbEludG9WaWV3LmNhbGwoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHRydWUgOiBhcmd1bWVudHNbMF1cbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIExFVCBUSEUgU01PT1RITkVTUyBCRUdJTiFcbiAgICAgIHZhciBzY3JvbGxhYmxlUGFyZW50ID0gZmluZFNjcm9sbGFibGVQYXJlbnQodGhpcyk7XG4gICAgICB2YXIgcGFyZW50UmVjdHMgPSBzY3JvbGxhYmxlUGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIGNsaWVudFJlY3RzID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgaWYgKHNjcm9sbGFibGVQYXJlbnQgIT09IGQuYm9keSkge1xuICAgICAgICAvLyByZXZlYWwgZWxlbWVudCBpbnNpZGUgcGFyZW50XG4gICAgICAgIHNtb290aFNjcm9sbC5jYWxsKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgc2Nyb2xsYWJsZVBhcmVudCxcbiAgICAgICAgICBzY3JvbGxhYmxlUGFyZW50LnNjcm9sbExlZnQgKyBjbGllbnRSZWN0cy5sZWZ0IC0gcGFyZW50UmVjdHMubGVmdCxcbiAgICAgICAgICBzY3JvbGxhYmxlUGFyZW50LnNjcm9sbFRvcCArIGNsaWVudFJlY3RzLnRvcCAtIHBhcmVudFJlY3RzLnRvcFxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHJldmVhbCBwYXJlbnQgaW4gdmlld3BvcnQgdW5sZXNzIGlzIGZpeGVkXG4gICAgICAgIGlmICh3LmdldENvbXB1dGVkU3R5bGUoc2Nyb2xsYWJsZVBhcmVudCkucG9zaXRpb24gIT09ICdmaXhlZCcpIHtcbiAgICAgICAgICB3LnNjcm9sbEJ5KHtcbiAgICAgICAgICAgIGxlZnQ6IHBhcmVudFJlY3RzLmxlZnQsXG4gICAgICAgICAgICB0b3A6IHBhcmVudFJlY3RzLnRvcCxcbiAgICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByZXZlYWwgZWxlbWVudCBpbiB2aWV3cG9ydFxuICAgICAgICB3LnNjcm9sbEJ5KHtcbiAgICAgICAgICBsZWZ0OiBjbGllbnRSZWN0cy5sZWZ0LFxuICAgICAgICAgIHRvcDogY2xpZW50UmVjdHMudG9wLFxuICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIGNvbW1vbmpzXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7IHBvbHlmaWxsOiBwb2x5ZmlsbCB9O1xuICB9IGVsc2Uge1xuICAgIC8vIGdsb2JhbFxuICAgIHBvbHlmaWxsKCk7XG4gIH1cblxufSgpKTtcbiIsIi8qIVxuICogVW5pZHJhZ2dlciB2Mi40LjBcbiAqIERyYWdnYWJsZSBiYXNlIGNsYXNzXG4gKiBNSVQgbGljZW5zZVxuICovXG5cbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHVudXNlZDogdHJ1ZSwgdW5kZWY6IHRydWUsIHN0cmljdDogdHJ1ZSAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKmpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xuXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAndW5pcG9pbnRlci91bmlwb2ludGVyJ1xuICAgIF0sIGZ1bmN0aW9uKCBVbmlwb2ludGVyICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgVW5pcG9pbnRlciApO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgndW5pcG9pbnRlcicpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5VbmlkcmFnZ2VyID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHdpbmRvdy5Vbmlwb2ludGVyXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgVW5pcG9pbnRlciApIHtcblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBVbmlkcmFnZ2VyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIFVuaWRyYWdnZXIoKSB7fVxuXG4vLyBpbmhlcml0IFVuaXBvaW50ZXIgJiBFdkVtaXR0ZXJcbnZhciBwcm90byA9IFVuaWRyYWdnZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVW5pcG9pbnRlci5wcm90b3R5cGUgKTtcblxuLy8gLS0tLS0gYmluZCBzdGFydCAtLS0tLSAvL1xuXG5wcm90by5iaW5kSGFuZGxlcyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9iaW5kSGFuZGxlcyggdHJ1ZSApO1xufTtcblxucHJvdG8udW5iaW5kSGFuZGxlcyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9iaW5kSGFuZGxlcyggZmFsc2UgKTtcbn07XG5cbi8qKlxuICogQWRkIG9yIHJlbW92ZSBzdGFydCBldmVudFxuICogQHBhcmFtIHtCb29sZWFufSBpc0FkZFxuICovXG5wcm90by5fYmluZEhhbmRsZXMgPSBmdW5jdGlvbiggaXNBZGQgKSB7XG4gIC8vIG11bmdlIGlzQWRkLCBkZWZhdWx0IHRvIHRydWVcbiAgaXNBZGQgPSBpc0FkZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGlzQWRkO1xuICAvLyBiaW5kIGVhY2ggaGFuZGxlXG4gIHZhciBiaW5kTWV0aG9kID0gaXNBZGQgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG4gIHZhciB0b3VjaEFjdGlvbiA9IGlzQWRkID8gdGhpcy5fdG91Y2hBY3Rpb25WYWx1ZSA6ICcnO1xuICBmb3IgKCB2YXIgaT0wOyBpIDwgdGhpcy5oYW5kbGVzLmxlbmd0aDsgaSsrICkge1xuICAgIHZhciBoYW5kbGUgPSB0aGlzLmhhbmRsZXNbaV07XG4gICAgdGhpcy5fYmluZFN0YXJ0RXZlbnQoIGhhbmRsZSwgaXNBZGQgKTtcbiAgICBoYW5kbGVbIGJpbmRNZXRob2QgXSggJ2NsaWNrJywgdGhpcyApO1xuICAgIC8vIHRvdWNoLWFjdGlvbjogbm9uZSB0byBvdmVycmlkZSBicm93c2VyIHRvdWNoIGdlc3R1cmVzLiBtZXRhZml6enkvZmxpY2tpdHkjNTQwXG4gICAgaWYgKCB3aW5kb3cuUG9pbnRlckV2ZW50ICkge1xuICAgICAgaGFuZGxlLnN0eWxlLnRvdWNoQWN0aW9uID0gdG91Y2hBY3Rpb247XG4gICAgfVxuICB9XG59O1xuXG4vLyBwcm90b3R5cGUgc28gaXQgY2FuIGJlIG92ZXJ3cml0ZWFibGUgYnkgRmxpY2tpdHlcbnByb3RvLl90b3VjaEFjdGlvblZhbHVlID0gJ25vbmUnO1xuXG4vLyAtLS0tLSBzdGFydCBldmVudCAtLS0tLSAvL1xuXG4vKipcbiAqIHBvaW50ZXIgc3RhcnRcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50IG9yIFRvdWNofSBwb2ludGVyXG4gKi9cbnByb3RvLnBvaW50ZXJEb3duID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB2YXIgaXNPa2F5ID0gdGhpcy5va2F5UG9pbnRlckRvd24oIGV2ZW50ICk7XG4gIGlmICggIWlzT2theSApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gdHJhY2sgc3RhcnQgZXZlbnQgcG9zaXRpb25cbiAgLy8gU2FmYXJpIDkgb3ZlcnJpZGVzIHBhZ2VYIGFuZCBwYWdlWS4gVGhlc2UgdmFsdWVzIG5lZWRzIHRvIGJlIGNvcGllZC4gZmxpY2tpdHkjODQyXG4gIHRoaXMucG9pbnRlckRvd25Qb2ludGVyID0ge1xuICAgIHBhZ2VYOiBwb2ludGVyLnBhZ2VYLFxuICAgIHBhZ2VZOiBwb2ludGVyLnBhZ2VZLFxuICB9O1xuXG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIHRoaXMucG9pbnRlckRvd25CbHVyKCk7XG4gIC8vIGJpbmQgbW92ZSBhbmQgZW5kIGV2ZW50c1xuICB0aGlzLl9iaW5kUG9zdFN0YXJ0RXZlbnRzKCBldmVudCApO1xuICB0aGlzLmVtaXRFdmVudCggJ3BvaW50ZXJEb3duJywgWyBldmVudCwgcG9pbnRlciBdICk7XG59O1xuXG4vLyBub2RlcyB0aGF0IGhhdmUgdGV4dCBmaWVsZHNcbnZhciBjdXJzb3JOb2RlcyA9IHtcbiAgVEVYVEFSRUE6IHRydWUsXG4gIElOUFVUOiB0cnVlLFxuICBTRUxFQ1Q6IHRydWUsXG4gIE9QVElPTjogdHJ1ZSxcbn07XG5cbi8vIGlucHV0IHR5cGVzIHRoYXQgZG8gbm90IGhhdmUgdGV4dCBmaWVsZHNcbnZhciBjbGlja1R5cGVzID0ge1xuICByYWRpbzogdHJ1ZSxcbiAgY2hlY2tib3g6IHRydWUsXG4gIGJ1dHRvbjogdHJ1ZSxcbiAgc3VibWl0OiB0cnVlLFxuICBpbWFnZTogdHJ1ZSxcbiAgZmlsZTogdHJ1ZSxcbn07XG5cbi8vIGRpc21pc3MgaW5wdXRzIHdpdGggdGV4dCBmaWVsZHMuIGZsaWNraXR5IzQwMywgZmxpY2tpdHkjNDA0XG5wcm90by5va2F5UG9pbnRlckRvd24gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHZhciBpc0N1cnNvck5vZGUgPSBjdXJzb3JOb2Rlc1sgZXZlbnQudGFyZ2V0Lm5vZGVOYW1lIF07XG4gIHZhciBpc0NsaWNrVHlwZSA9IGNsaWNrVHlwZXNbIGV2ZW50LnRhcmdldC50eXBlIF07XG4gIHZhciBpc09rYXkgPSAhaXNDdXJzb3JOb2RlIHx8IGlzQ2xpY2tUeXBlO1xuICBpZiAoICFpc09rYXkgKSB7XG4gICAgdGhpcy5fcG9pbnRlclJlc2V0KCk7XG4gIH1cbiAgcmV0dXJuIGlzT2theTtcbn07XG5cbi8vIGtsdWRnZSB0byBibHVyIHByZXZpb3VzbHkgZm9jdXNlZCBpbnB1dFxucHJvdG8ucG9pbnRlckRvd25CbHVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBmb2N1c2VkID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgLy8gZG8gbm90IGJsdXIgYm9keSBmb3IgSUUxMCwgbWV0YWZpenp5L2ZsaWNraXR5IzExN1xuICB2YXIgY2FuQmx1ciA9IGZvY3VzZWQgJiYgZm9jdXNlZC5ibHVyICYmIGZvY3VzZWQgIT0gZG9jdW1lbnQuYm9keTtcbiAgaWYgKCBjYW5CbHVyICkge1xuICAgIGZvY3VzZWQuYmx1cigpO1xuICB9XG59O1xuXG4vLyAtLS0tLSBtb3ZlIGV2ZW50IC0tLS0tIC8vXG5cbi8qKlxuICogZHJhZyBtb3ZlXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICogQHBhcmFtIHtFdmVudCBvciBUb3VjaH0gcG9pbnRlclxuICovXG5wcm90by5wb2ludGVyTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdmFyIG1vdmVWZWN0b3IgPSB0aGlzLl9kcmFnUG9pbnRlck1vdmUoIGV2ZW50LCBwb2ludGVyICk7XG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlck1vdmUnLCBbIGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yIF0gKTtcbiAgdGhpcy5fZHJhZ01vdmUoIGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yICk7XG59O1xuXG4vLyBiYXNlIHBvaW50ZXIgbW92ZSBsb2dpY1xucHJvdG8uX2RyYWdQb2ludGVyTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdmFyIG1vdmVWZWN0b3IgPSB7XG4gICAgeDogcG9pbnRlci5wYWdlWCAtIHRoaXMucG9pbnRlckRvd25Qb2ludGVyLnBhZ2VYLFxuICAgIHk6IHBvaW50ZXIucGFnZVkgLSB0aGlzLnBvaW50ZXJEb3duUG9pbnRlci5wYWdlWVxuICB9O1xuICAvLyBzdGFydCBkcmFnIGlmIHBvaW50ZXIgaGFzIG1vdmVkIGZhciBlbm91Z2ggdG8gc3RhcnQgZHJhZ1xuICBpZiAoICF0aGlzLmlzRHJhZ2dpbmcgJiYgdGhpcy5oYXNEcmFnU3RhcnRlZCggbW92ZVZlY3RvciApICkge1xuICAgIHRoaXMuX2RyYWdTdGFydCggZXZlbnQsIHBvaW50ZXIgKTtcbiAgfVxuICByZXR1cm4gbW92ZVZlY3Rvcjtcbn07XG5cbi8vIGNvbmRpdGlvbiBpZiBwb2ludGVyIGhhcyBtb3ZlZCBmYXIgZW5vdWdoIHRvIHN0YXJ0IGRyYWdcbnByb3RvLmhhc0RyYWdTdGFydGVkID0gZnVuY3Rpb24oIG1vdmVWZWN0b3IgKSB7XG4gIHJldHVybiBNYXRoLmFicyggbW92ZVZlY3Rvci54ICkgPiAzIHx8IE1hdGguYWJzKCBtb3ZlVmVjdG9yLnkgKSA+IDM7XG59O1xuXG4vLyAtLS0tLSBlbmQgZXZlbnQgLS0tLS0gLy9cblxuLyoqXG4gKiBwb2ludGVyIHVwXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICogQHBhcmFtIHtFdmVudCBvciBUb3VjaH0gcG9pbnRlclxuICovXG5wcm90by5wb2ludGVyVXAgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlclVwJywgWyBldmVudCwgcG9pbnRlciBdICk7XG4gIHRoaXMuX2RyYWdQb2ludGVyVXAoIGV2ZW50LCBwb2ludGVyICk7XG59O1xuXG5wcm90by5fZHJhZ1BvaW50ZXJVcCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgaWYgKCB0aGlzLmlzRHJhZ2dpbmcgKSB7XG4gICAgdGhpcy5fZHJhZ0VuZCggZXZlbnQsIHBvaW50ZXIgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBwb2ludGVyIGRpZG4ndCBtb3ZlIGVub3VnaCBmb3IgZHJhZyB0byBzdGFydFxuICAgIHRoaXMuX3N0YXRpY0NsaWNrKCBldmVudCwgcG9pbnRlciApO1xuICB9XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBkcmFnIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIGRyYWdTdGFydFxucHJvdG8uX2RyYWdTdGFydCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5pc0RyYWdnaW5nID0gdHJ1ZTtcbiAgLy8gcHJldmVudCBjbGlja3NcbiAgdGhpcy5pc1ByZXZlbnRpbmdDbGlja3MgPSB0cnVlO1xuICB0aGlzLmRyYWdTdGFydCggZXZlbnQsIHBvaW50ZXIgKTtcbn07XG5cbnByb3RvLmRyYWdTdGFydCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5lbWl0RXZlbnQoICdkcmFnU3RhcnQnLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcbn07XG5cbi8vIGRyYWdNb3ZlXG5wcm90by5fZHJhZ01vdmUgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgKSB7XG4gIC8vIGRvIG5vdCBkcmFnIGlmIG5vdCBkcmFnZ2luZyB5ZXRcbiAgaWYgKCAhdGhpcy5pc0RyYWdnaW5nICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuZHJhZ01vdmUoIGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yICk7XG59O1xuXG5wcm90by5kcmFnTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgdGhpcy5lbWl0RXZlbnQoICdkcmFnTW92ZScsIFsgZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgXSApO1xufTtcblxuLy8gZHJhZ0VuZFxucHJvdG8uX2RyYWdFbmQgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIC8vIHNldCBmbGFnc1xuICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgLy8gcmUtZW5hYmxlIGNsaWNraW5nIGFzeW5jXG4gIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgIGRlbGV0ZSB0aGlzLmlzUHJldmVudGluZ0NsaWNrcztcbiAgfS5iaW5kKCB0aGlzICkgKTtcblxuICB0aGlzLmRyYWdFbmQoIGV2ZW50LCBwb2ludGVyICk7XG59O1xuXG5wcm90by5kcmFnRW5kID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLmVtaXRFdmVudCggJ2RyYWdFbmQnLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcbn07XG5cbi8vIC0tLS0tIG9uY2xpY2sgLS0tLS0gLy9cblxuLy8gaGFuZGxlIGFsbCBjbGlja3MgYW5kIHByZXZlbnQgY2xpY2tzIHdoZW4gZHJhZ2dpbmdcbnByb3RvLm9uY2xpY2sgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIGlmICggdGhpcy5pc1ByZXZlbnRpbmdDbGlja3MgKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gc3RhdGljQ2xpY2sgLS0tLS0gLy9cblxuLy8gdHJpZ2dlcmVkIGFmdGVyIHBvaW50ZXIgZG93biAmIHVwIHdpdGggbm8vdGlueSBtb3ZlbWVudFxucHJvdG8uX3N0YXRpY0NsaWNrID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICAvLyBpZ25vcmUgZW11bGF0ZWQgbW91c2UgdXAgY2xpY2tzXG4gIGlmICggdGhpcy5pc0lnbm9yaW5nTW91c2VVcCAmJiBldmVudC50eXBlID09ICdtb3VzZXVwJyApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLnN0YXRpY0NsaWNrKCBldmVudCwgcG9pbnRlciApO1xuXG4gIC8vIHNldCBmbGFnIGZvciBlbXVsYXRlZCBjbGlja3MgMzAwbXMgYWZ0ZXIgdG91Y2hlbmRcbiAgaWYgKCBldmVudC50eXBlICE9ICdtb3VzZXVwJyApIHtcbiAgICB0aGlzLmlzSWdub3JpbmdNb3VzZVVwID0gdHJ1ZTtcbiAgICAvLyByZXNldCBmbGFnIGFmdGVyIDMwMG1zXG4gICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICBkZWxldGUgdGhpcy5pc0lnbm9yaW5nTW91c2VVcDtcbiAgICB9LmJpbmQoIHRoaXMgKSwgNDAwICk7XG4gIH1cbn07XG5cbnByb3RvLnN0YXRpY0NsaWNrID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLmVtaXRFdmVudCggJ3N0YXRpY0NsaWNrJywgWyBldmVudCwgcG9pbnRlciBdICk7XG59O1xuXG4vLyAtLS0tLSB1dGlscyAtLS0tLSAvL1xuXG5VbmlkcmFnZ2VyLmdldFBvaW50ZXJQb2ludCA9IFVuaXBvaW50ZXIuZ2V0UG9pbnRlclBvaW50O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxucmV0dXJuIFVuaWRyYWdnZXI7XG5cbn0pKTtcbiIsIi8qIVxuICogVW5pcG9pbnRlciB2Mi40LjBcbiAqIGJhc2UgY2xhc3MgZm9yIGRvaW5nIG9uZSB0aGluZyB3aXRoIHBvaW50ZXIgZXZlbnRcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSwgc3RyaWN0OiB0cnVlICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qZ2xvYmFsIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAnZXYtZW1pdHRlci9ldi1lbWl0dGVyJ1xuICAgIF0sIGZ1bmN0aW9uKCBFdkVtaXR0ZXIgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBFdkVtaXR0ZXIgKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHJlcXVpcmUoJ2V2LWVtaXR0ZXInKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuVW5pcG9pbnRlciA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICB3aW5kb3cuRXZFbWl0dGVyXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRXZFbWl0dGVyICkge1xuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5mdW5jdGlvbiBVbmlwb2ludGVyKCkge31cblxuLy8gaW5oZXJpdCBFdkVtaXR0ZXJcbnZhciBwcm90byA9IFVuaXBvaW50ZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXZFbWl0dGVyLnByb3RvdHlwZSApO1xuXG5wcm90by5iaW5kU3RhcnRFdmVudCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICB0aGlzLl9iaW5kU3RhcnRFdmVudCggZWxlbSwgdHJ1ZSApO1xufTtcblxucHJvdG8udW5iaW5kU3RhcnRFdmVudCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICB0aGlzLl9iaW5kU3RhcnRFdmVudCggZWxlbSwgZmFsc2UgKTtcbn07XG5cbi8qKlxuICogQWRkIG9yIHJlbW92ZSBzdGFydCBldmVudFxuICogQHBhcmFtIHtCb29sZWFufSBpc0FkZCAtIHJlbW92ZSBpZiBmYWxzZXlcbiAqL1xucHJvdG8uX2JpbmRTdGFydEV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIGlzQWRkICkge1xuICAvLyBtdW5nZSBpc0FkZCwgZGVmYXVsdCB0byB0cnVlXG4gIGlzQWRkID0gaXNBZGQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBpc0FkZDtcbiAgdmFyIGJpbmRNZXRob2QgPSBpc0FkZCA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdyZW1vdmVFdmVudExpc3RlbmVyJztcblxuICAvLyBkZWZhdWx0IHRvIG1vdXNlIGV2ZW50c1xuICB2YXIgc3RhcnRFdmVudCA9ICdtb3VzZWRvd24nO1xuICBpZiAoICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyApIHtcbiAgICAvLyBIQUNLIHByZWZlciBUb3VjaCBFdmVudHMgYXMgeW91IGNhbiBwcmV2ZW50RGVmYXVsdCBvbiB0b3VjaHN0YXJ0IHRvXG4gICAgLy8gZGlzYWJsZSBzY3JvbGwgaW4gaU9TICYgbW9iaWxlIENocm9tZSBtZXRhZml6enkvZmxpY2tpdHkjMTE3N1xuICAgIHN0YXJ0RXZlbnQgPSAndG91Y2hzdGFydCc7XG4gIH0gZWxzZSBpZiAoIHdpbmRvdy5Qb2ludGVyRXZlbnQgKSB7XG4gICAgLy8gUG9pbnRlciBFdmVudHNcbiAgICBzdGFydEV2ZW50ID0gJ3BvaW50ZXJkb3duJztcbiAgfVxuICBlbGVtWyBiaW5kTWV0aG9kIF0oIHN0YXJ0RXZlbnQsIHRoaXMgKTtcbn07XG5cbi8vIHRyaWdnZXIgaGFuZGxlciBtZXRob2RzIGZvciBldmVudHNcbnByb3RvLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB2YXIgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XG4gIGlmICggdGhpc1sgbWV0aG9kIF0gKSB7XG4gICAgdGhpc1sgbWV0aG9kIF0oIGV2ZW50ICk7XG4gIH1cbn07XG5cbi8vIHJldHVybnMgdGhlIHRvdWNoIHRoYXQgd2UncmUga2VlcGluZyB0cmFjayBvZlxucHJvdG8uZ2V0VG91Y2ggPSBmdW5jdGlvbiggdG91Y2hlcyApIHtcbiAgZm9yICggdmFyIGk9MDsgaSA8IHRvdWNoZXMubGVuZ3RoOyBpKysgKSB7XG4gICAgdmFyIHRvdWNoID0gdG91Y2hlc1tpXTtcbiAgICBpZiAoIHRvdWNoLmlkZW50aWZpZXIgPT0gdGhpcy5wb2ludGVySWRlbnRpZmllciApIHtcbiAgICAgIHJldHVybiB0b3VjaDtcbiAgICB9XG4gIH1cbn07XG5cbi8vIC0tLS0tIHN0YXJ0IGV2ZW50IC0tLS0tIC8vXG5cbnByb3RvLm9ubW91c2Vkb3duID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICAvLyBkaXNtaXNzIGNsaWNrcyBmcm9tIHJpZ2h0IG9yIG1pZGRsZSBidXR0b25zXG4gIHZhciBidXR0b24gPSBldmVudC5idXR0b247XG4gIGlmICggYnV0dG9uICYmICggYnV0dG9uICE9PSAwICYmIGJ1dHRvbiAhPT0gMSApICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLl9wb2ludGVyRG93biggZXZlbnQsIGV2ZW50ICk7XG59O1xuXG5wcm90by5vbnRvdWNoc3RhcnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMuX3BvaW50ZXJEb3duKCBldmVudCwgZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0gKTtcbn07XG5cbnByb3RvLm9ucG9pbnRlcmRvd24gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMuX3BvaW50ZXJEb3duKCBldmVudCwgZXZlbnQgKTtcbn07XG5cbi8qKlxuICogcG9pbnRlciBzdGFydFxuICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnQgb3IgVG91Y2h9IHBvaW50ZXJcbiAqL1xucHJvdG8uX3BvaW50ZXJEb3duID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICAvLyBkaXNtaXNzIHJpZ2h0IGNsaWNrIGFuZCBvdGhlciBwb2ludGVyc1xuICAvLyBidXR0b24gPSAwIGlzIG9rYXksIDEtNCBub3RcbiAgaWYgKCBldmVudC5idXR0b24gfHwgdGhpcy5pc1BvaW50ZXJEb3duICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuaXNQb2ludGVyRG93biA9IHRydWU7XG4gIC8vIHNhdmUgcG9pbnRlciBpZGVudGlmaWVyIHRvIG1hdGNoIHVwIHRvdWNoIGV2ZW50c1xuICB0aGlzLnBvaW50ZXJJZGVudGlmaWVyID0gcG9pbnRlci5wb2ludGVySWQgIT09IHVuZGVmaW5lZCA/XG4gICAgLy8gcG9pbnRlcklkIGZvciBwb2ludGVyIGV2ZW50cywgdG91Y2guaW5kZW50aWZpZXIgZm9yIHRvdWNoIGV2ZW50c1xuICAgIHBvaW50ZXIucG9pbnRlcklkIDogcG9pbnRlci5pZGVudGlmaWVyO1xuXG4gIHRoaXMucG9pbnRlckRvd24oIGV2ZW50LCBwb2ludGVyICk7XG59O1xuXG5wcm90by5wb2ludGVyRG93biA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5fYmluZFBvc3RTdGFydEV2ZW50cyggZXZlbnQgKTtcbiAgdGhpcy5lbWl0RXZlbnQoICdwb2ludGVyRG93bicsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gaGFzaCBvZiBldmVudHMgdG8gYmUgYm91bmQgYWZ0ZXIgc3RhcnQgZXZlbnRcbnZhciBwb3N0U3RhcnRFdmVudHMgPSB7XG4gIG1vdXNlZG93bjogWyAnbW91c2Vtb3ZlJywgJ21vdXNldXAnIF0sXG4gIHRvdWNoc3RhcnQ6IFsgJ3RvdWNobW92ZScsICd0b3VjaGVuZCcsICd0b3VjaGNhbmNlbCcgXSxcbiAgcG9pbnRlcmRvd246IFsgJ3BvaW50ZXJtb3ZlJywgJ3BvaW50ZXJ1cCcsICdwb2ludGVyY2FuY2VsJyBdLFxufTtcblxucHJvdG8uX2JpbmRQb3N0U3RhcnRFdmVudHMgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIGlmICggIWV2ZW50ICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBnZXQgcHJvcGVyIGV2ZW50cyB0byBtYXRjaCBzdGFydCBldmVudFxuICB2YXIgZXZlbnRzID0gcG9zdFN0YXJ0RXZlbnRzWyBldmVudC50eXBlIF07XG4gIC8vIGJpbmQgZXZlbnRzIHRvIG5vZGVcbiAgZXZlbnRzLmZvckVhY2goIGZ1bmN0aW9uKCBldmVudE5hbWUgKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIGV2ZW50TmFtZSwgdGhpcyApO1xuICB9LCB0aGlzICk7XG4gIC8vIHNhdmUgdGhlc2UgYXJndW1lbnRzXG4gIHRoaXMuX2JvdW5kUG9pbnRlckV2ZW50cyA9IGV2ZW50cztcbn07XG5cbnByb3RvLl91bmJpbmRQb3N0U3RhcnRFdmVudHMgPSBmdW5jdGlvbigpIHtcbiAgLy8gY2hlY2sgZm9yIF9ib3VuZEV2ZW50cywgaW4gY2FzZSBkcmFnRW5kIHRyaWdnZXJlZCB0d2ljZSAob2xkIElFOCBidWcpXG4gIGlmICggIXRoaXMuX2JvdW5kUG9pbnRlckV2ZW50cyApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5fYm91bmRQb2ludGVyRXZlbnRzLmZvckVhY2goIGZ1bmN0aW9uKCBldmVudE5hbWUgKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIGV2ZW50TmFtZSwgdGhpcyApO1xuICB9LCB0aGlzICk7XG5cbiAgZGVsZXRlIHRoaXMuX2JvdW5kUG9pbnRlckV2ZW50cztcbn07XG5cbi8vIC0tLS0tIG1vdmUgZXZlbnQgLS0tLS0gLy9cblxucHJvdG8ub25tb3VzZW1vdmUgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMuX3BvaW50ZXJNb3ZlKCBldmVudCwgZXZlbnQgKTtcbn07XG5cbnByb3RvLm9ucG9pbnRlcm1vdmUgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIGlmICggZXZlbnQucG9pbnRlcklkID09IHRoaXMucG9pbnRlcklkZW50aWZpZXIgKSB7XG4gICAgdGhpcy5fcG9pbnRlck1vdmUoIGV2ZW50LCBldmVudCApO1xuICB9XG59O1xuXG5wcm90by5vbnRvdWNobW92ZSA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIHRvdWNoID0gdGhpcy5nZXRUb3VjaCggZXZlbnQuY2hhbmdlZFRvdWNoZXMgKTtcbiAgaWYgKCB0b3VjaCApIHtcbiAgICB0aGlzLl9wb2ludGVyTW92ZSggZXZlbnQsIHRvdWNoICk7XG4gIH1cbn07XG5cbi8qKlxuICogcG9pbnRlciBtb3ZlXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICogQHBhcmFtIHtFdmVudCBvciBUb3VjaH0gcG9pbnRlclxuICogQHByaXZhdGVcbiAqL1xucHJvdG8uX3BvaW50ZXJNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLnBvaW50ZXJNb3ZlKCBldmVudCwgcG9pbnRlciApO1xufTtcblxuLy8gcHVibGljXG5wcm90by5wb2ludGVyTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5lbWl0RXZlbnQoICdwb2ludGVyTW92ZScsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gLS0tLS0gZW5kIGV2ZW50IC0tLS0tIC8vXG5cblxucHJvdG8ub25tb3VzZXVwID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLl9wb2ludGVyVXAoIGV2ZW50LCBldmVudCApO1xufTtcblxucHJvdG8ub25wb2ludGVydXAgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIGlmICggZXZlbnQucG9pbnRlcklkID09IHRoaXMucG9pbnRlcklkZW50aWZpZXIgKSB7XG4gICAgdGhpcy5fcG9pbnRlclVwKCBldmVudCwgZXZlbnQgKTtcbiAgfVxufTtcblxucHJvdG8ub250b3VjaGVuZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIHRvdWNoID0gdGhpcy5nZXRUb3VjaCggZXZlbnQuY2hhbmdlZFRvdWNoZXMgKTtcbiAgaWYgKCB0b3VjaCApIHtcbiAgICB0aGlzLl9wb2ludGVyVXAoIGV2ZW50LCB0b3VjaCApO1xuICB9XG59O1xuXG4vKipcbiAqIHBvaW50ZXIgdXBcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50IG9yIFRvdWNofSBwb2ludGVyXG4gKiBAcHJpdmF0ZVxuICovXG5wcm90by5fcG9pbnRlclVwID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLl9wb2ludGVyRG9uZSgpO1xuICB0aGlzLnBvaW50ZXJVcCggZXZlbnQsIHBvaW50ZXIgKTtcbn07XG5cbi8vIHB1YmxpY1xucHJvdG8ucG9pbnRlclVwID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLmVtaXRFdmVudCggJ3BvaW50ZXJVcCcsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gLS0tLS0gcG9pbnRlciBkb25lIC0tLS0tIC8vXG5cbi8vIHRyaWdnZXJlZCBvbiBwb2ludGVyIHVwICYgcG9pbnRlciBjYW5jZWxcbnByb3RvLl9wb2ludGVyRG9uZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9wb2ludGVyUmVzZXQoKTtcbiAgdGhpcy5fdW5iaW5kUG9zdFN0YXJ0RXZlbnRzKCk7XG4gIHRoaXMucG9pbnRlckRvbmUoKTtcbn07XG5cbnByb3RvLl9wb2ludGVyUmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgLy8gcmVzZXQgcHJvcGVydGllc1xuICB0aGlzLmlzUG9pbnRlckRvd24gPSBmYWxzZTtcbiAgZGVsZXRlIHRoaXMucG9pbnRlcklkZW50aWZpZXI7XG59O1xuXG5wcm90by5wb2ludGVyRG9uZSA9IG5vb3A7XG5cbi8vIC0tLS0tIHBvaW50ZXIgY2FuY2VsIC0tLS0tIC8vXG5cbnByb3RvLm9ucG9pbnRlcmNhbmNlbCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgaWYgKCBldmVudC5wb2ludGVySWQgPT0gdGhpcy5wb2ludGVySWRlbnRpZmllciApIHtcbiAgICB0aGlzLl9wb2ludGVyQ2FuY2VsKCBldmVudCwgZXZlbnQgKTtcbiAgfVxufTtcblxucHJvdG8ub250b3VjaGNhbmNlbCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIHRvdWNoID0gdGhpcy5nZXRUb3VjaCggZXZlbnQuY2hhbmdlZFRvdWNoZXMgKTtcbiAgaWYgKCB0b3VjaCApIHtcbiAgICB0aGlzLl9wb2ludGVyQ2FuY2VsKCBldmVudCwgdG91Y2ggKTtcbiAgfVxufTtcblxuLyoqXG4gKiBwb2ludGVyIGNhbmNlbFxuICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnQgb3IgVG91Y2h9IHBvaW50ZXJcbiAqIEBwcml2YXRlXG4gKi9cbnByb3RvLl9wb2ludGVyQ2FuY2VsID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLl9wb2ludGVyRG9uZSgpO1xuICB0aGlzLnBvaW50ZXJDYW5jZWwoIGV2ZW50LCBwb2ludGVyICk7XG59O1xuXG4vLyBwdWJsaWNcbnByb3RvLnBvaW50ZXJDYW5jZWwgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlckNhbmNlbCcsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbi8vIHV0aWxpdHkgZnVuY3Rpb24gZm9yIGdldHRpbmcgeC95IGNvb3JkcyBmcm9tIGV2ZW50XG5Vbmlwb2ludGVyLmdldFBvaW50ZXJQb2ludCA9IGZ1bmN0aW9uKCBwb2ludGVyICkge1xuICByZXR1cm4ge1xuICAgIHg6IHBvaW50ZXIucGFnZVgsXG4gICAgeTogcG9pbnRlci5wYWdlWVxuICB9O1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbnJldHVybiBVbmlwb2ludGVyO1xuXG59KSk7XG4iLCIhZnVuY3Rpb24obix0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZSh0KToobj1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOm58fHNlbGYpLkxhenlMb2FkPXQoKX0odGhpcywoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKCl7cmV0dXJuIG49T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24obil7Zm9yKHZhciB0PTE7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyl7dmFyIGU9YXJndW1lbnRzW3RdO2Zvcih2YXIgaSBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLGkpJiYobltpXT1lW2ldKX1yZXR1cm4gbn0sbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyxlPXQmJiEoXCJvbnNjcm9sbFwiaW4gd2luZG93KXx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvciYmLyhnbGV8aW5nfHJvKWJvdHxjcmF3bHxzcGlkZXIvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLGk9dCYmXCJJbnRlcnNlY3Rpb25PYnNlcnZlclwiaW4gd2luZG93LG89dCYmXCJjbGFzc0xpc3RcImluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpLGE9dCYmd2luZG93LmRldmljZVBpeGVsUmF0aW8+MSxyPXtlbGVtZW50c19zZWxlY3RvcjpcIi5sYXp5XCIsY29udGFpbmVyOmV8fHQ/ZG9jdW1lbnQ6bnVsbCx0aHJlc2hvbGQ6MzAwLHRocmVzaG9sZHM6bnVsbCxkYXRhX3NyYzpcInNyY1wiLGRhdGFfc3Jjc2V0Olwic3Jjc2V0XCIsZGF0YV9zaXplczpcInNpemVzXCIsZGF0YV9iZzpcImJnXCIsZGF0YV9iZ19oaWRwaTpcImJnLWhpZHBpXCIsZGF0YV9iZ19tdWx0aTpcImJnLW11bHRpXCIsZGF0YV9iZ19tdWx0aV9oaWRwaTpcImJnLW11bHRpLWhpZHBpXCIsZGF0YV9iZ19zZXQ6XCJiZy1zZXRcIixkYXRhX3Bvc3RlcjpcInBvc3RlclwiLGNsYXNzX2FwcGxpZWQ6XCJhcHBsaWVkXCIsY2xhc3NfbG9hZGluZzpcImxvYWRpbmdcIixjbGFzc19sb2FkZWQ6XCJsb2FkZWRcIixjbGFzc19lcnJvcjpcImVycm9yXCIsY2xhc3NfZW50ZXJlZDpcImVudGVyZWRcIixjbGFzc19leGl0ZWQ6XCJleGl0ZWRcIix1bm9ic2VydmVfY29tcGxldGVkOiEwLHVub2JzZXJ2ZV9lbnRlcmVkOiExLGNhbmNlbF9vbl9leGl0OiEwLGNhbGxiYWNrX2VudGVyOm51bGwsY2FsbGJhY2tfZXhpdDpudWxsLGNhbGxiYWNrX2FwcGxpZWQ6bnVsbCxjYWxsYmFja19sb2FkaW5nOm51bGwsY2FsbGJhY2tfbG9hZGVkOm51bGwsY2FsbGJhY2tfZXJyb3I6bnVsbCxjYWxsYmFja19maW5pc2g6bnVsbCxjYWxsYmFja19jYW5jZWw6bnVsbCx1c2VfbmF0aXZlOiExLHJlc3RvcmVfb25fZXJyb3I6ITF9LGM9ZnVuY3Rpb24odCl7cmV0dXJuIG4oe30scix0KX0sbD1mdW5jdGlvbihuLHQpe3ZhciBlLGk9XCJMYXp5TG9hZDo6SW5pdGlhbGl6ZWRcIixvPW5ldyBuKHQpO3RyeXtlPW5ldyBDdXN0b21FdmVudChpLHtkZXRhaWw6e2luc3RhbmNlOm99fSl9Y2F0Y2gobil7KGU9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJDdXN0b21FdmVudFwiKSkuaW5pdEN1c3RvbUV2ZW50KGksITEsITEse2luc3RhbmNlOm99KX13aW5kb3cuZGlzcGF0Y2hFdmVudChlKX0sdT1cInNyY1wiLHM9XCJzcmNzZXRcIixkPVwic2l6ZXNcIixmPVwicG9zdGVyXCIsXz1cImxsT3JpZ2luYWxBdHRyc1wiLGc9XCJkYXRhXCIsdj1cImxvYWRpbmdcIixiPVwibG9hZGVkXCIsbT1cImFwcGxpZWRcIixwPVwiZXJyb3JcIixoPVwibmF0aXZlXCIsRT1cImRhdGEtXCIsST1cImxsLXN0YXR1c1wiLHk9ZnVuY3Rpb24obix0KXtyZXR1cm4gbi5nZXRBdHRyaWJ1dGUoRSt0KX0saz1mdW5jdGlvbihuKXtyZXR1cm4geShuLEkpfSx3PWZ1bmN0aW9uKG4sdCl7cmV0dXJuIGZ1bmN0aW9uKG4sdCxlKXt2YXIgaT1cImRhdGEtbGwtc3RhdHVzXCI7bnVsbCE9PWU/bi5zZXRBdHRyaWJ1dGUoaSxlKTpuLnJlbW92ZUF0dHJpYnV0ZShpKX0obiwwLHQpfSxBPWZ1bmN0aW9uKG4pe3JldHVybiB3KG4sbnVsbCl9LEw9ZnVuY3Rpb24obil7cmV0dXJuIG51bGw9PT1rKG4pfSxPPWZ1bmN0aW9uKG4pe3JldHVybiBrKG4pPT09aH0seD1bdixiLG0scF0sQz1mdW5jdGlvbihuLHQsZSxpKXtuJiYodm9pZCAwPT09aT92b2lkIDA9PT1lP24odCk6bih0LGUpOm4odCxlLGkpKX0sTj1mdW5jdGlvbihuLHQpe28/bi5jbGFzc0xpc3QuYWRkKHQpOm4uY2xhc3NOYW1lKz0obi5jbGFzc05hbWU/XCIgXCI6XCJcIikrdH0sTT1mdW5jdGlvbihuLHQpe28/bi5jbGFzc0xpc3QucmVtb3ZlKHQpOm4uY2xhc3NOYW1lPW4uY2xhc3NOYW1lLnJlcGxhY2UobmV3IFJlZ0V4cChcIihefFxcXFxzKylcIit0K1wiKFxcXFxzK3wkKVwiKSxcIiBcIikucmVwbGFjZSgvXlxccysvLFwiXCIpLnJlcGxhY2UoL1xccyskLyxcIlwiKX0sej1mdW5jdGlvbihuKXtyZXR1cm4gbi5sbFRlbXBJbWFnZX0sVD1mdW5jdGlvbihuLHQpe2lmKHQpe3ZhciBlPXQuX29ic2VydmVyO2UmJmUudW5vYnNlcnZlKG4pfX0sUj1mdW5jdGlvbihuLHQpe24mJihuLmxvYWRpbmdDb3VudCs9dCl9LEc9ZnVuY3Rpb24obix0KXtuJiYobi50b0xvYWRDb3VudD10KX0saj1mdW5jdGlvbihuKXtmb3IodmFyIHQsZT1bXSxpPTA7dD1uLmNoaWxkcmVuW2ldO2krPTEpXCJTT1VSQ0VcIj09PXQudGFnTmFtZSYmZS5wdXNoKHQpO3JldHVybiBlfSxEPWZ1bmN0aW9uKG4sdCl7dmFyIGU9bi5wYXJlbnROb2RlO2UmJlwiUElDVFVSRVwiPT09ZS50YWdOYW1lJiZqKGUpLmZvckVhY2godCl9LEg9ZnVuY3Rpb24obix0KXtqKG4pLmZvckVhY2godCl9LFY9W3VdLEY9W3UsZl0sQj1bdSxzLGRdLEo9W2ddLFA9ZnVuY3Rpb24obil7cmV0dXJuISFuW19dfSxTPWZ1bmN0aW9uKG4pe3JldHVybiBuW19dfSxVPWZ1bmN0aW9uKG4pe3JldHVybiBkZWxldGUgbltfXX0sJD1mdW5jdGlvbihuLHQpe2lmKCFQKG4pKXt2YXIgZT17fTt0LmZvckVhY2goKGZ1bmN0aW9uKHQpe2VbdF09bi5nZXRBdHRyaWJ1dGUodCl9KSksbltfXT1lfX0scT1mdW5jdGlvbihuLHQpe2lmKFAobikpe3ZhciBlPVMobik7dC5mb3JFYWNoKChmdW5jdGlvbih0KXshZnVuY3Rpb24obix0LGUpe2U/bi5zZXRBdHRyaWJ1dGUodCxlKTpuLnJlbW92ZUF0dHJpYnV0ZSh0KX0obix0LGVbdF0pfSkpfX0sSz1mdW5jdGlvbihuLHQsZSl7TihuLHQuY2xhc3NfYXBwbGllZCksdyhuLG0pLGUmJih0LnVub2JzZXJ2ZV9jb21wbGV0ZWQmJlQobix0KSxDKHQuY2FsbGJhY2tfYXBwbGllZCxuLGUpKX0sUT1mdW5jdGlvbihuLHQsZSl7TihuLHQuY2xhc3NfbG9hZGluZyksdyhuLHYpLGUmJihSKGUsMSksQyh0LmNhbGxiYWNrX2xvYWRpbmcsbixlKSl9LFc9ZnVuY3Rpb24obix0LGUpe2UmJm4uc2V0QXR0cmlidXRlKHQsZSl9LFg9ZnVuY3Rpb24obix0KXtXKG4sZCx5KG4sdC5kYXRhX3NpemVzKSksVyhuLHMseShuLHQuZGF0YV9zcmNzZXQpKSxXKG4sdSx5KG4sdC5kYXRhX3NyYykpfSxZPXtJTUc6ZnVuY3Rpb24obix0KXtEKG4sKGZ1bmN0aW9uKG4peyQobixCKSxYKG4sdCl9KSksJChuLEIpLFgobix0KX0sSUZSQU1FOmZ1bmN0aW9uKG4sdCl7JChuLFYpLFcobix1LHkobix0LmRhdGFfc3JjKSl9LFZJREVPOmZ1bmN0aW9uKG4sdCl7SChuLChmdW5jdGlvbihuKXskKG4sViksVyhuLHUseShuLHQuZGF0YV9zcmMpKX0pKSwkKG4sRiksVyhuLGYseShuLHQuZGF0YV9wb3N0ZXIpKSxXKG4sdSx5KG4sdC5kYXRhX3NyYykpLG4ubG9hZCgpfSxPQkpFQ1Q6ZnVuY3Rpb24obix0KXskKG4sSiksVyhuLGcseShuLHQuZGF0YV9zcmMpKX19LFo9W1wiSU1HXCIsXCJJRlJBTUVcIixcIlZJREVPXCIsXCJPQkpFQ1RcIl0sbm49ZnVuY3Rpb24obix0KXshdHx8ZnVuY3Rpb24obil7cmV0dXJuIG4ubG9hZGluZ0NvdW50PjB9KHQpfHxmdW5jdGlvbihuKXtyZXR1cm4gbi50b0xvYWRDb3VudD4wfSh0KXx8QyhuLmNhbGxiYWNrX2ZpbmlzaCx0KX0sdG49ZnVuY3Rpb24obix0LGUpe24uYWRkRXZlbnRMaXN0ZW5lcih0LGUpLG4ubGxFdkxpc25yc1t0XT1lfSxlbj1mdW5jdGlvbihuLHQsZSl7bi5yZW1vdmVFdmVudExpc3RlbmVyKHQsZSl9LG9uPWZ1bmN0aW9uKG4pe3JldHVybiEhbi5sbEV2TGlzbnJzfSxhbj1mdW5jdGlvbihuKXtpZihvbihuKSl7dmFyIHQ9bi5sbEV2TGlzbnJzO2Zvcih2YXIgZSBpbiB0KXt2YXIgaT10W2VdO2VuKG4sZSxpKX1kZWxldGUgbi5sbEV2TGlzbnJzfX0scm49ZnVuY3Rpb24obix0LGUpeyFmdW5jdGlvbihuKXtkZWxldGUgbi5sbFRlbXBJbWFnZX0obiksUihlLC0xKSxmdW5jdGlvbihuKXtuJiYobi50b0xvYWRDb3VudC09MSl9KGUpLE0obix0LmNsYXNzX2xvYWRpbmcpLHQudW5vYnNlcnZlX2NvbXBsZXRlZCYmVChuLGUpfSxjbj1mdW5jdGlvbihuLHQsZSl7dmFyIGk9eihuKXx8bjtvbihpKXx8ZnVuY3Rpb24obix0LGUpe29uKG4pfHwobi5sbEV2TGlzbnJzPXt9KTt2YXIgaT1cIlZJREVPXCI9PT1uLnRhZ05hbWU/XCJsb2FkZWRkYXRhXCI6XCJsb2FkXCI7dG4obixpLHQpLHRuKG4sXCJlcnJvclwiLGUpfShpLChmdW5jdGlvbihvKXshZnVuY3Rpb24obix0LGUsaSl7dmFyIG89Tyh0KTtybih0LGUsaSksTih0LGUuY2xhc3NfbG9hZGVkKSx3KHQsYiksQyhlLmNhbGxiYWNrX2xvYWRlZCx0LGkpLG98fG5uKGUsaSl9KDAsbix0LGUpLGFuKGkpfSksKGZ1bmN0aW9uKG8peyFmdW5jdGlvbihuLHQsZSxpKXt2YXIgbz1PKHQpO3JuKHQsZSxpKSxOKHQsZS5jbGFzc19lcnJvciksdyh0LHApLEMoZS5jYWxsYmFja19lcnJvcix0LGkpLGUucmVzdG9yZV9vbl9lcnJvciYmcSh0LEIpLG98fG5uKGUsaSl9KDAsbix0LGUpLGFuKGkpfSkpfSxsbj1mdW5jdGlvbihuLHQsZSl7IWZ1bmN0aW9uKG4pe3JldHVybiBaLmluZGV4T2Yobi50YWdOYW1lKT4tMX0obik/ZnVuY3Rpb24obix0LGUpeyFmdW5jdGlvbihuKXtuLmxsVGVtcEltYWdlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJJTUdcIil9KG4pLGNuKG4sdCxlKSxmdW5jdGlvbihuKXtQKG4pfHwobltfXT17YmFja2dyb3VuZEltYWdlOm4uc3R5bGUuYmFja2dyb3VuZEltYWdlfSl9KG4pLGZ1bmN0aW9uKG4sdCxlKXt2YXIgaT15KG4sdC5kYXRhX2JnKSxvPXkobix0LmRhdGFfYmdfaGlkcGkpLHI9YSYmbz9vOmk7ciYmKG4uc3R5bGUuYmFja2dyb3VuZEltYWdlPSd1cmwoXCInLmNvbmNhdChyLCdcIiknKSx6KG4pLnNldEF0dHJpYnV0ZSh1LHIpLFEobix0LGUpKX0obix0LGUpLGZ1bmN0aW9uKG4sdCxlKXt2YXIgaT15KG4sdC5kYXRhX2JnX211bHRpKSxvPXkobix0LmRhdGFfYmdfbXVsdGlfaGlkcGkpLHI9YSYmbz9vOmk7ciYmKG4uc3R5bGUuYmFja2dyb3VuZEltYWdlPXIsSyhuLHQsZSkpfShuLHQsZSksZnVuY3Rpb24obix0LGUpe3ZhciBpPXkobix0LmRhdGFfYmdfc2V0KTtpZihpKXt2YXIgbz1pLnNwbGl0KFwifFwiKSxhPW8ubWFwKChmdW5jdGlvbihuKXtyZXR1cm5cImltYWdlLXNldChcIi5jb25jYXQobixcIilcIil9KSk7bi5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2U9YS5qb2luKCksXCJcIj09PW4uc3R5bGUuYmFja2dyb3VuZEltYWdlJiYoYT1vLm1hcCgoZnVuY3Rpb24obil7cmV0dXJuXCItd2Via2l0LWltYWdlLXNldChcIi5jb25jYXQobixcIilcIil9KSksbi5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2U9YS5qb2luKCkpLEsobix0LGUpfX0obix0LGUpfShuLHQsZSk6ZnVuY3Rpb24obix0LGUpe2NuKG4sdCxlKSxmdW5jdGlvbihuLHQsZSl7dmFyIGk9WVtuLnRhZ05hbWVdO2kmJihpKG4sdCksUShuLHQsZSkpfShuLHQsZSl9KG4sdCxlKX0sdW49ZnVuY3Rpb24obil7bi5yZW1vdmVBdHRyaWJ1dGUodSksbi5yZW1vdmVBdHRyaWJ1dGUocyksbi5yZW1vdmVBdHRyaWJ1dGUoZCl9LHNuPWZ1bmN0aW9uKG4pe0QobiwoZnVuY3Rpb24obil7cShuLEIpfSkpLHEobixCKX0sZG49e0lNRzpzbixJRlJBTUU6ZnVuY3Rpb24obil7cShuLFYpfSxWSURFTzpmdW5jdGlvbihuKXtIKG4sKGZ1bmN0aW9uKG4pe3EobixWKX0pKSxxKG4sRiksbi5sb2FkKCl9LE9CSkVDVDpmdW5jdGlvbihuKXtxKG4sSil9fSxmbj1mdW5jdGlvbihuLHQpeyhmdW5jdGlvbihuKXt2YXIgdD1kbltuLnRhZ05hbWVdO3Q/dChuKTpmdW5jdGlvbihuKXtpZihQKG4pKXt2YXIgdD1TKG4pO24uc3R5bGUuYmFja2dyb3VuZEltYWdlPXQuYmFja2dyb3VuZEltYWdlfX0obil9KShuKSxmdW5jdGlvbihuLHQpe0wobil8fE8obil8fChNKG4sdC5jbGFzc19lbnRlcmVkKSxNKG4sdC5jbGFzc19leGl0ZWQpLE0obix0LmNsYXNzX2FwcGxpZWQpLE0obix0LmNsYXNzX2xvYWRpbmcpLE0obix0LmNsYXNzX2xvYWRlZCksTShuLHQuY2xhc3NfZXJyb3IpKX0obix0KSxBKG4pLFUobil9LF9uPVtcIklNR1wiLFwiSUZSQU1FXCIsXCJWSURFT1wiXSxnbj1mdW5jdGlvbihuKXtyZXR1cm4gbi51c2VfbmF0aXZlJiZcImxvYWRpbmdcImluIEhUTUxJbWFnZUVsZW1lbnQucHJvdG90eXBlfSx2bj1mdW5jdGlvbihuLHQsZSl7bi5mb3JFYWNoKChmdW5jdGlvbihuKXtyZXR1cm4gZnVuY3Rpb24obil7cmV0dXJuIG4uaXNJbnRlcnNlY3Rpbmd8fG4uaW50ZXJzZWN0aW9uUmF0aW8+MH0obik/ZnVuY3Rpb24obix0LGUsaSl7dmFyIG89ZnVuY3Rpb24obil7cmV0dXJuIHguaW5kZXhPZihrKG4pKT49MH0obik7dyhuLFwiZW50ZXJlZFwiKSxOKG4sZS5jbGFzc19lbnRlcmVkKSxNKG4sZS5jbGFzc19leGl0ZWQpLGZ1bmN0aW9uKG4sdCxlKXt0LnVub2JzZXJ2ZV9lbnRlcmVkJiZUKG4sZSl9KG4sZSxpKSxDKGUuY2FsbGJhY2tfZW50ZXIsbix0LGkpLG98fGxuKG4sZSxpKX0obi50YXJnZXQsbix0LGUpOmZ1bmN0aW9uKG4sdCxlLGkpe0wobil8fChOKG4sZS5jbGFzc19leGl0ZWQpLGZ1bmN0aW9uKG4sdCxlLGkpe2UuY2FuY2VsX29uX2V4aXQmJmZ1bmN0aW9uKG4pe3JldHVybiBrKG4pPT09dn0obikmJlwiSU1HXCI9PT1uLnRhZ05hbWUmJihhbihuKSxmdW5jdGlvbihuKXtEKG4sKGZ1bmN0aW9uKG4pe3VuKG4pfSkpLHVuKG4pfShuKSxzbihuKSxNKG4sZS5jbGFzc19sb2FkaW5nKSxSKGksLTEpLEEobiksQyhlLmNhbGxiYWNrX2NhbmNlbCxuLHQsaSkpfShuLHQsZSxpKSxDKGUuY2FsbGJhY2tfZXhpdCxuLHQsaSkpfShuLnRhcmdldCxuLHQsZSl9KSl9LGJuPWZ1bmN0aW9uKG4pe3JldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChuKX0sbW49ZnVuY3Rpb24obil7cmV0dXJuIG4uY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwobi5lbGVtZW50c19zZWxlY3Rvcil9LHBuPWZ1bmN0aW9uKG4pe3JldHVybiBmdW5jdGlvbihuKXtyZXR1cm4gayhuKT09PXB9KG4pfSxobj1mdW5jdGlvbihuLHQpe3JldHVybiBmdW5jdGlvbihuKXtyZXR1cm4gYm4obikuZmlsdGVyKEwpfShufHxtbih0KSl9LEVuPWZ1bmN0aW9uKG4sZSl7dmFyIG89YyhuKTt0aGlzLl9zZXR0aW5ncz1vLHRoaXMubG9hZGluZ0NvdW50PTAsZnVuY3Rpb24obix0KXtpJiYhZ24obikmJih0Ll9vYnNlcnZlcj1uZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGZ1bmN0aW9uKGUpe3ZuKGUsbix0KX0pLGZ1bmN0aW9uKG4pe3JldHVybntyb290Om4uY29udGFpbmVyPT09ZG9jdW1lbnQ/bnVsbDpuLmNvbnRhaW5lcixyb290TWFyZ2luOm4udGhyZXNob2xkc3x8bi50aHJlc2hvbGQrXCJweFwifX0obikpKX0obyx0aGlzKSxmdW5jdGlvbihuLGUpe3QmJihlLl9vbmxpbmVIYW5kbGVyPWZ1bmN0aW9uKCl7IWZ1bmN0aW9uKG4sdCl7dmFyIGU7KGU9bW4obiksYm4oZSkuZmlsdGVyKHBuKSkuZm9yRWFjaCgoZnVuY3Rpb24odCl7TSh0LG4uY2xhc3NfZXJyb3IpLEEodCl9KSksdC51cGRhdGUoKX0obixlKX0sd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIixlLl9vbmxpbmVIYW5kbGVyKSl9KG8sdGhpcyksdGhpcy51cGRhdGUoZSl9O3JldHVybiBFbi5wcm90b3R5cGU9e3VwZGF0ZTpmdW5jdGlvbihuKXt2YXIgdCxvLGE9dGhpcy5fc2V0dGluZ3Mscj1obihuLGEpO0codGhpcyxyLmxlbmd0aCksIWUmJmk/Z24oYSk/ZnVuY3Rpb24obix0LGUpe24uZm9yRWFjaCgoZnVuY3Rpb24obil7LTEhPT1fbi5pbmRleE9mKG4udGFnTmFtZSkmJmZ1bmN0aW9uKG4sdCxlKXtuLnNldEF0dHJpYnV0ZShcImxvYWRpbmdcIixcImxhenlcIiksY24obix0LGUpLGZ1bmN0aW9uKG4sdCl7dmFyIGU9WVtuLnRhZ05hbWVdO2UmJmUobix0KX0obix0KSx3KG4saCl9KG4sdCxlKX0pKSxHKGUsMCl9KHIsYSx0aGlzKToobz1yLGZ1bmN0aW9uKG4pe24uZGlzY29ubmVjdCgpfSh0PXRoaXMuX29ic2VydmVyKSxmdW5jdGlvbihuLHQpe3QuZm9yRWFjaCgoZnVuY3Rpb24odCl7bi5vYnNlcnZlKHQpfSkpfSh0LG8pKTp0aGlzLmxvYWRBbGwocil9LGRlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLl9vYnNlcnZlciYmdGhpcy5fb2JzZXJ2ZXIuZGlzY29ubmVjdCgpLHQmJndpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwib25saW5lXCIsdGhpcy5fb25saW5lSGFuZGxlciksbW4odGhpcy5fc2V0dGluZ3MpLmZvckVhY2goKGZ1bmN0aW9uKG4pe1Uobil9KSksZGVsZXRlIHRoaXMuX29ic2VydmVyLGRlbGV0ZSB0aGlzLl9zZXR0aW5ncyxkZWxldGUgdGhpcy5fb25saW5lSGFuZGxlcixkZWxldGUgdGhpcy5sb2FkaW5nQ291bnQsZGVsZXRlIHRoaXMudG9Mb2FkQ291bnR9LGxvYWRBbGw6ZnVuY3Rpb24obil7dmFyIHQ9dGhpcyxlPXRoaXMuX3NldHRpbmdzO2huKG4sZSkuZm9yRWFjaCgoZnVuY3Rpb24obil7VChuLHQpLGxuKG4sZSx0KX0pKX0scmVzdG9yZUFsbDpmdW5jdGlvbigpe3ZhciBuPXRoaXMuX3NldHRpbmdzO21uKG4pLmZvckVhY2goKGZ1bmN0aW9uKHQpe2ZuKHQsbil9KSl9fSxFbi5sb2FkPWZ1bmN0aW9uKG4sdCl7dmFyIGU9Yyh0KTtsbihuLGUpfSxFbi5yZXNldFN0YXR1cz1mdW5jdGlvbihuKXtBKG4pfSx0JiZmdW5jdGlvbihuLHQpe2lmKHQpaWYodC5sZW5ndGgpZm9yKHZhciBlLGk9MDtlPXRbaV07aSs9MSlsKG4sZSk7ZWxzZSBsKG4sdCl9KEVuLHdpbmRvdy5sYXp5TG9hZE9wdGlvbnMpLEVufSkpO1xuIiwiaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IHsgbmF0aXZlQ3JlYXRlIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuXG4vLyBDcmVhdGUgYSBuYWtlZCBmdW5jdGlvbiByZWZlcmVuY2UgZm9yIHN1cnJvZ2F0ZS1wcm90b3R5cGUtc3dhcHBpbmcuXG5mdW5jdGlvbiBjdG9yKCkge1xuICByZXR1cm4gZnVuY3Rpb24oKXt9O1xufVxuXG4vLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBuZXcgb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSBhbm90aGVyLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmFzZUNyZWF0ZShwcm90b3R5cGUpIHtcbiAgaWYgKCFpc09iamVjdChwcm90b3R5cGUpKSByZXR1cm4ge307XG4gIGlmIChuYXRpdmVDcmVhdGUpIHJldHVybiBuYXRpdmVDcmVhdGUocHJvdG90eXBlKTtcbiAgdmFyIEN0b3IgPSBjdG9yKCk7XG4gIEN0b3IucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICB2YXIgcmVzdWx0ID0gbmV3IEN0b3I7XG4gIEN0b3IucHJvdG90eXBlID0gbnVsbDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCBpZGVudGl0eSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IG1hdGNoZXIgZnJvbSAnLi9tYXRjaGVyLmpzJztcbmltcG9ydCBwcm9wZXJ0eSBmcm9tICcuL3Byb3BlcnR5LmpzJztcbmltcG9ydCBvcHRpbWl6ZUNiIGZyb20gJy4vX29wdGltaXplQ2IuanMnO1xuXG4vLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiB0byBnZW5lcmF0ZSBjYWxsYmFja3MgdGhhdCBjYW4gYmUgYXBwbGllZCB0byBlYWNoXG4vLyBlbGVtZW50IGluIGEgY29sbGVjdGlvbiwgcmV0dXJuaW5nIHRoZSBkZXNpcmVkIHJlc3VsdCDigJQgZWl0aGVyIGBfLmlkZW50aXR5YCxcbi8vIGFuIGFyYml0cmFyeSBjYWxsYmFjaywgYSBwcm9wZXJ0eSBtYXRjaGVyLCBvciBhIHByb3BlcnR5IGFjY2Vzc29yLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlLCBjb250ZXh0LCBhcmdDb3VudCkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHJldHVybiBvcHRpbWl6ZUNiKHZhbHVlLCBjb250ZXh0LCBhcmdDb3VudCk7XG4gIGlmIChpc09iamVjdCh2YWx1ZSkgJiYgIWlzQXJyYXkodmFsdWUpKSByZXR1cm4gbWF0Y2hlcih2YWx1ZSk7XG4gIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG59XG4iLCJpbXBvcnQgXyBmcm9tICcuL3VuZGVyc2NvcmUuanMnO1xuaW1wb3J0IGJhc2VJdGVyYXRlZSBmcm9tICcuL19iYXNlSXRlcmF0ZWUuanMnO1xuaW1wb3J0IGl0ZXJhdGVlIGZyb20gJy4vaXRlcmF0ZWUuanMnO1xuXG4vLyBUaGUgZnVuY3Rpb24gd2UgY2FsbCBpbnRlcm5hbGx5IHRvIGdlbmVyYXRlIGEgY2FsbGJhY2suIEl0IGludm9rZXNcbi8vIGBfLml0ZXJhdGVlYCBpZiBvdmVycmlkZGVuLCBvdGhlcndpc2UgYGJhc2VJdGVyYXRlZWAuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYih2YWx1ZSwgY29udGV4dCwgYXJnQ291bnQpIHtcbiAgaWYgKF8uaXRlcmF0ZWUgIT09IGl0ZXJhdGVlKSByZXR1cm4gXy5pdGVyYXRlZSh2YWx1ZSwgY29udGV4dCk7XG4gIHJldHVybiBiYXNlSXRlcmF0ZWUodmFsdWUsIGNvbnRleHQsIGFyZ0NvdW50KTtcbn1cbiIsImltcG9ydCBfIGZyb20gJy4vdW5kZXJzY29yZS5qcyc7XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBjb250aW51ZSBjaGFpbmluZyBpbnRlcm1lZGlhdGUgcmVzdWx0cy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNoYWluUmVzdWx0KGluc3RhbmNlLCBvYmopIHtcbiAgcmV0dXJuIGluc3RhbmNlLl9jaGFpbiA/IF8ob2JqKS5jaGFpbigpIDogb2JqO1xufVxuIiwiaW1wb3J0IHsgbm9uRW51bWVyYWJsZVByb3BzLCBPYmpQcm90byB9IGZyb20gJy4vX3NldHVwLmpzJztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgaGFzIGZyb20gJy4vX2hhcy5qcyc7XG5cbi8vIEludGVybmFsIGhlbHBlciB0byBjcmVhdGUgYSBzaW1wbGUgbG9va3VwIHN0cnVjdHVyZS5cbi8vIGBjb2xsZWN0Tm9uRW51bVByb3BzYCB1c2VkIHRvIGRlcGVuZCBvbiBgXy5jb250YWluc2AsIGJ1dCB0aGlzIGxlZCB0b1xuLy8gY2lyY3VsYXIgaW1wb3J0cy4gYGVtdWxhdGVkU2V0YCBpcyBhIG9uZS1vZmYgc29sdXRpb24gdGhhdCBvbmx5IHdvcmtzIGZvclxuLy8gYXJyYXlzIG9mIHN0cmluZ3MuXG5mdW5jdGlvbiBlbXVsYXRlZFNldChrZXlzKSB7XG4gIHZhciBoYXNoID0ge307XG4gIGZvciAodmFyIGwgPSBrZXlzLmxlbmd0aCwgaSA9IDA7IGkgPCBsOyArK2kpIGhhc2hba2V5c1tpXV0gPSB0cnVlO1xuICByZXR1cm4ge1xuICAgIGNvbnRhaW5zOiBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIGhhc2hba2V5XSA9PT0gdHJ1ZTsgfSxcbiAgICBwdXNoOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIGhhc2hba2V5XSA9IHRydWU7XG4gICAgICByZXR1cm4ga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICB9O1xufVxuXG4vLyBJbnRlcm5hbCBoZWxwZXIuIENoZWNrcyBga2V5c2AgZm9yIHRoZSBwcmVzZW5jZSBvZiBrZXlzIGluIElFIDwgOSB0aGF0IHdvbid0XG4vLyBiZSBpdGVyYXRlZCBieSBgZm9yIGtleSBpbiAuLi5gIGFuZCB0aHVzIG1pc3NlZC4gRXh0ZW5kcyBga2V5c2AgaW4gcGxhY2UgaWZcbi8vIG5lZWRlZC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbGxlY3ROb25FbnVtUHJvcHMob2JqLCBrZXlzKSB7XG4gIGtleXMgPSBlbXVsYXRlZFNldChrZXlzKTtcbiAgdmFyIG5vbkVudW1JZHggPSBub25FbnVtZXJhYmxlUHJvcHMubGVuZ3RoO1xuICB2YXIgY29uc3RydWN0b3IgPSBvYmouY29uc3RydWN0b3I7XG4gIHZhciBwcm90byA9IChpc0Z1bmN0aW9uKGNvbnN0cnVjdG9yKSAmJiBjb25zdHJ1Y3Rvci5wcm90b3R5cGUpIHx8IE9ialByb3RvO1xuXG4gIC8vIENvbnN0cnVjdG9yIGlzIGEgc3BlY2lhbCBjYXNlLlxuICB2YXIgcHJvcCA9ICdjb25zdHJ1Y3Rvcic7XG4gIGlmIChoYXMob2JqLCBwcm9wKSAmJiAha2V5cy5jb250YWlucyhwcm9wKSkga2V5cy5wdXNoKHByb3ApO1xuXG4gIHdoaWxlIChub25FbnVtSWR4LS0pIHtcbiAgICBwcm9wID0gbm9uRW51bWVyYWJsZVByb3BzW25vbkVudW1JZHhdO1xuICAgIGlmIChwcm9wIGluIG9iaiAmJiBvYmpbcHJvcF0gIT09IHByb3RvW3Byb3BdICYmICFrZXlzLmNvbnRhaW5zKHByb3ApKSB7XG4gICAgICBrZXlzLnB1c2gocHJvcCk7XG4gICAgfVxuICB9XG59XG4iLCIvLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYXNzaWduZXIgZnVuY3Rpb25zLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQXNzaWduZXIoa2V5c0Z1bmMsIGRlZmF1bHRzKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBpZiAoZGVmYXVsdHMpIG9iaiA9IE9iamVjdChvYmopO1xuICAgIGlmIChsZW5ndGggPCAyIHx8IG9iaiA9PSBudWxsKSByZXR1cm4gb2JqO1xuICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaW5kZXhdLFxuICAgICAgICAgIGtleXMgPSBrZXlzRnVuYyhzb3VyY2UpLFxuICAgICAgICAgIGwgPSBrZXlzLmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICBpZiAoIWRlZmF1bHRzIHx8IG9ialtrZXldID09PSB2b2lkIDApIG9ialtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG59XG4iLCJpbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vLyBJbnRlcm5hbCBoZWxwZXIgdG8gZ2VuZXJhdGUgZnVuY3Rpb25zIGZvciBlc2NhcGluZyBhbmQgdW5lc2NhcGluZyBzdHJpbmdzXG4vLyB0by9mcm9tIEhUTUwgaW50ZXJwb2xhdGlvbi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUVzY2FwZXIobWFwKSB7XG4gIHZhciBlc2NhcGVyID0gZnVuY3Rpb24obWF0Y2gpIHtcbiAgICByZXR1cm4gbWFwW21hdGNoXTtcbiAgfTtcbiAgLy8gUmVnZXhlcyBmb3IgaWRlbnRpZnlpbmcgYSBrZXkgdGhhdCBuZWVkcyB0byBiZSBlc2NhcGVkLlxuICB2YXIgc291cmNlID0gJyg/OicgKyBrZXlzKG1hcCkuam9pbignfCcpICsgJyknO1xuICB2YXIgdGVzdFJlZ2V4cCA9IFJlZ0V4cChzb3VyY2UpO1xuICB2YXIgcmVwbGFjZVJlZ2V4cCA9IFJlZ0V4cChzb3VyY2UsICdnJyk7XG4gIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICBzdHJpbmcgPSBzdHJpbmcgPT0gbnVsbCA/ICcnIDogJycgKyBzdHJpbmc7XG4gICAgcmV0dXJuIHRlc3RSZWdleHAudGVzdChzdHJpbmcpID8gc3RyaW5nLnJlcGxhY2UocmVwbGFjZVJlZ2V4cCwgZXNjYXBlcikgOiBzdHJpbmc7XG4gIH07XG59XG4iLCJpbXBvcnQgZ2V0TGVuZ3RoIGZyb20gJy4vX2dldExlbmd0aC5qcyc7XG5pbXBvcnQgeyBzbGljZSB9IGZyb20gJy4vX3NldHVwLmpzJztcbmltcG9ydCBpc05hTiBmcm9tICcuL2lzTmFOLmpzJztcblxuLy8gSW50ZXJuYWwgZnVuY3Rpb24gdG8gZ2VuZXJhdGUgdGhlIGBfLmluZGV4T2ZgIGFuZCBgXy5sYXN0SW5kZXhPZmAgZnVuY3Rpb25zLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlSW5kZXhGaW5kZXIoZGlyLCBwcmVkaWNhdGVGaW5kLCBzb3J0ZWRJbmRleCkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIGl0ZW0sIGlkeCkge1xuICAgIHZhciBpID0gMCwgbGVuZ3RoID0gZ2V0TGVuZ3RoKGFycmF5KTtcbiAgICBpZiAodHlwZW9mIGlkeCA9PSAnbnVtYmVyJykge1xuICAgICAgaWYgKGRpciA+IDApIHtcbiAgICAgICAgaSA9IGlkeCA+PSAwID8gaWR4IDogTWF0aC5tYXgoaWR4ICsgbGVuZ3RoLCBpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlbmd0aCA9IGlkeCA+PSAwID8gTWF0aC5taW4oaWR4ICsgMSwgbGVuZ3RoKSA6IGlkeCArIGxlbmd0aCArIDE7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzb3J0ZWRJbmRleCAmJiBpZHggJiYgbGVuZ3RoKSB7XG4gICAgICBpZHggPSBzb3J0ZWRJbmRleChhcnJheSwgaXRlbSk7XG4gICAgICByZXR1cm4gYXJyYXlbaWR4XSA9PT0gaXRlbSA/IGlkeCA6IC0xO1xuICAgIH1cbiAgICBpZiAoaXRlbSAhPT0gaXRlbSkge1xuICAgICAgaWR4ID0gcHJlZGljYXRlRmluZChzbGljZS5jYWxsKGFycmF5LCBpLCBsZW5ndGgpLCBpc05hTik7XG4gICAgICByZXR1cm4gaWR4ID49IDAgPyBpZHggKyBpIDogLTE7XG4gICAgfVxuICAgIGZvciAoaWR4ID0gZGlyID4gMCA/IGkgOiBsZW5ndGggLSAxOyBpZHggPj0gMCAmJiBpZHggPCBsZW5ndGg7IGlkeCArPSBkaXIpIHtcbiAgICAgIGlmIChhcnJheVtpZHhdID09PSBpdGVtKSByZXR1cm4gaWR4O1xuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH07XG59XG4iLCJpbXBvcnQgY2IgZnJvbSAnLi9fY2IuanMnO1xuaW1wb3J0IGdldExlbmd0aCBmcm9tICcuL19nZXRMZW5ndGguanMnO1xuXG4vLyBJbnRlcm5hbCBmdW5jdGlvbiB0byBnZW5lcmF0ZSBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVByZWRpY2F0ZUluZGV4RmluZGVyKGRpcikge1xuICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgdmFyIGxlbmd0aCA9IGdldExlbmd0aChhcnJheSk7XG4gICAgdmFyIGluZGV4ID0gZGlyID4gMCA/IDAgOiBsZW5ndGggLSAxO1xuICAgIGZvciAoOyBpbmRleCA+PSAwICYmIGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSBkaXIpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSByZXR1cm4gaW5kZXg7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfTtcbn1cbiIsImltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL19pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuaW1wb3J0IG9wdGltaXplQ2IgZnJvbSAnLi9fb3B0aW1pemVDYi5qcyc7XG5cbi8vIEludGVybmFsIGhlbHBlciB0byBjcmVhdGUgYSByZWR1Y2luZyBmdW5jdGlvbiwgaXRlcmF0aW5nIGxlZnQgb3IgcmlnaHQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVSZWR1Y2UoZGlyKSB7XG4gIC8vIFdyYXAgY29kZSB0aGF0IHJlYXNzaWducyBhcmd1bWVudCB2YXJpYWJsZXMgaW4gYSBzZXBhcmF0ZSBmdW5jdGlvbiB0aGFuXG4gIC8vIHRoZSBvbmUgdGhhdCBhY2Nlc3NlcyBgYXJndW1lbnRzLmxlbmd0aGAgdG8gYXZvaWQgYSBwZXJmIGhpdC4gKCMxOTkxKVxuICB2YXIgcmVkdWNlciA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIG1lbW8sIGluaXRpYWwpIHtcbiAgICB2YXIgX2tleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBrZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChfa2V5cyB8fCBvYmopLmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBkaXIgPiAwID8gMCA6IGxlbmd0aCAtIDE7XG4gICAgaWYgKCFpbml0aWFsKSB7XG4gICAgICBtZW1vID0gb2JqW19rZXlzID8gX2tleXNbaW5kZXhdIDogaW5kZXhdO1xuICAgICAgaW5kZXggKz0gZGlyO1xuICAgIH1cbiAgICBmb3IgKDsgaW5kZXggPj0gMCAmJiBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gZGlyKSB7XG4gICAgICB2YXIgY3VycmVudEtleSA9IF9rZXlzID8gX2tleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICBtZW1vID0gaXRlcmF0ZWUobWVtbywgb2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgIH1cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgbWVtbywgY29udGV4dCkge1xuICAgIHZhciBpbml0aWFsID0gYXJndW1lbnRzLmxlbmd0aCA+PSAzO1xuICAgIHJldHVybiByZWR1Y2VyKG9iaiwgb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCwgNCksIG1lbW8sIGluaXRpYWwpO1xuICB9O1xufVxuIiwiaW1wb3J0IHsgTUFYX0FSUkFZX0lOREVYIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuXG4vLyBDb21tb24gaW50ZXJuYWwgbG9naWMgZm9yIGBpc0FycmF5TGlrZWAgYW5kIGBpc0J1ZmZlckxpa2VgLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU2l6ZVByb3BlcnR5Q2hlY2soZ2V0U2l6ZVByb3BlcnR5KSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgdmFyIHNpemVQcm9wZXJ0eSA9IGdldFNpemVQcm9wZXJ0eShjb2xsZWN0aW9uKTtcbiAgICByZXR1cm4gdHlwZW9mIHNpemVQcm9wZXJ0eSA9PSAnbnVtYmVyJyAmJiBzaXplUHJvcGVydHkgPj0gMCAmJiBzaXplUHJvcGVydHkgPD0gTUFYX0FSUkFZX0lOREVYO1xuICB9XG59XG4iLCIvLyBJbnRlcm5hbCBmdW5jdGlvbiB0byBvYnRhaW4gYSBuZXN0ZWQgcHJvcGVydHkgaW4gYG9iamAgYWxvbmcgYHBhdGhgLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVlcEdldChvYmosIHBhdGgpIHtcbiAgdmFyIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgIG9iaiA9IG9ialtwYXRoW2ldXTtcbiAgfVxuICByZXR1cm4gbGVuZ3RoID8gb2JqIDogdm9pZCAwO1xufVxuIiwiLy8gSW50ZXJuYWwgbGlzdCBvZiBIVE1MIGVudGl0aWVzIGZvciBlc2NhcGluZy5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgJyYnOiAnJmFtcDsnLFxuICAnPCc6ICcmbHQ7JyxcbiAgJz4nOiAnJmd0OycsXG4gICdcIic6ICcmcXVvdDsnLFxuICBcIidcIjogJyYjeDI3OycsXG4gICdgJzogJyYjeDYwOydcbn07XG4iLCJpbXBvcnQgYmFzZUNyZWF0ZSBmcm9tICcuL19iYXNlQ3JlYXRlLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcblxuLy8gSW50ZXJuYWwgZnVuY3Rpb24gdG8gZXhlY3V0ZSBgc291cmNlRnVuY2AgYm91bmQgdG8gYGNvbnRleHRgIHdpdGggb3B0aW9uYWxcbi8vIGBhcmdzYC4gRGV0ZXJtaW5lcyB3aGV0aGVyIHRvIGV4ZWN1dGUgYSBmdW5jdGlvbiBhcyBhIGNvbnN0cnVjdG9yIG9yIGFzIGFcbi8vIG5vcm1hbCBmdW5jdGlvbi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4ZWN1dGVCb3VuZChzb3VyY2VGdW5jLCBib3VuZEZ1bmMsIGNvbnRleHQsIGNhbGxpbmdDb250ZXh0LCBhcmdzKSB7XG4gIGlmICghKGNhbGxpbmdDb250ZXh0IGluc3RhbmNlb2YgYm91bmRGdW5jKSkgcmV0dXJuIHNvdXJjZUZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gIHZhciBzZWxmID0gYmFzZUNyZWF0ZShzb3VyY2VGdW5jLnByb3RvdHlwZSk7XG4gIHZhciByZXN1bHQgPSBzb3VyY2VGdW5jLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICBpZiAoaXNPYmplY3QocmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgcmV0dXJuIHNlbGY7XG59XG4iLCJpbXBvcnQgZ2V0TGVuZ3RoIGZyb20gJy4vX2dldExlbmd0aC5qcyc7XG5pbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9faXNBcnJheUxpa2UuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCBpc0FyZ3VtZW50cyBmcm9tICcuL2lzQXJndW1lbnRzLmpzJztcblxuLy8gSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gb2YgYSByZWN1cnNpdmUgYGZsYXR0ZW5gIGZ1bmN0aW9uLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmxhdHRlbihpbnB1dCwgZGVwdGgsIHN0cmljdCwgb3V0cHV0KSB7XG4gIG91dHB1dCA9IG91dHB1dCB8fCBbXTtcbiAgaWYgKCFkZXB0aCAmJiBkZXB0aCAhPT0gMCkge1xuICAgIGRlcHRoID0gSW5maW5pdHk7XG4gIH0gZWxzZSBpZiAoZGVwdGggPD0gMCkge1xuICAgIHJldHVybiBvdXRwdXQuY29uY2F0KGlucHV0KTtcbiAgfVxuICB2YXIgaWR4ID0gb3V0cHV0Lmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGdldExlbmd0aChpbnB1dCk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHZhciB2YWx1ZSA9IGlucHV0W2ldO1xuICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiYgKGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSkpIHtcbiAgICAgIC8vIEZsYXR0ZW4gY3VycmVudCBsZXZlbCBvZiBhcnJheSBvciBhcmd1bWVudHMgb2JqZWN0LlxuICAgICAgaWYgKGRlcHRoID4gMSkge1xuICAgICAgICBmbGF0dGVuKHZhbHVlLCBkZXB0aCAtIDEsIHN0cmljdCwgb3V0cHV0KTtcbiAgICAgICAgaWR4ID0gb3V0cHV0Lmxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBqID0gMCwgbGVuID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaiA8IGxlbikgb3V0cHV0W2lkeCsrXSA9IHZhbHVlW2orK107XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghc3RyaWN0KSB7XG4gICAgICBvdXRwdXRbaWR4KytdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG4iLCJpbXBvcnQgc2hhbGxvd1Byb3BlcnR5IGZyb20gJy4vX3NoYWxsb3dQcm9wZXJ0eS5qcyc7XG5cbi8vIEludGVybmFsIGhlbHBlciB0byBvYnRhaW4gdGhlIGBieXRlTGVuZ3RoYCBwcm9wZXJ0eSBvZiBhbiBvYmplY3QuXG5leHBvcnQgZGVmYXVsdCBzaGFsbG93UHJvcGVydHkoJ2J5dGVMZW5ndGgnKTtcbiIsImltcG9ydCBzaGFsbG93UHJvcGVydHkgZnJvbSAnLi9fc2hhbGxvd1Byb3BlcnR5LmpzJztcblxuLy8gSW50ZXJuYWwgaGVscGVyIHRvIG9idGFpbiB0aGUgYGxlbmd0aGAgcHJvcGVydHkgb2YgYW4gb2JqZWN0LlxuZXhwb3J0IGRlZmF1bHQgc2hhbGxvd1Byb3BlcnR5KCdsZW5ndGgnKTtcbiIsImltcG9ydCBjYiBmcm9tICcuL19jYi5qcyc7XG5pbXBvcnQgZWFjaCBmcm9tICcuL2VhY2guanMnO1xuXG4vLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiB1c2VkIGZvciBhZ2dyZWdhdGUgXCJncm91cCBieVwiIG9wZXJhdGlvbnMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBncm91cChiZWhhdmlvciwgcGFydGl0aW9uKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VsdCA9IHBhcnRpdGlvbiA/IFtbXSwgW11dIDoge307XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xuICAgICAgdmFyIGtleSA9IGl0ZXJhdGVlKHZhbHVlLCBpbmRleCwgb2JqKTtcbiAgICAgIGJlaGF2aW9yKHJlc3VsdCwgdmFsdWUsIGtleSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cbiIsImltcG9ydCB7IGhhc093blByb3BlcnR5IH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuXG4vLyBJbnRlcm5hbCBmdW5jdGlvbiB0byBjaGVjayB3aGV0aGVyIGBrZXlgIGlzIGFuIG93biBwcm9wZXJ0eSBuYW1lIG9mIGBvYmpgLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFzKG9iaiwga2V5KSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbn1cbiIsImltcG9ydCB0YWdUZXN0ZXIgZnJvbSAnLi9fdGFnVGVzdGVyLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgdGFnVGVzdGVyKCdPYmplY3QnKTtcbiIsImltcG9ydCBjcmVhdGVTaXplUHJvcGVydHlDaGVjayBmcm9tICcuL19jcmVhdGVTaXplUHJvcGVydHlDaGVjay5qcyc7XG5pbXBvcnQgZ2V0TGVuZ3RoIGZyb20gJy4vX2dldExlbmd0aC5qcyc7XG5cbi8vIEludGVybmFsIGhlbHBlciBmb3IgY29sbGVjdGlvbiBtZXRob2RzIHRvIGRldGVybWluZSB3aGV0aGVyIGEgY29sbGVjdGlvblxuLy8gc2hvdWxkIGJlIGl0ZXJhdGVkIGFzIGFuIGFycmF5IG9yIGFzIGFuIG9iamVjdC5cbi8vIFJlbGF0ZWQ6IGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b2xlbmd0aFxuLy8gQXZvaWRzIGEgdmVyeSBuYXN0eSBpT1MgOCBKSVQgYnVnIG9uIEFSTS02NC4gIzIwOTRcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVNpemVQcm9wZXJ0eUNoZWNrKGdldExlbmd0aCk7XG4iLCJpbXBvcnQgY3JlYXRlU2l6ZVByb3BlcnR5Q2hlY2sgZnJvbSAnLi9fY3JlYXRlU2l6ZVByb3BlcnR5Q2hlY2suanMnO1xuaW1wb3J0IGdldEJ5dGVMZW5ndGggZnJvbSAnLi9fZ2V0Qnl0ZUxlbmd0aC5qcyc7XG5cbi8vIEludGVybmFsIGhlbHBlciB0byBkZXRlcm1pbmUgd2hldGhlciB3ZSBzaG91bGQgc3BlbmQgZXh0ZW5zaXZlIGNoZWNrcyBhZ2FpbnN0XG4vLyBgQXJyYXlCdWZmZXJgIGV0IGFsLlxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU2l6ZVByb3BlcnR5Q2hlY2soZ2V0Qnl0ZUxlbmd0aCk7XG4iLCIvLyBJbnRlcm5hbCBgXy5waWNrYCBoZWxwZXIgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYGtleWAgaXMgYW4gZW51bWVyYWJsZVxuLy8gcHJvcGVydHkgbmFtZSBvZiBgb2JqYC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGtleUluT2JqKHZhbHVlLCBrZXksIG9iaikge1xuICByZXR1cm4ga2V5IGluIG9iajtcbn1cbiIsImltcG9ydCBnZXRMZW5ndGggZnJvbSAnLi9fZ2V0TGVuZ3RoLmpzJztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgYWxsS2V5cyBmcm9tICcuL2FsbEtleXMuanMnO1xuXG4vLyBTaW5jZSB0aGUgcmVndWxhciBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgdHlwZSB0ZXN0cyBkb24ndCB3b3JrIGZvclxuLy8gc29tZSB0eXBlcyBpbiBJRSAxMSwgd2UgdXNlIGEgZmluZ2VycHJpbnRpbmcgaGV1cmlzdGljIGluc3RlYWQsIGJhc2VkXG4vLyBvbiB0aGUgbWV0aG9kcy4gSXQncyBub3QgZ3JlYXQsIGJ1dCBpdCdzIHRoZSBiZXN0IHdlIGdvdC5cbi8vIFRoZSBmaW5nZXJwcmludCBtZXRob2QgbGlzdHMgYXJlIGRlZmluZWQgYmVsb3cuXG5leHBvcnQgZnVuY3Rpb24gaWUxMWZpbmdlcnByaW50KG1ldGhvZHMpIHtcbiAgdmFyIGxlbmd0aCA9IGdldExlbmd0aChtZXRob2RzKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGBNYXBgLCBgV2Vha01hcGAgYW5kIGBTZXRgIGhhdmUgbm8gZW51bWVyYWJsZSBrZXlzLlxuICAgIHZhciBrZXlzID0gYWxsS2V5cyhvYmopO1xuICAgIGlmIChnZXRMZW5ndGgoa2V5cykpIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWlzRnVuY3Rpb24ob2JqW21ldGhvZHNbaV1dKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBJZiB3ZSBhcmUgdGVzdGluZyBhZ2FpbnN0IGBXZWFrTWFwYCwgd2UgbmVlZCB0byBlbnN1cmUgdGhhdFxuICAgIC8vIGBvYmpgIGRvZXNuJ3QgaGF2ZSBhIGBmb3JFYWNoYCBtZXRob2QgaW4gb3JkZXIgdG8gZGlzdGluZ3Vpc2hcbiAgICAvLyBpdCBmcm9tIGEgcmVndWxhciBgTWFwYC5cbiAgICByZXR1cm4gbWV0aG9kcyAhPT0gd2Vha01hcE1ldGhvZHMgfHwgIWlzRnVuY3Rpb24ob2JqW2ZvckVhY2hOYW1lXSk7XG4gIH07XG59XG5cbi8vIEluIHRoZSBpbnRlcmVzdCBvZiBjb21wYWN0IG1pbmlmaWNhdGlvbiwgd2Ugd3JpdGVcbi8vIGVhY2ggc3RyaW5nIGluIHRoZSBmaW5nZXJwcmludHMgb25seSBvbmNlLlxudmFyIGZvckVhY2hOYW1lID0gJ2ZvckVhY2gnLFxuICAgIGhhc05hbWUgPSAnaGFzJyxcbiAgICBjb21tb25Jbml0ID0gWydjbGVhcicsICdkZWxldGUnXSxcbiAgICBtYXBUYWlsID0gWydnZXQnLCBoYXNOYW1lLCAnc2V0J107XG5cbi8vIGBNYXBgLCBgV2Vha01hcGAgYW5kIGBTZXRgIGVhY2ggaGF2ZSBzbGlnaHRseSBkaWZmZXJlbnRcbi8vIGNvbWJpbmF0aW9ucyBvZiB0aGUgYWJvdmUgc3VibGlzdHMuXG5leHBvcnQgdmFyIG1hcE1ldGhvZHMgPSBjb21tb25Jbml0LmNvbmNhdChmb3JFYWNoTmFtZSwgbWFwVGFpbCksXG4gICAgd2Vha01hcE1ldGhvZHMgPSBjb21tb25Jbml0LmNvbmNhdChtYXBUYWlsKSxcbiAgICBzZXRNZXRob2RzID0gWydhZGQnXS5jb25jYXQoY29tbW9uSW5pdCwgZm9yRWFjaE5hbWUsIGhhc05hbWUpO1xuIiwiLy8gSW50ZXJuYWwgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIGVmZmljaWVudCAoZm9yIGN1cnJlbnQgZW5naW5lcykgdmVyc2lvblxuLy8gb2YgdGhlIHBhc3NlZC1pbiBjYWxsYmFjaywgdG8gYmUgcmVwZWF0ZWRseSBhcHBsaWVkIGluIG90aGVyIFVuZGVyc2NvcmVcbi8vIGZ1bmN0aW9ucy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9wdGltaXplQ2IoZnVuYywgY29udGV4dCwgYXJnQ291bnQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkgcmV0dXJuIGZ1bmM7XG4gIHN3aXRjaCAoYXJnQ291bnQgPT0gbnVsbCA/IDMgOiBhcmdDb3VudCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuYy5jYWxsKGNvbnRleHQsIHZhbHVlKTtcbiAgICB9O1xuICAgIC8vIFRoZSAyLWFyZ3VtZW50IGNhc2UgaXMgb21pdHRlZCBiZWNhdXNlIHdl4oCZcmUgbm90IHVzaW5nIGl0LlxuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH07XG4gICAgY2FzZSA0OiByZXR1cm4gZnVuY3Rpb24oYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCBhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuYy5hcHBseShjb250ZXh0LCBhcmd1bWVudHMpO1xuICB9O1xufVxuIiwiLy8gQ3VycmVudCB2ZXJzaW9uLlxuZXhwb3J0IHZhciBWRVJTSU9OID0gJzEuMTMuNCc7XG5cbi8vIEVzdGFibGlzaCB0aGUgcm9vdCBvYmplY3QsIGB3aW5kb3dgIChgc2VsZmApIGluIHRoZSBicm93c2VyLCBgZ2xvYmFsYFxuLy8gb24gdGhlIHNlcnZlciwgb3IgYHRoaXNgIGluIHNvbWUgdmlydHVhbCBtYWNoaW5lcy4gV2UgdXNlIGBzZWxmYFxuLy8gaW5zdGVhZCBvZiBgd2luZG93YCBmb3IgYFdlYldvcmtlcmAgc3VwcG9ydC5cbmV4cG9ydCB2YXIgcm9vdCA9ICh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmLnNlbGYgPT09IHNlbGYgJiYgc2VsZikgfHxcbiAgICAgICAgICAodHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwuZ2xvYmFsID09PSBnbG9iYWwgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCkgfHxcbiAgICAgICAgICB7fTtcblxuLy8gU2F2ZSBieXRlcyBpbiB0aGUgbWluaWZpZWQgKGJ1dCBub3QgZ3ppcHBlZCkgdmVyc2lvbjpcbmV4cG9ydCB2YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSwgT2JqUHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuZXhwb3J0IHZhciBTeW1ib2xQcm90byA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnID8gU3ltYm9sLnByb3RvdHlwZSA6IG51bGw7XG5cbi8vIENyZWF0ZSBxdWljayByZWZlcmVuY2UgdmFyaWFibGVzIGZvciBzcGVlZCBhY2Nlc3MgdG8gY29yZSBwcm90b3R5cGVzLlxuZXhwb3J0IHZhciBwdXNoID0gQXJyYXlQcm90by5wdXNoLFxuICAgIHNsaWNlID0gQXJyYXlQcm90by5zbGljZSxcbiAgICB0b1N0cmluZyA9IE9ialByb3RvLnRvU3RyaW5nLFxuICAgIGhhc093blByb3BlcnR5ID0gT2JqUHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8vIE1vZGVybiBmZWF0dXJlIGRldGVjdGlvbi5cbmV4cG9ydCB2YXIgc3VwcG9ydHNBcnJheUJ1ZmZlciA9IHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcsXG4gICAgc3VwcG9ydHNEYXRhVmlldyA9IHR5cGVvZiBEYXRhVmlldyAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8vIEFsbCAqKkVDTUFTY3JpcHQgNSsqKiBuYXRpdmUgZnVuY3Rpb24gaW1wbGVtZW50YXRpb25zIHRoYXQgd2UgaG9wZSB0byB1c2Vcbi8vIGFyZSBkZWNsYXJlZCBoZXJlLlxuZXhwb3J0IHZhciBuYXRpdmVJc0FycmF5ID0gQXJyYXkuaXNBcnJheSxcbiAgICBuYXRpdmVLZXlzID0gT2JqZWN0LmtleXMsXG4gICAgbmF0aXZlQ3JlYXRlID0gT2JqZWN0LmNyZWF0ZSxcbiAgICBuYXRpdmVJc1ZpZXcgPSBzdXBwb3J0c0FycmF5QnVmZmVyICYmIEFycmF5QnVmZmVyLmlzVmlldztcblxuLy8gQ3JlYXRlIHJlZmVyZW5jZXMgdG8gdGhlc2UgYnVpbHRpbiBmdW5jdGlvbnMgYmVjYXVzZSB3ZSBvdmVycmlkZSB0aGVtLlxuZXhwb3J0IHZhciBfaXNOYU4gPSBpc05hTixcbiAgICBfaXNGaW5pdGUgPSBpc0Zpbml0ZTtcblxuLy8gS2V5cyBpbiBJRSA8IDkgdGhhdCB3b24ndCBiZSBpdGVyYXRlZCBieSBgZm9yIGtleSBpbiAuLi5gIGFuZCB0aHVzIG1pc3NlZC5cbmV4cG9ydCB2YXIgaGFzRW51bUJ1ZyA9ICF7dG9TdHJpbmc6IG51bGx9LnByb3BlcnR5SXNFbnVtZXJhYmxlKCd0b1N0cmluZycpO1xuZXhwb3J0IHZhciBub25FbnVtZXJhYmxlUHJvcHMgPSBbJ3ZhbHVlT2YnLCAnaXNQcm90b3R5cGVPZicsICd0b1N0cmluZycsXG4gICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICdoYXNPd25Qcm9wZXJ0eScsICd0b0xvY2FsZVN0cmluZyddO1xuXG4vLyBUaGUgbGFyZ2VzdCBpbnRlZ2VyIHRoYXQgY2FuIGJlIHJlcHJlc2VudGVkIGV4YWN0bHkuXG5leHBvcnQgdmFyIE1BWF9BUlJBWV9JTkRFWCA9IE1hdGgucG93KDIsIDUzKSAtIDE7XG4iLCIvLyBJbnRlcm5hbCBoZWxwZXIgdG8gZ2VuZXJhdGUgYSBmdW5jdGlvbiB0byBvYnRhaW4gcHJvcGVydHkgYGtleWAgZnJvbSBgb2JqYC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dQcm9wZXJ0eShrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT0gbnVsbCA/IHZvaWQgMCA6IG9ialtrZXldO1xuICB9O1xufVxuIiwiaW1wb3J0IHsgc3VwcG9ydHNEYXRhVmlldyB9IGZyb20gJy4vX3NldHVwLmpzJztcbmltcG9ydCBoYXNPYmplY3RUYWcgZnJvbSAnLi9faGFzT2JqZWN0VGFnLmpzJztcblxuLy8gSW4gSUUgMTAgLSBFZGdlIDEzLCBgRGF0YVZpZXdgIGhhcyBzdHJpbmcgdGFnIGAnW29iamVjdCBPYmplY3RdJ2AuXG4vLyBJbiBJRSAxMSwgdGhlIG1vc3QgY29tbW9uIGFtb25nIHRoZW0sIHRoaXMgcHJvYmxlbSBhbHNvIGFwcGxpZXMgdG9cbi8vIGBNYXBgLCBgV2Vha01hcGAgYW5kIGBTZXRgLlxuZXhwb3J0IHZhciBoYXNTdHJpbmdUYWdCdWcgPSAoXG4gICAgICBzdXBwb3J0c0RhdGFWaWV3ICYmIGhhc09iamVjdFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDgpKSlcbiAgICApLFxuICAgIGlzSUUxMSA9ICh0eXBlb2YgTWFwICE9PSAndW5kZWZpbmVkJyAmJiBoYXNPYmplY3RUYWcobmV3IE1hcCkpO1xuIiwiaW1wb3J0IHsgdG9TdHJpbmcgfSBmcm9tICcuL19zZXR1cC5qcyc7XG5cbi8vIEludGVybmFsIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIGB0b1N0cmluZ2AtYmFzZWQgdHlwZSB0ZXN0ZXIuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0YWdUZXN0ZXIobmFtZSkge1xuICB2YXIgdGFnID0gJ1tvYmplY3QgJyArIG5hbWUgKyAnXSc7XG4gIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSB0YWc7XG4gIH07XG59XG4iLCJpbXBvcnQgZ2V0Qnl0ZUxlbmd0aCBmcm9tICcuL19nZXRCeXRlTGVuZ3RoLmpzJztcblxuLy8gSW50ZXJuYWwgZnVuY3Rpb24gdG8gd3JhcCBvciBzaGFsbG93LWNvcHkgYW4gQXJyYXlCdWZmZXIsXG4vLyB0eXBlZCBhcnJheSBvciBEYXRhVmlldyB0byBhIG5ldyB2aWV3LCByZXVzaW5nIHRoZSBidWZmZXIuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0J1ZmZlclZpZXcoYnVmZmVyU291cmNlKSB7XG4gIHJldHVybiBuZXcgVWludDhBcnJheShcbiAgICBidWZmZXJTb3VyY2UuYnVmZmVyIHx8IGJ1ZmZlclNvdXJjZSxcbiAgICBidWZmZXJTb3VyY2UuYnl0ZU9mZnNldCB8fCAwLFxuICAgIGdldEJ5dGVMZW5ndGgoYnVmZmVyU291cmNlKVxuICApO1xufVxuIiwiaW1wb3J0IF8gZnJvbSAnLi91bmRlcnNjb3JlLmpzJztcbmltcG9ydCAnLi90b1BhdGguanMnO1xuXG4vLyBJbnRlcm5hbCB3cmFwcGVyIGZvciBgXy50b1BhdGhgIHRvIGVuYWJsZSBtaW5pZmljYXRpb24uXG4vLyBTaW1pbGFyIHRvIGBjYmAgZm9yIGBfLml0ZXJhdGVlYC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvUGF0aChwYXRoKSB7XG4gIHJldHVybiBfLnRvUGF0aChwYXRoKTtcbn1cbiIsImltcG9ydCBpbnZlcnQgZnJvbSAnLi9pbnZlcnQuanMnO1xuaW1wb3J0IGVzY2FwZU1hcCBmcm9tICcuL19lc2NhcGVNYXAuanMnO1xuXG4vLyBJbnRlcm5hbCBsaXN0IG9mIEhUTUwgZW50aXRpZXMgZm9yIHVuZXNjYXBpbmcuXG5leHBvcnQgZGVmYXVsdCBpbnZlcnQoZXNjYXBlTWFwKTtcbiIsIi8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgb25seSBiZSBleGVjdXRlZCBvbiBhbmQgYWZ0ZXIgdGhlIE50aCBjYWxsLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWZ0ZXIodGltZXMsIGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGlmICgtLXRpbWVzIDwgMSkge1xuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgeyBoYXNFbnVtQnVnIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuaW1wb3J0IGNvbGxlY3ROb25FbnVtUHJvcHMgZnJvbSAnLi9fY29sbGVjdE5vbkVudW1Qcm9wcy5qcyc7XG5cbi8vIFJldHJpZXZlIGFsbCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBhbiBvYmplY3QuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhbGxLZXlzKG9iaikge1xuICBpZiAoIWlzT2JqZWN0KG9iaikpIHJldHVybiBbXTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikga2V5cy5wdXNoKGtleSk7XG4gIC8vIEFoZW0sIElFIDwgOS5cbiAgaWYgKGhhc0VudW1CdWcpIGNvbGxlY3ROb25FbnVtUHJvcHMob2JqLCBrZXlzKTtcbiAgcmV0dXJuIGtleXM7XG59XG4iLCIvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgdXAgdG8gKGJ1dCBub3QgaW5jbHVkaW5nKSB0aGVcbi8vIE50aCBjYWxsLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmVmb3JlKHRpbWVzLCBmdW5jKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgaWYgKC0tdGltZXMgPiAwKSB7XG4gICAgICBtZW1vID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBpZiAodGltZXMgPD0gMSkgZnVuYyA9IG51bGw7XG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59XG4iLCJpbXBvcnQgcmVzdEFyZ3VtZW50cyBmcm9tICcuL3Jlc3RBcmd1bWVudHMuanMnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBleGVjdXRlQm91bmQgZnJvbSAnLi9fZXhlY3V0ZUJvdW5kLmpzJztcblxuLy8gQ3JlYXRlIGEgZnVuY3Rpb24gYm91bmQgdG8gYSBnaXZlbiBvYmplY3QgKGFzc2lnbmluZyBgdGhpc2AsIGFuZCBhcmd1bWVudHMsXG4vLyBvcHRpb25hbGx5KS5cbmV4cG9ydCBkZWZhdWx0IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oZnVuYywgY29udGV4dCwgYXJncykge1xuICBpZiAoIWlzRnVuY3Rpb24oZnVuYykpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JpbmQgbXVzdCBiZSBjYWxsZWQgb24gYSBmdW5jdGlvbicpO1xuICB2YXIgYm91bmQgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGNhbGxBcmdzKSB7XG4gICAgcmV0dXJuIGV4ZWN1dGVCb3VuZChmdW5jLCBib3VuZCwgY29udGV4dCwgdGhpcywgYXJncy5jb25jYXQoY2FsbEFyZ3MpKTtcbiAgfSk7XG4gIHJldHVybiBib3VuZDtcbn0pO1xuIiwiaW1wb3J0IHJlc3RBcmd1bWVudHMgZnJvbSAnLi9yZXN0QXJndW1lbnRzLmpzJztcbmltcG9ydCBmbGF0dGVuIGZyb20gJy4vX2ZsYXR0ZW4uanMnO1xuaW1wb3J0IGJpbmQgZnJvbSAnLi9iaW5kLmpzJztcblxuLy8gQmluZCBhIG51bWJlciBvZiBhbiBvYmplY3QncyBtZXRob2RzIHRvIHRoYXQgb2JqZWN0LiBSZW1haW5pbmcgYXJndW1lbnRzXG4vLyBhcmUgdGhlIG1ldGhvZCBuYW1lcyB0byBiZSBib3VuZC4gVXNlZnVsIGZvciBlbnN1cmluZyB0aGF0IGFsbCBjYWxsYmFja3Ncbi8vIGRlZmluZWQgb24gYW4gb2JqZWN0IGJlbG9uZyB0byBpdC5cbmV4cG9ydCBkZWZhdWx0IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gIGtleXMgPSBmbGF0dGVuKGtleXMsIGZhbHNlLCBmYWxzZSk7XG4gIHZhciBpbmRleCA9IGtleXMubGVuZ3RoO1xuICBpZiAoaW5kZXggPCAxKSB0aHJvdyBuZXcgRXJyb3IoJ2JpbmRBbGwgbXVzdCBiZSBwYXNzZWQgZnVuY3Rpb24gbmFtZXMnKTtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpbmRleF07XG4gICAgb2JqW2tleV0gPSBiaW5kKG9ialtrZXldLCBvYmopO1xuICB9XG4gIHJldHVybiBvYmo7XG59KTtcbiIsImltcG9ydCBfIGZyb20gJy4vdW5kZXJzY29yZS5qcyc7XG5cbi8vIFN0YXJ0IGNoYWluaW5nIGEgd3JhcHBlZCBVbmRlcnNjb3JlIG9iamVjdC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNoYWluKG9iaikge1xuICB2YXIgaW5zdGFuY2UgPSBfKG9iaik7XG4gIGluc3RhbmNlLl9jaGFpbiA9IHRydWU7XG4gIHJldHVybiBpbnN0YW5jZTtcbn1cbiIsImltcG9ydCB7IHNsaWNlIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuXG4vLyBDaHVuayBhIHNpbmdsZSBhcnJheSBpbnRvIG11bHRpcGxlIGFycmF5cywgZWFjaCBjb250YWluaW5nIGBjb3VudGAgb3IgZmV3ZXJcbi8vIGl0ZW1zLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2h1bmsoYXJyYXksIGNvdW50KSB7XG4gIGlmIChjb3VudCA9PSBudWxsIHx8IGNvdW50IDwgMSkgcmV0dXJuIFtdO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAoaSA8IGxlbmd0aCkge1xuICAgIHJlc3VsdC5wdXNoKHNsaWNlLmNhbGwoYXJyYXksIGksIGkgKz0gY291bnQpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCBleHRlbmQgZnJvbSAnLi9leHRlbmQuanMnO1xuXG4vLyBDcmVhdGUgYSAoc2hhbGxvdy1jbG9uZWQpIGR1cGxpY2F0ZSBvZiBhbiBvYmplY3QuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbG9uZShvYmopIHtcbiAgaWYgKCFpc09iamVjdChvYmopKSByZXR1cm4gb2JqO1xuICByZXR1cm4gaXNBcnJheShvYmopID8gb2JqLnNsaWNlKCkgOiBleHRlbmQoe30sIG9iaik7XG59XG4iLCJpbXBvcnQgZmlsdGVyIGZyb20gJy4vZmlsdGVyLmpzJztcblxuLy8gVHJpbSBvdXQgYWxsIGZhbHN5IHZhbHVlcyBmcm9tIGFuIGFycmF5LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcGFjdChhcnJheSkge1xuICByZXR1cm4gZmlsdGVyKGFycmF5LCBCb29sZWFuKTtcbn1cbiIsIi8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBhIGxpc3Qgb2YgZnVuY3Rpb25zLCBlYWNoXG4vLyBjb25zdW1pbmcgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gdGhhdCBmb2xsb3dzLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gIHZhciBzdGFydCA9IGFyZ3MubGVuZ3RoIC0gMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBpID0gc3RhcnQ7XG4gICAgdmFyIHJlc3VsdCA9IGFyZ3Nbc3RhcnRdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgd2hpbGUgKGktLSkgcmVzdWx0ID0gYXJnc1tpXS5jYWxsKHRoaXMsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cbiIsIi8vIFByZWRpY2F0ZS1nZW5lcmF0aW5nIGZ1bmN0aW9uLiBPZnRlbiB1c2VmdWwgb3V0c2lkZSBvZiBVbmRlcnNjb3JlLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbn1cbiIsImltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL19pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQgdmFsdWVzIGZyb20gJy4vdmFsdWVzLmpzJztcbmltcG9ydCBpbmRleE9mIGZyb20gJy4vaW5kZXhPZi5qcyc7XG5cbi8vIERldGVybWluZSBpZiB0aGUgYXJyYXkgb3Igb2JqZWN0IGNvbnRhaW5zIGEgZ2l2ZW4gaXRlbSAodXNpbmcgYD09PWApLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGFpbnMob2JqLCBpdGVtLCBmcm9tSW5kZXgsIGd1YXJkKSB7XG4gIGlmICghaXNBcnJheUxpa2Uob2JqKSkgb2JqID0gdmFsdWVzKG9iaik7XG4gIGlmICh0eXBlb2YgZnJvbUluZGV4ICE9ICdudW1iZXInIHx8IGd1YXJkKSBmcm9tSW5kZXggPSAwO1xuICByZXR1cm4gaW5kZXhPZihvYmosIGl0ZW0sIGZyb21JbmRleCkgPj0gMDtcbn1cbiIsImltcG9ydCBncm91cCBmcm9tICcuL19ncm91cC5qcyc7XG5pbXBvcnQgaGFzIGZyb20gJy4vX2hhcy5qcyc7XG5cbi8vIENvdW50cyBpbnN0YW5jZXMgb2YgYW4gb2JqZWN0IHRoYXQgZ3JvdXAgYnkgYSBjZXJ0YWluIGNyaXRlcmlvbi4gUGFzc1xuLy8gZWl0aGVyIGEgc3RyaW5nIGF0dHJpYnV0ZSB0byBjb3VudCBieSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4vLyBjcml0ZXJpb24uXG5leHBvcnQgZGVmYXVsdCBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgaWYgKGhhcyhyZXN1bHQsIGtleSkpIHJlc3VsdFtrZXldKys7IGVsc2UgcmVzdWx0W2tleV0gPSAxO1xufSk7XG4iLCJpbXBvcnQgYmFzZUNyZWF0ZSBmcm9tICcuL19iYXNlQ3JlYXRlLmpzJztcbmltcG9ydCBleHRlbmRPd24gZnJvbSAnLi9leHRlbmRPd24uanMnO1xuXG4vLyBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhlIGdpdmVuIHByb3RvdHlwZSBvYmplY3QuXG4vLyBJZiBhZGRpdGlvbmFsIHByb3BlcnRpZXMgYXJlIHByb3ZpZGVkIHRoZW4gdGhleSB3aWxsIGJlIGFkZGVkIHRvIHRoZVxuLy8gY3JlYXRlZCBvYmplY3QuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGUocHJvdG90eXBlLCBwcm9wcykge1xuICB2YXIgcmVzdWx0ID0gYmFzZUNyZWF0ZShwcm90b3R5cGUpO1xuICBpZiAocHJvcHMpIGV4dGVuZE93bihyZXN1bHQsIHByb3BzKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCByZXN0QXJndW1lbnRzIGZyb20gJy4vcmVzdEFyZ3VtZW50cy5qcyc7XG5pbXBvcnQgbm93IGZyb20gJy4vbm93LmpzJztcblxuLy8gV2hlbiBhIHNlcXVlbmNlIG9mIGNhbGxzIG9mIHRoZSByZXR1cm5lZCBmdW5jdGlvbiBlbmRzLCB0aGUgYXJndW1lbnRcbi8vIGZ1bmN0aW9uIGlzIHRyaWdnZXJlZC4gVGhlIGVuZCBvZiBhIHNlcXVlbmNlIGlzIGRlZmluZWQgYnkgdGhlIGB3YWl0YFxuLy8gcGFyYW1ldGVyLiBJZiBgaW1tZWRpYXRlYCBpcyBwYXNzZWQsIHRoZSBhcmd1bWVudCBmdW5jdGlvbiB3aWxsIGJlXG4vLyB0cmlnZ2VyZWQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgc2VxdWVuY2UgaW5zdGVhZCBvZiBhdCB0aGUgZW5kLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XG4gIHZhciB0aW1lb3V0LCBwcmV2aW91cywgYXJncywgcmVzdWx0LCBjb250ZXh0O1xuXG4gIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYXNzZWQgPSBub3coKSAtIHByZXZpb3VzO1xuICAgIGlmICh3YWl0ID4gcGFzc2VkKSB7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCAtIHBhc3NlZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgaWYgKCFpbW1lZGlhdGUpIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCBiZWNhdXNlIGBmdW5jYCBjYW4gcmVjdXJzaXZlbHkgaW52b2tlIGBkZWJvdW5jZWRgLlxuICAgICAgaWYgKCF0aW1lb3V0KSBhcmdzID0gY29udGV4dCA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIHZhciBkZWJvdW5jZWQgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKF9hcmdzKSB7XG4gICAgY29udGV4dCA9IHRoaXM7XG4gICAgYXJncyA9IF9hcmdzO1xuICAgIHByZXZpb3VzID0gbm93KCk7XG4gICAgaWYgKCF0aW1lb3V0KSB7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgICBpZiAoaW1tZWRpYXRlKSByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9KTtcblxuICBkZWJvdW5jZWQuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBhcmdzID0gY29udGV4dCA9IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIGRlYm91bmNlZDtcbn1cbiIsImltcG9ydCBjcmVhdGVBc3NpZ25lciBmcm9tICcuL19jcmVhdGVBc3NpZ25lci5qcyc7XG5pbXBvcnQgYWxsS2V5cyBmcm9tICcuL2FsbEtleXMuanMnO1xuXG4vLyBGaWxsIGluIGEgZ2l2ZW4gb2JqZWN0IHdpdGggZGVmYXVsdCBwcm9wZXJ0aWVzLlxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQXNzaWduZXIoYWxsS2V5cywgdHJ1ZSk7XG4iLCJpbXBvcnQgcGFydGlhbCBmcm9tICcuL3BhcnRpYWwuanMnO1xuaW1wb3J0IGRlbGF5IGZyb20gJy4vZGVsYXkuanMnO1xuaW1wb3J0IF8gZnJvbSAnLi91bmRlcnNjb3JlLmpzJztcblxuLy8gRGVmZXJzIGEgZnVuY3Rpb24sIHNjaGVkdWxpbmcgaXQgdG8gcnVuIGFmdGVyIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzXG4vLyBjbGVhcmVkLlxuZXhwb3J0IGRlZmF1bHQgcGFydGlhbChkZWxheSwgXywgMSk7XG4iLCJpbXBvcnQgcmVzdEFyZ3VtZW50cyBmcm9tICcuL3Jlc3RBcmd1bWVudHMuanMnO1xuXG4vLyBEZWxheXMgYSBmdW5jdGlvbiBmb3IgdGhlIGdpdmVuIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIGFuZCB0aGVuIGNhbGxzXG4vLyBpdCB3aXRoIHRoZSBhcmd1bWVudHMgc3VwcGxpZWQuXG5leHBvcnQgZGVmYXVsdCByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkobnVsbCwgYXJncyk7XG4gIH0sIHdhaXQpO1xufSk7XG4iLCJpbXBvcnQgcmVzdEFyZ3VtZW50cyBmcm9tICcuL3Jlc3RBcmd1bWVudHMuanMnO1xuaW1wb3J0IGZsYXR0ZW4gZnJvbSAnLi9fZmxhdHRlbi5qcyc7XG5pbXBvcnQgZmlsdGVyIGZyb20gJy4vZmlsdGVyLmpzJztcbmltcG9ydCBjb250YWlucyBmcm9tICcuL2NvbnRhaW5zLmpzJztcblxuLy8gVGFrZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIG9uZSBhcnJheSBhbmQgYSBudW1iZXIgb2Ygb3RoZXIgYXJyYXlzLlxuLy8gT25seSB0aGUgZWxlbWVudHMgcHJlc2VudCBpbiBqdXN0IHRoZSBmaXJzdCBhcnJheSB3aWxsIHJlbWFpbi5cbmV4cG9ydCBkZWZhdWx0IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oYXJyYXksIHJlc3QpIHtcbiAgcmVzdCA9IGZsYXR0ZW4ocmVzdCwgdHJ1ZSwgdHJ1ZSk7XG4gIHJldHVybiBmaWx0ZXIoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKXtcbiAgICByZXR1cm4gIWNvbnRhaW5zKHJlc3QsIHZhbHVlKTtcbiAgfSk7XG59KTtcbiIsImltcG9ydCBvcHRpbWl6ZUNiIGZyb20gJy4vX29wdGltaXplQ2IuanMnO1xuaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vX2lzQXJyYXlMaWtlLmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5cbi8vIFRoZSBjb3JuZXJzdG9uZSBmb3IgY29sbGVjdGlvbiBmdW5jdGlvbnMsIGFuIGBlYWNoYFxuLy8gaW1wbGVtZW50YXRpb24sIGFrYSBgZm9yRWFjaGAuXG4vLyBIYW5kbGVzIHJhdyBvYmplY3RzIGluIGFkZGl0aW9uIHRvIGFycmF5LWxpa2VzLiBUcmVhdHMgYWxsXG4vLyBzcGFyc2UgYXJyYXktbGlrZXMgYXMgaWYgdGhleSB3ZXJlIGRlbnNlLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZWFjaChvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCk7XG4gIHZhciBpLCBsZW5ndGg7XG4gIGlmIChpc0FycmF5TGlrZShvYmopKSB7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpdGVyYXRlZShvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBfa2V5cyA9IGtleXMob2JqKTtcbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBfa2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaXRlcmF0ZWUob2JqW19rZXlzW2ldXSwgX2tleXNbaV0sIG9iaik7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmo7XG59XG4iLCJpbXBvcnQgY3JlYXRlRXNjYXBlciBmcm9tICcuL19jcmVhdGVFc2NhcGVyLmpzJztcbmltcG9ydCBlc2NhcGVNYXAgZnJvbSAnLi9fZXNjYXBlTWFwLmpzJztcblxuLy8gRnVuY3Rpb24gZm9yIGVzY2FwaW5nIHN0cmluZ3MgdG8gSFRNTCBpbnRlcnBvbGF0aW9uLlxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRXNjYXBlcihlc2NhcGVNYXApO1xuIiwiaW1wb3J0IGNiIGZyb20gJy4vX2NiLmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL19pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vLyBEZXRlcm1pbmUgd2hldGhlciBhbGwgb2YgdGhlIGVsZW1lbnRzIHBhc3MgYSB0cnV0aCB0ZXN0LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXZlcnkob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgdmFyIF9rZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYga2V5cyhvYmopLFxuICAgICAgbGVuZ3RoID0gKF9rZXlzIHx8IG9iaikubGVuZ3RoO1xuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgdmFyIGN1cnJlbnRLZXkgPSBfa2V5cyA/IF9rZXlzW2luZGV4XSA6IGluZGV4O1xuICAgIGlmICghcHJlZGljYXRlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKSkgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuIiwiaW1wb3J0IGNyZWF0ZUFzc2lnbmVyIGZyb20gJy4vX2NyZWF0ZUFzc2lnbmVyLmpzJztcbmltcG9ydCBhbGxLZXlzIGZyb20gJy4vYWxsS2V5cy5qcyc7XG5cbi8vIEV4dGVuZCBhIGdpdmVuIG9iamVjdCB3aXRoIGFsbCB0aGUgcHJvcGVydGllcyBpbiBwYXNzZWQtaW4gb2JqZWN0KHMpLlxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQXNzaWduZXIoYWxsS2V5cyk7XG4iLCJpbXBvcnQgY3JlYXRlQXNzaWduZXIgZnJvbSAnLi9fY3JlYXRlQXNzaWduZXIuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLy8gQXNzaWducyBhIGdpdmVuIG9iamVjdCB3aXRoIGFsbCB0aGUgb3duIHByb3BlcnRpZXMgaW4gdGhlIHBhc3NlZC1pblxuLy8gb2JqZWN0KHMpLlxuLy8gKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9hc3NpZ24pXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVBc3NpZ25lcihrZXlzKTtcbiIsImltcG9ydCBjYiBmcm9tICcuL19jYi5qcyc7XG5pbXBvcnQgZWFjaCBmcm9tICcuL2VhY2guanMnO1xuXG4vLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyB0aGF0IHBhc3MgYSB0cnV0aCB0ZXN0LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmlsdGVyKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gIHZhciByZXN1bHRzID0gW107XG4gIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgbGlzdCkpIHJlc3VsdHMucHVzaCh2YWx1ZSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0cztcbn1cbiIsImltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL19pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQgZmluZEluZGV4IGZyb20gJy4vZmluZEluZGV4LmpzJztcbmltcG9ydCBmaW5kS2V5IGZyb20gJy4vZmluZEtleS5qcyc7XG5cbi8vIFJldHVybiB0aGUgZmlyc3QgdmFsdWUgd2hpY2ggcGFzc2VzIGEgdHJ1dGggdGVzdC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmQob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgdmFyIGtleUZpbmRlciA9IGlzQXJyYXlMaWtlKG9iaikgPyBmaW5kSW5kZXggOiBmaW5kS2V5O1xuICB2YXIga2V5ID0ga2V5RmluZGVyKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KTtcbiAgaWYgKGtleSAhPT0gdm9pZCAwICYmIGtleSAhPT0gLTEpIHJldHVybiBvYmpba2V5XTtcbn1cbiIsImltcG9ydCBjcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlciBmcm9tICcuL19jcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlci5qcyc7XG5cbi8vIFJldHVybnMgdGhlIGZpcnN0IGluZGV4IG9uIGFuIGFycmF5LWxpa2UgdGhhdCBwYXNzZXMgYSB0cnV0aCB0ZXN0LlxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIoMSk7XG4iLCJpbXBvcnQgY2IgZnJvbSAnLi9fY2IuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLy8gUmV0dXJucyB0aGUgZmlyc3Qga2V5IG9uIGFuIG9iamVjdCB0aGF0IHBhc3NlcyBhIHRydXRoIHRlc3QuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5kS2V5KG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gIHZhciBfa2V5cyA9IGtleXMob2JqKSwga2V5O1xuICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gX2tleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBfa2V5c1tpXTtcbiAgICBpZiAocHJlZGljYXRlKG9ialtrZXldLCBrZXksIG9iaikpIHJldHVybiBrZXk7XG4gIH1cbn1cbiIsImltcG9ydCBjcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlciBmcm9tICcuL19jcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlci5qcyc7XG5cbi8vIFJldHVybnMgdGhlIGxhc3QgaW5kZXggb24gYW4gYXJyYXktbGlrZSB0aGF0IHBhc3NlcyBhIHRydXRoIHRlc3QuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlcigtMSk7XG4iLCJpbXBvcnQgZmluZCBmcm9tICcuL2ZpbmQuanMnO1xuaW1wb3J0IG1hdGNoZXIgZnJvbSAnLi9tYXRjaGVyLmpzJztcblxuLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgXy5maW5kYDogZ2V0dGluZyB0aGUgZmlyc3Rcbi8vIG9iamVjdCBjb250YWluaW5nIHNwZWNpZmljIGBrZXk6dmFsdWVgIHBhaXJzLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluZFdoZXJlKG9iaiwgYXR0cnMpIHtcbiAgcmV0dXJuIGZpbmQob2JqLCBtYXRjaGVyKGF0dHJzKSk7XG59XG4iLCJpbXBvcnQgaW5pdGlhbCBmcm9tICcuL2luaXRpYWwuanMnO1xuXG4vLyBHZXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGZpcnN0IE5cbi8vIHZhbHVlcyBpbiB0aGUgYXJyYXkuIFRoZSAqKmd1YXJkKiogY2hlY2sgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgXy5tYXBgLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmlyc3QoYXJyYXksIG4sIGd1YXJkKSB7XG4gIGlmIChhcnJheSA9PSBudWxsIHx8IGFycmF5Lmxlbmd0aCA8IDEpIHJldHVybiBuID09IG51bGwgfHwgZ3VhcmQgPyB2b2lkIDAgOiBbXTtcbiAgaWYgKG4gPT0gbnVsbCB8fCBndWFyZCkgcmV0dXJuIGFycmF5WzBdO1xuICByZXR1cm4gaW5pdGlhbChhcnJheSwgYXJyYXkubGVuZ3RoIC0gbik7XG59XG4iLCJpbXBvcnQgX2ZsYXR0ZW4gZnJvbSAnLi9fZmxhdHRlbi5qcyc7XG5cbi8vIEZsYXR0ZW4gb3V0IGFuIGFycmF5LCBlaXRoZXIgcmVjdXJzaXZlbHkgKGJ5IGRlZmF1bHQpLCBvciB1cCB0byBgZGVwdGhgLlxuLy8gUGFzc2luZyBgdHJ1ZWAgb3IgYGZhbHNlYCBhcyBgZGVwdGhgIG1lYW5zIGAxYCBvciBgSW5maW5pdHlgLCByZXNwZWN0aXZlbHkuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmbGF0dGVuKGFycmF5LCBkZXB0aCkge1xuICByZXR1cm4gX2ZsYXR0ZW4oYXJyYXksIGRlcHRoLCBmYWxzZSk7XG59XG4iLCJpbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuL2lzRnVuY3Rpb24uanMnO1xuXG4vLyBSZXR1cm4gYSBzb3J0ZWQgbGlzdCBvZiB0aGUgZnVuY3Rpb24gbmFtZXMgYXZhaWxhYmxlIG9uIHRoZSBvYmplY3QuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmdW5jdGlvbnMob2JqKSB7XG4gIHZhciBuYW1lcyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24ob2JqW2tleV0pKSBuYW1lcy5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIG5hbWVzLnNvcnQoKTtcbn1cbiIsImltcG9ydCB0b1BhdGggZnJvbSAnLi9fdG9QYXRoLmpzJztcbmltcG9ydCBkZWVwR2V0IGZyb20gJy4vX2RlZXBHZXQuanMnO1xuaW1wb3J0IGlzVW5kZWZpbmVkIGZyb20gJy4vaXNVbmRlZmluZWQuanMnO1xuXG4vLyBHZXQgdGhlIHZhbHVlIG9mIHRoZSAoZGVlcCkgcHJvcGVydHkgb24gYHBhdGhgIGZyb20gYG9iamVjdGAuXG4vLyBJZiBhbnkgcHJvcGVydHkgaW4gYHBhdGhgIGRvZXMgbm90IGV4aXN0IG9yIGlmIHRoZSB2YWx1ZSBpc1xuLy8gYHVuZGVmaW5lZGAsIHJldHVybiBgZGVmYXVsdFZhbHVlYCBpbnN0ZWFkLlxuLy8gVGhlIGBwYXRoYCBpcyBub3JtYWxpemVkIHRocm91Z2ggYF8udG9QYXRoYC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgdmFsdWUgPSBkZWVwR2V0KG9iamVjdCwgdG9QYXRoKHBhdGgpKTtcbiAgcmV0dXJuIGlzVW5kZWZpbmVkKHZhbHVlKSA/IGRlZmF1bHRWYWx1ZSA6IHZhbHVlO1xufVxuIiwiaW1wb3J0IGdyb3VwIGZyb20gJy4vX2dyb3VwLmpzJztcbmltcG9ydCBoYXMgZnJvbSAnLi9faGFzLmpzJztcblxuLy8gR3JvdXBzIHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24uIFBhc3MgZWl0aGVyIGEgc3RyaW5nIGF0dHJpYnV0ZVxuLy8gdG8gZ3JvdXAgYnksIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBjcml0ZXJpb24uXG5leHBvcnQgZGVmYXVsdCBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgaWYgKGhhcyhyZXN1bHQsIGtleSkpIHJlc3VsdFtrZXldLnB1c2godmFsdWUpOyBlbHNlIHJlc3VsdFtrZXldID0gW3ZhbHVlXTtcbn0pO1xuIiwiaW1wb3J0IF9oYXMgZnJvbSAnLi9faGFzLmpzJztcbmltcG9ydCB0b1BhdGggZnJvbSAnLi9fdG9QYXRoLmpzJztcblxuLy8gU2hvcnRjdXQgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBwcm9wZXJ0eSBkaXJlY3RseSBvblxuLy8gaXRzZWxmIChpbiBvdGhlciB3b3Jkcywgbm90IG9uIGEgcHJvdG90eXBlKS4gVW5saWtlIHRoZSBpbnRlcm5hbCBgaGFzYFxuLy8gZnVuY3Rpb24sIHRoaXMgcHVibGljIHZlcnNpb24gY2FuIGFsc28gdHJhdmVyc2UgbmVzdGVkIHByb3BlcnRpZXMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYXMob2JqLCBwYXRoKSB7XG4gIHBhdGggPSB0b1BhdGgocGF0aCk7XG4gIHZhciBsZW5ndGggPSBwYXRoLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBwYXRoW2ldO1xuICAgIGlmICghX2hhcyhvYmosIGtleSkpIHJldHVybiBmYWxzZTtcbiAgICBvYmogPSBvYmpba2V5XTtcbiAgfVxuICByZXR1cm4gISFsZW5ndGg7XG59XG4iLCIvLyBLZWVwIHRoZSBpZGVudGl0eSBmdW5jdGlvbiBhcm91bmQgZm9yIGRlZmF1bHQgaXRlcmF0ZWVzLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuIiwiLy8gRGVmYXVsdCBFeHBvcnRcbi8vID09PT09PT09PT09PT09XG4vLyBJbiB0aGlzIG1vZHVsZSwgd2UgbWl4IG91ciBidW5kbGVkIGV4cG9ydHMgaW50byB0aGUgYF9gIG9iamVjdCBhbmQgZXhwb3J0XG4vLyB0aGUgcmVzdWx0LiBUaGlzIGlzIGFuYWxvZ291cyB0byBzZXR0aW5nIGBtb2R1bGUuZXhwb3J0cyA9IF9gIGluIENvbW1vbkpTLlxuLy8gSGVuY2UsIHRoaXMgbW9kdWxlIGlzIGFsc28gdGhlIGVudHJ5IHBvaW50IG9mIG91ciBVTUQgYnVuZGxlIGFuZCB0aGUgcGFja2FnZVxuLy8gZW50cnkgcG9pbnQgZm9yIENvbW1vbkpTIGFuZCBBTUQgdXNlcnMuIEluIG90aGVyIHdvcmRzLCB0aGlzIGlzICh0aGUgc291cmNlXG4vLyBvZikgdGhlIG1vZHVsZSB5b3UgYXJlIGludGVyZmFjaW5nIHdpdGggd2hlbiB5b3UgZG8gYW55IG9mIHRoZSBmb2xsb3dpbmc6XG4vL1xuLy8gYGBganNcbi8vIC8vIENvbW1vbkpTXG4vLyB2YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcbi8vXG4vLyAvLyBBTURcbi8vIGRlZmluZShbJ3VuZGVyc2NvcmUnXSwgZnVuY3Rpb24oXykgey4uLn0pO1xuLy9cbi8vIC8vIFVNRCBpbiB0aGUgYnJvd3NlclxuLy8gLy8gXyBpcyBhdmFpbGFibGUgYXMgYSBnbG9iYWwgdmFyaWFibGVcbi8vIGBgYFxuaW1wb3J0ICogYXMgYWxsRXhwb3J0cyBmcm9tICcuL2luZGV4LmpzJztcbmltcG9ydCB7IG1peGluIH0gZnJvbSAnLi9pbmRleC5qcyc7XG5cbi8vIEFkZCBhbGwgb2YgdGhlIFVuZGVyc2NvcmUgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyIG9iamVjdC5cbnZhciBfID0gbWl4aW4oYWxsRXhwb3J0cyk7XG4vLyBMZWdhY3kgTm9kZS5qcyBBUEkuXG5fLl8gPSBfO1xuLy8gRXhwb3J0IHRoZSBVbmRlcnNjb3JlIEFQSS5cbmV4cG9ydCBkZWZhdWx0IF87XG4iLCJpbXBvcnQgZ3JvdXAgZnJvbSAnLi9fZ3JvdXAuanMnO1xuXG4vLyBJbmRleGVzIHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24sIHNpbWlsYXIgdG8gYF8uZ3JvdXBCeWAsIGJ1dCBmb3Jcbi8vIHdoZW4geW91IGtub3cgdGhhdCB5b3VyIGluZGV4IHZhbHVlcyB3aWxsIGJlIHVuaXF1ZS5cbmV4cG9ydCBkZWZhdWx0IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICByZXN1bHRba2V5XSA9IHZhbHVlO1xufSk7XG4iLCJpbXBvcnQgc29ydGVkSW5kZXggZnJvbSAnLi9zb3J0ZWRJbmRleC5qcyc7XG5pbXBvcnQgZmluZEluZGV4IGZyb20gJy4vZmluZEluZGV4LmpzJztcbmltcG9ydCBjcmVhdGVJbmRleEZpbmRlciBmcm9tICcuL19jcmVhdGVJbmRleEZpbmRlci5qcyc7XG5cbi8vIFJldHVybiB0aGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYW4gaXRlbSBpbiBhbiBhcnJheSxcbi8vIG9yIC0xIGlmIHRoZSBpdGVtIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgYXJyYXkuXG4vLyBJZiB0aGUgYXJyYXkgaXMgbGFyZ2UgYW5kIGFscmVhZHkgaW4gc29ydCBvcmRlciwgcGFzcyBgdHJ1ZWBcbi8vIGZvciAqKmlzU29ydGVkKiogdG8gdXNlIGJpbmFyeSBzZWFyY2guXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVJbmRleEZpbmRlcigxLCBmaW5kSW5kZXgsIHNvcnRlZEluZGV4KTtcbiIsImltcG9ydCB7IHNsaWNlIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuXG4vLyBSZXR1cm5zIGV2ZXJ5dGhpbmcgYnV0IHRoZSBsYXN0IGVudHJ5IG9mIHRoZSBhcnJheS4gRXNwZWNpYWxseSB1c2VmdWwgb25cbi8vIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIGFsbCB0aGUgdmFsdWVzIGluXG4vLyB0aGUgYXJyYXksIGV4Y2x1ZGluZyB0aGUgbGFzdCBOLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5pdGlhbChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXksIDAsIE1hdGgubWF4KDAsIGFycmF5Lmxlbmd0aCAtIChuID09IG51bGwgfHwgZ3VhcmQgPyAxIDogbikpKTtcbn1cbiIsImltcG9ydCBnZXRMZW5ndGggZnJvbSAnLi9fZ2V0TGVuZ3RoLmpzJztcbmltcG9ydCBjb250YWlucyBmcm9tICcuL2NvbnRhaW5zLmpzJztcblxuLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIGV2ZXJ5IGl0ZW0gc2hhcmVkIGJldHdlZW4gYWxsIHRoZVxuLy8gcGFzc2VkLWluIGFycmF5cy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGludGVyc2VjdGlvbihhcnJheSkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGdldExlbmd0aChhcnJheSk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gYXJyYXlbaV07XG4gICAgaWYgKGNvbnRhaW5zKHJlc3VsdCwgaXRlbSkpIGNvbnRpbnVlO1xuICAgIHZhciBqO1xuICAgIGZvciAoaiA9IDE7IGogPCBhcmdzTGVuZ3RoOyBqKyspIHtcbiAgICAgIGlmICghY29udGFpbnMoYXJndW1lbnRzW2pdLCBpdGVtKSkgYnJlYWs7XG4gICAgfVxuICAgIGlmIChqID09PSBhcmdzTGVuZ3RoKSByZXN1bHQucHVzaChpdGVtKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLy8gSW52ZXJ0IHRoZSBrZXlzIGFuZCB2YWx1ZXMgb2YgYW4gb2JqZWN0LiBUaGUgdmFsdWVzIG11c3QgYmUgc2VyaWFsaXphYmxlLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW52ZXJ0KG9iaikge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIHZhciBfa2V5cyA9IGtleXMob2JqKTtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IF9rZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0W29ialtfa2V5c1tpXV1dID0gX2tleXNbaV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCByZXN0QXJndW1lbnRzIGZyb20gJy4vcmVzdEFyZ3VtZW50cy5qcyc7XG5pbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuL2lzRnVuY3Rpb24uanMnO1xuaW1wb3J0IG1hcCBmcm9tICcuL21hcC5qcyc7XG5pbXBvcnQgZGVlcEdldCBmcm9tICcuL19kZWVwR2V0LmpzJztcbmltcG9ydCB0b1BhdGggZnJvbSAnLi9fdG9QYXRoLmpzJztcblxuLy8gSW52b2tlIGEgbWV0aG9kICh3aXRoIGFyZ3VtZW50cykgb24gZXZlcnkgaXRlbSBpbiBhIGNvbGxlY3Rpb24uXG5leHBvcnQgZGVmYXVsdCByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKG9iaiwgcGF0aCwgYXJncykge1xuICB2YXIgY29udGV4dFBhdGgsIGZ1bmM7XG4gIGlmIChpc0Z1bmN0aW9uKHBhdGgpKSB7XG4gICAgZnVuYyA9IHBhdGg7XG4gIH0gZWxzZSB7XG4gICAgcGF0aCA9IHRvUGF0aChwYXRoKTtcbiAgICBjb250ZXh0UGF0aCA9IHBhdGguc2xpY2UoMCwgLTEpO1xuICAgIHBhdGggPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gIH1cbiAgcmV0dXJuIG1hcChvYmosIGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZnVuYztcbiAgICBpZiAoIW1ldGhvZCkge1xuICAgICAgaWYgKGNvbnRleHRQYXRoICYmIGNvbnRleHRQYXRoLmxlbmd0aCkge1xuICAgICAgICBjb250ZXh0ID0gZGVlcEdldChjb250ZXh0LCBjb250ZXh0UGF0aCk7XG4gICAgICB9XG4gICAgICBpZiAoY29udGV4dCA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgICAgbWV0aG9kID0gY29udGV4dFtwYXRoXTtcbiAgICB9XG4gICAgcmV0dXJuIG1ldGhvZCA9PSBudWxsID8gbWV0aG9kIDogbWV0aG9kLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICB9KTtcbn0pO1xuIiwiaW1wb3J0IHRhZ1Rlc3RlciBmcm9tICcuL190YWdUZXN0ZXIuanMnO1xuaW1wb3J0IGhhcyBmcm9tICcuL19oYXMuanMnO1xuXG52YXIgaXNBcmd1bWVudHMgPSB0YWdUZXN0ZXIoJ0FyZ3VtZW50cycpO1xuXG4vLyBEZWZpbmUgYSBmYWxsYmFjayB2ZXJzaW9uIG9mIHRoZSBtZXRob2QgaW4gYnJvd3NlcnMgKGFoZW0sIElFIDwgOSksIHdoZXJlXG4vLyB0aGVyZSBpc24ndCBhbnkgaW5zcGVjdGFibGUgXCJBcmd1bWVudHNcIiB0eXBlLlxuKGZ1bmN0aW9uKCkge1xuICBpZiAoIWlzQXJndW1lbnRzKGFyZ3VtZW50cykpIHtcbiAgICBpc0FyZ3VtZW50cyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIGhhcyhvYmosICdjYWxsZWUnKTtcbiAgICB9O1xuICB9XG59KCkpO1xuXG5leHBvcnQgZGVmYXVsdCBpc0FyZ3VtZW50cztcbiIsImltcG9ydCB7IG5hdGl2ZUlzQXJyYXkgfSBmcm9tICcuL19zZXR1cC5qcyc7XG5pbXBvcnQgdGFnVGVzdGVyIGZyb20gJy4vX3RhZ1Rlc3Rlci5qcyc7XG5cbi8vIElzIGEgZ2l2ZW4gdmFsdWUgYW4gYXJyYXk/XG4vLyBEZWxlZ2F0ZXMgdG8gRUNNQTUncyBuYXRpdmUgYEFycmF5LmlzQXJyYXlgLlxuZXhwb3J0IGRlZmF1bHQgbmF0aXZlSXNBcnJheSB8fCB0YWdUZXN0ZXIoJ0FycmF5Jyk7XG4iLCJpbXBvcnQgdGFnVGVzdGVyIGZyb20gJy4vX3RhZ1Rlc3Rlci5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHRhZ1Rlc3RlcignQXJyYXlCdWZmZXInKTtcbiIsImltcG9ydCB7IHRvU3RyaW5nIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuXG4vLyBJcyBhIGdpdmVuIHZhbHVlIGEgYm9vbGVhbj9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQm9vbGVhbihvYmopIHtcbiAgcmV0dXJuIG9iaiA9PT0gdHJ1ZSB8fCBvYmogPT09IGZhbHNlIHx8IHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQm9vbGVhbl0nO1xufVxuIiwiaW1wb3J0IHRhZ1Rlc3RlciBmcm9tICcuL190YWdUZXN0ZXIuanMnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBpc0FycmF5QnVmZmVyIGZyb20gJy4vaXNBcnJheUJ1ZmZlci5qcyc7XG5pbXBvcnQgeyBoYXNTdHJpbmdUYWdCdWcgfSBmcm9tICcuL19zdHJpbmdUYWdCdWcuanMnO1xuXG52YXIgaXNEYXRhVmlldyA9IHRhZ1Rlc3RlcignRGF0YVZpZXcnKTtcblxuLy8gSW4gSUUgMTAgLSBFZGdlIDEzLCB3ZSBuZWVkIGEgZGlmZmVyZW50IGhldXJpc3RpY1xuLy8gdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYW4gb2JqZWN0IGlzIGEgYERhdGFWaWV3YC5cbmZ1bmN0aW9uIGllMTBJc0RhdGFWaWV3KG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgaXNGdW5jdGlvbihvYmouZ2V0SW50OCkgJiYgaXNBcnJheUJ1ZmZlcihvYmouYnVmZmVyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgKGhhc1N0cmluZ1RhZ0J1ZyA/IGllMTBJc0RhdGFWaWV3IDogaXNEYXRhVmlldyk7XG4iLCJpbXBvcnQgdGFnVGVzdGVyIGZyb20gJy4vX3RhZ1Rlc3Rlci5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHRhZ1Rlc3RlcignRGF0ZScpO1xuIiwiLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIERPTSBlbGVtZW50P1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNFbGVtZW50KG9iaikge1xuICByZXR1cm4gISEob2JqICYmIG9iai5ub2RlVHlwZSA9PT0gMSk7XG59XG4iLCJpbXBvcnQgZ2V0TGVuZ3RoIGZyb20gJy4vX2dldExlbmd0aC5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzU3RyaW5nIGZyb20gJy4vaXNTdHJpbmcuanMnO1xuaW1wb3J0IGlzQXJndW1lbnRzIGZyb20gJy4vaXNBcmd1bWVudHMuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLy8gSXMgYSBnaXZlbiBhcnJheSwgc3RyaW5nLCBvciBvYmplY3QgZW1wdHk/XG4vLyBBbiBcImVtcHR5XCIgb2JqZWN0IGhhcyBubyBlbnVtZXJhYmxlIG93bi1wcm9wZXJ0aWVzLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNFbXB0eShvYmopIHtcbiAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgLy8gU2tpcCB0aGUgbW9yZSBleHBlbnNpdmUgYHRvU3RyaW5nYC1iYXNlZCB0eXBlIGNoZWNrcyBpZiBgb2JqYCBoYXMgbm9cbiAgLy8gYC5sZW5ndGhgLlxuICB2YXIgbGVuZ3RoID0gZ2V0TGVuZ3RoKG9iaik7XG4gIGlmICh0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInICYmIChcbiAgICBpc0FycmF5KG9iaikgfHwgaXNTdHJpbmcob2JqKSB8fCBpc0FyZ3VtZW50cyhvYmopXG4gICkpIHJldHVybiBsZW5ndGggPT09IDA7XG4gIHJldHVybiBnZXRMZW5ndGgoa2V5cyhvYmopKSA9PT0gMDtcbn1cbiIsImltcG9ydCBfIGZyb20gJy4vdW5kZXJzY29yZS5qcyc7XG5pbXBvcnQgeyB0b1N0cmluZywgU3ltYm9sUHJvdG8gfSBmcm9tICcuL19zZXR1cC5qcyc7XG5pbXBvcnQgZ2V0Qnl0ZUxlbmd0aCBmcm9tICcuL19nZXRCeXRlTGVuZ3RoLmpzJztcbmltcG9ydCBpc1R5cGVkQXJyYXkgZnJvbSAnLi9pc1R5cGVkQXJyYXkuanMnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCB7IGhhc1N0cmluZ1RhZ0J1ZyB9ICBmcm9tICcuL19zdHJpbmdUYWdCdWcuanMnO1xuaW1wb3J0IGlzRGF0YVZpZXcgZnJvbSAnLi9pc0RhdGFWaWV3LmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5pbXBvcnQgaGFzIGZyb20gJy4vX2hhcy5qcyc7XG5pbXBvcnQgdG9CdWZmZXJWaWV3IGZyb20gJy4vX3RvQnVmZmVyVmlldy5qcyc7XG5cbi8vIFdlIHVzZSB0aGlzIHN0cmluZyB0d2ljZSwgc28gZ2l2ZSBpdCBhIG5hbWUgZm9yIG1pbmlmaWNhdGlvbi5cbnZhciB0YWdEYXRhVmlldyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8vIEludGVybmFsIHJlY3Vyc2l2ZSBjb21wYXJpc29uIGZ1bmN0aW9uIGZvciBgXy5pc0VxdWFsYC5cbmZ1bmN0aW9uIGVxKGEsIGIsIGFTdGFjaywgYlN0YWNrKSB7XG4gIC8vIElkZW50aWNhbCBvYmplY3RzIGFyZSBlcXVhbC4gYDAgPT09IC0wYCwgYnV0IHRoZXkgYXJlbid0IGlkZW50aWNhbC5cbiAgLy8gU2VlIHRoZSBbSGFybW9ueSBgZWdhbGAgcHJvcG9zYWxdKGh0dHBzOi8vd2lraS5lY21hc2NyaXB0Lm9yZy9kb2t1LnBocD9pZD1oYXJtb255OmVnYWwpLlxuICBpZiAoYSA9PT0gYikgcmV0dXJuIGEgIT09IDAgfHwgMSAvIGEgPT09IDEgLyBiO1xuICAvLyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAgb25seSBlcXVhbCB0byBpdHNlbGYgKHN0cmljdCBjb21wYXJpc29uKS5cbiAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgLy8gYE5hTmBzIGFyZSBlcXVpdmFsZW50LCBidXQgbm9uLXJlZmxleGl2ZS5cbiAgaWYgKGEgIT09IGEpIHJldHVybiBiICE9PSBiO1xuICAvLyBFeGhhdXN0IHByaW1pdGl2ZSBjaGVja3NcbiAgdmFyIHR5cGUgPSB0eXBlb2YgYTtcbiAgaWYgKHR5cGUgIT09ICdmdW5jdGlvbicgJiYgdHlwZSAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIGIgIT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIGRlZXBFcShhLCBiLCBhU3RhY2ssIGJTdGFjayk7XG59XG5cbi8vIEludGVybmFsIHJlY3Vyc2l2ZSBjb21wYXJpc29uIGZ1bmN0aW9uIGZvciBgXy5pc0VxdWFsYC5cbmZ1bmN0aW9uIGRlZXBFcShhLCBiLCBhU3RhY2ssIGJTdGFjaykge1xuICAvLyBVbndyYXAgYW55IHdyYXBwZWQgb2JqZWN0cy5cbiAgaWYgKGEgaW5zdGFuY2VvZiBfKSBhID0gYS5fd3JhcHBlZDtcbiAgaWYgKGIgaW5zdGFuY2VvZiBfKSBiID0gYi5fd3JhcHBlZDtcbiAgLy8gQ29tcGFyZSBgW1tDbGFzc11dYCBuYW1lcy5cbiAgdmFyIGNsYXNzTmFtZSA9IHRvU3RyaW5nLmNhbGwoYSk7XG4gIGlmIChjbGFzc05hbWUgIT09IHRvU3RyaW5nLmNhbGwoYikpIHJldHVybiBmYWxzZTtcbiAgLy8gV29yayBhcm91bmQgYSBidWcgaW4gSUUgMTAgLSBFZGdlIDEzLlxuICBpZiAoaGFzU3RyaW5nVGFnQnVnICYmIGNsYXNzTmFtZSA9PSAnW29iamVjdCBPYmplY3RdJyAmJiBpc0RhdGFWaWV3KGEpKSB7XG4gICAgaWYgKCFpc0RhdGFWaWV3KGIpKSByZXR1cm4gZmFsc2U7XG4gICAgY2xhc3NOYW1lID0gdGFnRGF0YVZpZXc7XG4gIH1cbiAgc3dpdGNoIChjbGFzc05hbWUpIHtcbiAgICAvLyBUaGVzZSB0eXBlcyBhcmUgY29tcGFyZWQgYnkgdmFsdWUuXG4gICAgY2FzZSAnW29iamVjdCBSZWdFeHBdJzpcbiAgICAgIC8vIFJlZ0V4cHMgYXJlIGNvZXJjZWQgdG8gc3RyaW5ncyBmb3IgY29tcGFyaXNvbiAoTm90ZTogJycgKyAvYS9pID09PSAnL2EvaScpXG4gICAgY2FzZSAnW29iamVjdCBTdHJpbmddJzpcbiAgICAgIC8vIFByaW1pdGl2ZXMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgb2JqZWN0IHdyYXBwZXJzIGFyZSBlcXVpdmFsZW50OyB0aHVzLCBgXCI1XCJgIGlzXG4gICAgICAvLyBlcXVpdmFsZW50IHRvIGBuZXcgU3RyaW5nKFwiNVwiKWAuXG4gICAgICByZXR1cm4gJycgKyBhID09PSAnJyArIGI7XG4gICAgY2FzZSAnW29iamVjdCBOdW1iZXJdJzpcbiAgICAgIC8vIGBOYU5gcyBhcmUgZXF1aXZhbGVudCwgYnV0IG5vbi1yZWZsZXhpdmUuXG4gICAgICAvLyBPYmplY3QoTmFOKSBpcyBlcXVpdmFsZW50IHRvIE5hTi5cbiAgICAgIGlmICgrYSAhPT0gK2EpIHJldHVybiArYiAhPT0gK2I7XG4gICAgICAvLyBBbiBgZWdhbGAgY29tcGFyaXNvbiBpcyBwZXJmb3JtZWQgZm9yIG90aGVyIG51bWVyaWMgdmFsdWVzLlxuICAgICAgcmV0dXJuICthID09PSAwID8gMSAvICthID09PSAxIC8gYiA6ICthID09PSArYjtcbiAgICBjYXNlICdbb2JqZWN0IERhdGVdJzpcbiAgICBjYXNlICdbb2JqZWN0IEJvb2xlYW5dJzpcbiAgICAgIC8vIENvZXJjZSBkYXRlcyBhbmQgYm9vbGVhbnMgdG8gbnVtZXJpYyBwcmltaXRpdmUgdmFsdWVzLiBEYXRlcyBhcmUgY29tcGFyZWQgYnkgdGhlaXJcbiAgICAgIC8vIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9ucy4gTm90ZSB0aGF0IGludmFsaWQgZGF0ZXMgd2l0aCBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnNcbiAgICAgIC8vIG9mIGBOYU5gIGFyZSBub3QgZXF1aXZhbGVudC5cbiAgICAgIHJldHVybiArYSA9PT0gK2I7XG4gICAgY2FzZSAnW29iamVjdCBTeW1ib2xdJzpcbiAgICAgIHJldHVybiBTeW1ib2xQcm90by52YWx1ZU9mLmNhbGwoYSkgPT09IFN5bWJvbFByb3RvLnZhbHVlT2YuY2FsbChiKTtcbiAgICBjYXNlICdbb2JqZWN0IEFycmF5QnVmZmVyXSc6XG4gICAgY2FzZSB0YWdEYXRhVmlldzpcbiAgICAgIC8vIENvZXJjZSB0byB0eXBlZCBhcnJheSBzbyB3ZSBjYW4gZmFsbCB0aHJvdWdoLlxuICAgICAgcmV0dXJuIGRlZXBFcSh0b0J1ZmZlclZpZXcoYSksIHRvQnVmZmVyVmlldyhiKSwgYVN0YWNrLCBiU3RhY2spO1xuICB9XG5cbiAgdmFyIGFyZUFycmF5cyA9IGNsYXNzTmFtZSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgaWYgKCFhcmVBcnJheXMgJiYgaXNUeXBlZEFycmF5KGEpKSB7XG4gICAgICB2YXIgYnl0ZUxlbmd0aCA9IGdldEJ5dGVMZW5ndGgoYSk7XG4gICAgICBpZiAoYnl0ZUxlbmd0aCAhPT0gZ2V0Qnl0ZUxlbmd0aChiKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKGEuYnVmZmVyID09PSBiLmJ1ZmZlciAmJiBhLmJ5dGVPZmZzZXQgPT09IGIuYnl0ZU9mZnNldCkgcmV0dXJuIHRydWU7XG4gICAgICBhcmVBcnJheXMgPSB0cnVlO1xuICB9XG4gIGlmICghYXJlQXJyYXlzKSB7XG4gICAgaWYgKHR5cGVvZiBhICE9ICdvYmplY3QnIHx8IHR5cGVvZiBiICE9ICdvYmplY3QnKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBPYmplY3RzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWl2YWxlbnQsIGJ1dCBgT2JqZWN0YHMgb3IgYEFycmF5YHNcbiAgICAvLyBmcm9tIGRpZmZlcmVudCBmcmFtZXMgYXJlLlxuICAgIHZhciBhQ3RvciA9IGEuY29uc3RydWN0b3IsIGJDdG9yID0gYi5jb25zdHJ1Y3RvcjtcbiAgICBpZiAoYUN0b3IgIT09IGJDdG9yICYmICEoaXNGdW5jdGlvbihhQ3RvcikgJiYgYUN0b3IgaW5zdGFuY2VvZiBhQ3RvciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGJDdG9yKSAmJiBiQ3RvciBpbnN0YW5jZW9mIGJDdG9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgKCdjb25zdHJ1Y3RvcicgaW4gYSAmJiAnY29uc3RydWN0b3InIGluIGIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIEFzc3VtZSBlcXVhbGl0eSBmb3IgY3ljbGljIHN0cnVjdHVyZXMuIFRoZSBhbGdvcml0aG0gZm9yIGRldGVjdGluZyBjeWNsaWNcbiAgLy8gc3RydWN0dXJlcyBpcyBhZGFwdGVkIGZyb20gRVMgNS4xIHNlY3Rpb24gMTUuMTIuMywgYWJzdHJhY3Qgb3BlcmF0aW9uIGBKT2AuXG5cbiAgLy8gSW5pdGlhbGl6aW5nIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAvLyBJdCdzIGRvbmUgaGVyZSBzaW5jZSB3ZSBvbmx5IG5lZWQgdGhlbSBmb3Igb2JqZWN0cyBhbmQgYXJyYXlzIGNvbXBhcmlzb24uXG4gIGFTdGFjayA9IGFTdGFjayB8fCBbXTtcbiAgYlN0YWNrID0gYlN0YWNrIHx8IFtdO1xuICB2YXIgbGVuZ3RoID0gYVN0YWNrLmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgLy8gTGluZWFyIHNlYXJjaC4gUGVyZm9ybWFuY2UgaXMgaW52ZXJzZWx5IHByb3BvcnRpb25hbCB0byB0aGUgbnVtYmVyIG9mXG4gICAgLy8gdW5pcXVlIG5lc3RlZCBzdHJ1Y3R1cmVzLlxuICAgIGlmIChhU3RhY2tbbGVuZ3RoXSA9PT0gYSkgcmV0dXJuIGJTdGFja1tsZW5ndGhdID09PSBiO1xuICB9XG5cbiAgLy8gQWRkIHRoZSBmaXJzdCBvYmplY3QgdG8gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICBhU3RhY2sucHVzaChhKTtcbiAgYlN0YWNrLnB1c2goYik7XG5cbiAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIGFuZCBhcnJheXMuXG4gIGlmIChhcmVBcnJheXMpIHtcbiAgICAvLyBDb21wYXJlIGFycmF5IGxlbmd0aHMgdG8gZGV0ZXJtaW5lIGlmIGEgZGVlcCBjb21wYXJpc29uIGlzIG5lY2Vzc2FyeS5cbiAgICBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoICE9PSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIERlZXAgY29tcGFyZSB0aGUgY29udGVudHMsIGlnbm9yaW5nIG5vbi1udW1lcmljIHByb3BlcnRpZXMuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoIWVxKGFbbGVuZ3RoXSwgYltsZW5ndGhdLCBhU3RhY2ssIGJTdGFjaykpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRGVlcCBjb21wYXJlIG9iamVjdHMuXG4gICAgdmFyIF9rZXlzID0ga2V5cyhhKSwga2V5O1xuICAgIGxlbmd0aCA9IF9rZXlzLmxlbmd0aDtcbiAgICAvLyBFbnN1cmUgdGhhdCBib3RoIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBudW1iZXIgb2YgcHJvcGVydGllcyBiZWZvcmUgY29tcGFyaW5nIGRlZXAgZXF1YWxpdHkuXG4gICAgaWYgKGtleXMoYikubGVuZ3RoICE9PSBsZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIC8vIERlZXAgY29tcGFyZSBlYWNoIG1lbWJlclxuICAgICAga2V5ID0gX2tleXNbbGVuZ3RoXTtcbiAgICAgIGlmICghKGhhcyhiLCBrZXkpICYmIGVxKGFba2V5XSwgYltrZXldLCBhU3RhY2ssIGJTdGFjaykpKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIFJlbW92ZSB0aGUgZmlyc3Qgb2JqZWN0IGZyb20gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICBhU3RhY2sucG9wKCk7XG4gIGJTdGFjay5wb3AoKTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbi8vIFBlcmZvcm0gYSBkZWVwIGNvbXBhcmlzb24gdG8gY2hlY2sgaWYgdHdvIG9iamVjdHMgYXJlIGVxdWFsLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNFcXVhbChhLCBiKSB7XG4gIHJldHVybiBlcShhLCBiKTtcbn1cbiIsImltcG9ydCB0YWdUZXN0ZXIgZnJvbSAnLi9fdGFnVGVzdGVyLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgdGFnVGVzdGVyKCdFcnJvcicpO1xuIiwiaW1wb3J0IHsgX2lzRmluaXRlIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuaW1wb3J0IGlzU3ltYm9sIGZyb20gJy4vaXNTeW1ib2wuanMnO1xuXG4vLyBJcyBhIGdpdmVuIG9iamVjdCBhIGZpbml0ZSBudW1iZXI/XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0Zpbml0ZShvYmopIHtcbiAgcmV0dXJuICFpc1N5bWJvbChvYmopICYmIF9pc0Zpbml0ZShvYmopICYmICFpc05hTihwYXJzZUZsb2F0KG9iaikpO1xufVxuIiwiaW1wb3J0IHRhZ1Rlc3RlciBmcm9tICcuL190YWdUZXN0ZXIuanMnO1xuaW1wb3J0IHsgcm9vdCB9IGZyb20gJy4vX3NldHVwLmpzJztcblxudmFyIGlzRnVuY3Rpb24gPSB0YWdUZXN0ZXIoJ0Z1bmN0aW9uJyk7XG5cbi8vIE9wdGltaXplIGBpc0Z1bmN0aW9uYCBpZiBhcHByb3ByaWF0ZS4gV29yayBhcm91bmQgc29tZSBgdHlwZW9mYCBidWdzIGluIG9sZFxuLy8gdjgsIElFIDExICgjMTYyMSksIFNhZmFyaSA4ICgjMTkyOSksIGFuZCBQaGFudG9tSlMgKCMyMjM2KS5cbnZhciBub2RlbGlzdCA9IHJvb3QuZG9jdW1lbnQgJiYgcm9vdC5kb2N1bWVudC5jaGlsZE5vZGVzO1xuaWYgKHR5cGVvZiAvLi8gIT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgSW50OEFycmF5ICE9ICdvYmplY3QnICYmIHR5cGVvZiBub2RlbGlzdCAhPSAnZnVuY3Rpb24nKSB7XG4gIGlzRnVuY3Rpb24gPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PSAnZnVuY3Rpb24nIHx8IGZhbHNlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0Z1bmN0aW9uO1xuIiwiaW1wb3J0IHRhZ1Rlc3RlciBmcm9tICcuL190YWdUZXN0ZXIuanMnO1xuaW1wb3J0IHsgaXNJRTExIH0gZnJvbSAnLi9fc3RyaW5nVGFnQnVnLmpzJztcbmltcG9ydCB7IGllMTFmaW5nZXJwcmludCwgbWFwTWV0aG9kcyB9ICBmcm9tICcuL19tZXRob2RGaW5nZXJwcmludC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGlzSUUxMSA/IGllMTFmaW5nZXJwcmludChtYXBNZXRob2RzKSA6IHRhZ1Rlc3RlcignTWFwJyk7XG4iLCJpbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vLyBSZXR1cm5zIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyBhIGdpdmVuIHNldCBvZiBga2V5OnZhbHVlYCBwYWlycy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzTWF0Y2gob2JqZWN0LCBhdHRycykge1xuICB2YXIgX2tleXMgPSBrZXlzKGF0dHJzKSwgbGVuZ3RoID0gX2tleXMubGVuZ3RoO1xuICBpZiAob2JqZWN0ID09IG51bGwpIHJldHVybiAhbGVuZ3RoO1xuICB2YXIgb2JqID0gT2JqZWN0KG9iamVjdCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gX2tleXNbaV07XG4gICAgaWYgKGF0dHJzW2tleV0gIT09IG9ialtrZXldIHx8ICEoa2V5IGluIG9iaikpIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbiIsImltcG9ydCB7IF9pc05hTiB9IGZyb20gJy4vX3NldHVwLmpzJztcbmltcG9ydCBpc051bWJlciBmcm9tICcuL2lzTnVtYmVyLmpzJztcblxuLy8gSXMgdGhlIGdpdmVuIHZhbHVlIGBOYU5gP1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNOYU4ob2JqKSB7XG4gIHJldHVybiBpc051bWJlcihvYmopICYmIF9pc05hTihvYmopO1xufVxuIiwiLy8gSXMgYSBnaXZlbiB2YWx1ZSBlcXVhbCB0byBudWxsP1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNOdWxsKG9iaikge1xuICByZXR1cm4gb2JqID09PSBudWxsO1xufVxuIiwiaW1wb3J0IHRhZ1Rlc3RlciBmcm9tICcuL190YWdUZXN0ZXIuanMnO1xuXG5leHBvcnQgZGVmYXVsdCB0YWdUZXN0ZXIoJ051bWJlcicpO1xuIiwiLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSBhbiBvYmplY3Q/XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2Ygb2JqO1xuICByZXR1cm4gdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZSA9PT0gJ29iamVjdCcgJiYgISFvYmopO1xufVxuIiwiaW1wb3J0IHRhZ1Rlc3RlciBmcm9tICcuL190YWdUZXN0ZXIuanMnO1xuXG5leHBvcnQgZGVmYXVsdCB0YWdUZXN0ZXIoJ1JlZ0V4cCcpO1xuIiwiaW1wb3J0IHRhZ1Rlc3RlciBmcm9tICcuL190YWdUZXN0ZXIuanMnO1xuaW1wb3J0IHsgaXNJRTExIH0gZnJvbSAnLi9fc3RyaW5nVGFnQnVnLmpzJztcbmltcG9ydCB7IGllMTFmaW5nZXJwcmludCwgc2V0TWV0aG9kcyB9ICBmcm9tICcuL19tZXRob2RGaW5nZXJwcmludC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGlzSUUxMSA/IGllMTFmaW5nZXJwcmludChzZXRNZXRob2RzKSA6IHRhZ1Rlc3RlcignU2V0Jyk7XG4iLCJpbXBvcnQgdGFnVGVzdGVyIGZyb20gJy4vX3RhZ1Rlc3Rlci5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHRhZ1Rlc3RlcignU3RyaW5nJyk7XG4iLCJpbXBvcnQgdGFnVGVzdGVyIGZyb20gJy4vX3RhZ1Rlc3Rlci5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHRhZ1Rlc3RlcignU3ltYm9sJyk7XG4iLCJpbXBvcnQgeyBzdXBwb3J0c0FycmF5QnVmZmVyLCBuYXRpdmVJc1ZpZXcsIHRvU3RyaW5nIH0gZnJvbSAnLi9fc2V0dXAuanMnO1xuaW1wb3J0IGlzRGF0YVZpZXcgZnJvbSAnLi9pc0RhdGFWaWV3LmpzJztcbmltcG9ydCBjb25zdGFudCBmcm9tICcuL2NvbnN0YW50LmpzJztcbmltcG9ydCBpc0J1ZmZlckxpa2UgZnJvbSAnLi9faXNCdWZmZXJMaWtlLmpzJztcblxuLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIHR5cGVkIGFycmF5P1xudmFyIHR5cGVkQXJyYXlQYXR0ZXJuID0gL1xcW29iamVjdCAoKEl8VWkpbnQoOHwxNnwzMil8RmxvYXQoMzJ8NjQpfFVpbnQ4Q2xhbXBlZHxCaWcoSXxVaSludDY0KUFycmF5XFxdLztcbmZ1bmN0aW9uIGlzVHlwZWRBcnJheShvYmopIHtcbiAgLy8gYEFycmF5QnVmZmVyLmlzVmlld2AgaXMgdGhlIG1vc3QgZnV0dXJlLXByb29mLCBzbyB1c2UgaXQgd2hlbiBhdmFpbGFibGUuXG4gIC8vIE90aGVyd2lzZSwgZmFsbCBiYWNrIG9uIHRoZSBhYm92ZSByZWd1bGFyIGV4cHJlc3Npb24uXG4gIHJldHVybiBuYXRpdmVJc1ZpZXcgPyAobmF0aXZlSXNWaWV3KG9iaikgJiYgIWlzRGF0YVZpZXcob2JqKSkgOlxuICAgICAgICAgICAgICAgIGlzQnVmZmVyTGlrZShvYmopICYmIHR5cGVkQXJyYXlQYXR0ZXJuLnRlc3QodG9TdHJpbmcuY2FsbChvYmopKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3VwcG9ydHNBcnJheUJ1ZmZlciA/IGlzVHlwZWRBcnJheSA6IGNvbnN0YW50KGZhbHNlKTtcbiIsIi8vIElzIGEgZ2l2ZW4gdmFyaWFibGUgdW5kZWZpbmVkP1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNVbmRlZmluZWQob2JqKSB7XG4gIHJldHVybiBvYmogPT09IHZvaWQgMDtcbn1cbiIsImltcG9ydCB0YWdUZXN0ZXIgZnJvbSAnLi9fdGFnVGVzdGVyLmpzJztcbmltcG9ydCB7IGlzSUUxMSB9IGZyb20gJy4vX3N0cmluZ1RhZ0J1Zy5qcyc7XG5pbXBvcnQgeyBpZTExZmluZ2VycHJpbnQsIHdlYWtNYXBNZXRob2RzIH0gIGZyb20gJy4vX21ldGhvZEZpbmdlcnByaW50LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgaXNJRTExID8gaWUxMWZpbmdlcnByaW50KHdlYWtNYXBNZXRob2RzKSA6IHRhZ1Rlc3RlcignV2Vha01hcCcpO1xuIiwiaW1wb3J0IHRhZ1Rlc3RlciBmcm9tICcuL190YWdUZXN0ZXIuanMnO1xuXG5leHBvcnQgZGVmYXVsdCB0YWdUZXN0ZXIoJ1dlYWtTZXQnKTtcbiIsImltcG9ydCBfIGZyb20gJy4vdW5kZXJzY29yZS5qcyc7XG5pbXBvcnQgYmFzZUl0ZXJhdGVlIGZyb20gJy4vX2Jhc2VJdGVyYXRlZS5qcyc7XG5cbi8vIEV4dGVybmFsIHdyYXBwZXIgZm9yIG91ciBjYWxsYmFjayBnZW5lcmF0b3IuIFVzZXJzIG1heSBjdXN0b21pemVcbi8vIGBfLml0ZXJhdGVlYCBpZiB0aGV5IHdhbnQgYWRkaXRpb25hbCBwcmVkaWNhdGUvaXRlcmF0ZWUgc2hvcnRoYW5kIHN0eWxlcy5cbi8vIFRoaXMgYWJzdHJhY3Rpb24gaGlkZXMgdGhlIGludGVybmFsLW9ubHkgYGFyZ0NvdW50YCBhcmd1bWVudC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGl0ZXJhdGVlKHZhbHVlLCBjb250ZXh0KSB7XG4gIHJldHVybiBiYXNlSXRlcmF0ZWUodmFsdWUsIGNvbnRleHQsIEluZmluaXR5KTtcbn1cbl8uaXRlcmF0ZWUgPSBpdGVyYXRlZTtcbiIsImltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcbmltcG9ydCB7IG5hdGl2ZUtleXMsIGhhc0VudW1CdWcgfSBmcm9tICcuL19zZXR1cC5qcyc7XG5pbXBvcnQgaGFzIGZyb20gJy4vX2hhcy5qcyc7XG5pbXBvcnQgY29sbGVjdE5vbkVudW1Qcm9wcyBmcm9tICcuL19jb2xsZWN0Tm9uRW51bVByb3BzLmpzJztcblxuLy8gUmV0cmlldmUgdGhlIG5hbWVzIG9mIGFuIG9iamVjdCdzIG93biBwcm9wZXJ0aWVzLlxuLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYE9iamVjdC5rZXlzYC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGtleXMob2JqKSB7XG4gIGlmICghaXNPYmplY3Qob2JqKSkgcmV0dXJuIFtdO1xuICBpZiAobmF0aXZlS2V5cykgcmV0dXJuIG5hdGl2ZUtleXMob2JqKTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikgaWYgKGhhcyhvYmosIGtleSkpIGtleXMucHVzaChrZXkpO1xuICAvLyBBaGVtLCBJRSA8IDkuXG4gIGlmIChoYXNFbnVtQnVnKSBjb2xsZWN0Tm9uRW51bVByb3BzKG9iaiwga2V5cyk7XG4gIHJldHVybiBrZXlzO1xufVxuIiwiaW1wb3J0IHJlc3QgZnJvbSAnLi9yZXN0LmpzJztcblxuLy8gR2V0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGxhc3QgTlxuLy8gdmFsdWVzIGluIHRoZSBhcnJheS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxhc3QoYXJyYXksIG4sIGd1YXJkKSB7XG4gIGlmIChhcnJheSA9PSBudWxsIHx8IGFycmF5Lmxlbmd0aCA8IDEpIHJldHVybiBuID09IG51bGwgfHwgZ3VhcmQgPyB2b2lkIDAgOiBbXTtcbiAgaWYgKG4gPT0gbnVsbCB8fCBndWFyZCkgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdO1xuICByZXR1cm4gcmVzdChhcnJheSwgTWF0aC5tYXgoMCwgYXJyYXkubGVuZ3RoIC0gbikpO1xufVxuIiwiaW1wb3J0IGZpbmRMYXN0SW5kZXggZnJvbSAnLi9maW5kTGFzdEluZGV4LmpzJztcbmltcG9ydCBjcmVhdGVJbmRleEZpbmRlciBmcm9tICcuL19jcmVhdGVJbmRleEZpbmRlci5qcyc7XG5cbi8vIFJldHVybiB0aGUgcG9zaXRpb24gb2YgdGhlIGxhc3Qgb2NjdXJyZW5jZSBvZiBhbiBpdGVtIGluIGFuIGFycmF5LFxuLy8gb3IgLTEgaWYgdGhlIGl0ZW0gaXMgbm90IGluY2x1ZGVkIGluIHRoZSBhcnJheS5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUluZGV4RmluZGVyKC0xLCBmaW5kTGFzdEluZGV4KTtcbiIsImltcG9ydCBjYiBmcm9tICcuL19jYi5qcyc7XG5pbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9faXNBcnJheUxpa2UuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLy8gUmV0dXJuIHRoZSByZXN1bHRzIG9mIGFwcGx5aW5nIHRoZSBpdGVyYXRlZSB0byBlYWNoIGVsZW1lbnQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYXAob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgdmFyIF9rZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYga2V5cyhvYmopLFxuICAgICAgbGVuZ3RoID0gKF9rZXlzIHx8IG9iaikubGVuZ3RoLFxuICAgICAgcmVzdWx0cyA9IEFycmF5KGxlbmd0aCk7XG4gIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICB2YXIgY3VycmVudEtleSA9IF9rZXlzID8gX2tleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgcmVzdWx0c1tpbmRleF0gPSBpdGVyYXRlZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHM7XG59XG4iLCJpbXBvcnQgY2IgZnJvbSAnLi9fY2IuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLy8gUmV0dXJucyB0aGUgcmVzdWx0cyBvZiBhcHBseWluZyB0aGUgYGl0ZXJhdGVlYCB0byBlYWNoIGVsZW1lbnQgb2YgYG9iamAuXG4vLyBJbiBjb250cmFzdCB0byBgXy5tYXBgIGl0IHJldHVybnMgYW4gb2JqZWN0LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFwT2JqZWN0KG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gIHZhciBfa2V5cyA9IGtleXMob2JqKSxcbiAgICAgIGxlbmd0aCA9IF9rZXlzLmxlbmd0aCxcbiAgICAgIHJlc3VsdHMgPSB7fTtcbiAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgIHZhciBjdXJyZW50S2V5ID0gX2tleXNbaW5kZXhdO1xuICAgIHJlc3VsdHNbY3VycmVudEtleV0gPSBpdGVyYXRlZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHM7XG59XG4iLCJpbXBvcnQgZXh0ZW5kT3duIGZyb20gJy4vZXh0ZW5kT3duLmpzJztcbmltcG9ydCBpc01hdGNoIGZyb20gJy4vaXNNYXRjaC5qcyc7XG5cbi8vIFJldHVybnMgYSBwcmVkaWNhdGUgZm9yIGNoZWNraW5nIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyBhIGdpdmVuIHNldCBvZlxuLy8gYGtleTp2YWx1ZWAgcGFpcnMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYXRjaGVyKGF0dHJzKSB7XG4gIGF0dHJzID0gZXh0ZW5kT3duKHt9LCBhdHRycyk7XG4gIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gaXNNYXRjaChvYmosIGF0dHJzKTtcbiAgfTtcbn1cbiIsImltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL19pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQgdmFsdWVzIGZyb20gJy4vdmFsdWVzLmpzJztcbmltcG9ydCBjYiBmcm9tICcuL19jYi5qcyc7XG5pbXBvcnQgZWFjaCBmcm9tICcuL2VhY2guanMnO1xuXG4vLyBSZXR1cm4gdGhlIG1heGltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYXgob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICB2YXIgcmVzdWx0ID0gLUluZmluaXR5LCBsYXN0Q29tcHV0ZWQgPSAtSW5maW5pdHksXG4gICAgICB2YWx1ZSwgY29tcHV0ZWQ7XG4gIGlmIChpdGVyYXRlZSA9PSBudWxsIHx8ICh0eXBlb2YgaXRlcmF0ZWUgPT0gJ251bWJlcicgJiYgdHlwZW9mIG9ialswXSAhPSAnb2JqZWN0JyAmJiBvYmogIT0gbnVsbCkpIHtcbiAgICBvYmogPSBpc0FycmF5TGlrZShvYmopID8gb2JqIDogdmFsdWVzKG9iaik7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWUgPSBvYmpbaV07XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSA+IHJlc3VsdCkge1xuICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uKHYsIGluZGV4LCBsaXN0KSB7XG4gICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHYsIGluZGV4LCBsaXN0KTtcbiAgICAgIGlmIChjb21wdXRlZCA+IGxhc3RDb21wdXRlZCB8fCAoY29tcHV0ZWQgPT09IC1JbmZpbml0eSAmJiByZXN1bHQgPT09IC1JbmZpbml0eSkpIHtcbiAgICAgICAgcmVzdWx0ID0gdjtcbiAgICAgICAgbGFzdENvbXB1dGVkID0gY29tcHV0ZWQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCBoYXMgZnJvbSAnLi9faGFzLmpzJztcblxuLy8gTWVtb2l6ZSBhbiBleHBlbnNpdmUgZnVuY3Rpb24gYnkgc3RvcmluZyBpdHMgcmVzdWx0cy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lbW9pemUoZnVuYywgaGFzaGVyKSB7XG4gIHZhciBtZW1vaXplID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIGNhY2hlID0gbWVtb2l6ZS5jYWNoZTtcbiAgICB2YXIgYWRkcmVzcyA9ICcnICsgKGhhc2hlciA/IGhhc2hlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDoga2V5KTtcbiAgICBpZiAoIWhhcyhjYWNoZSwgYWRkcmVzcykpIGNhY2hlW2FkZHJlc3NdID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBjYWNoZVthZGRyZXNzXTtcbiAgfTtcbiAgbWVtb2l6ZS5jYWNoZSA9IHt9O1xuICByZXR1cm4gbWVtb2l6ZTtcbn1cbiIsImltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL19pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQgdmFsdWVzIGZyb20gJy4vdmFsdWVzLmpzJztcbmltcG9ydCBjYiBmcm9tICcuL19jYi5qcyc7XG5pbXBvcnQgZWFjaCBmcm9tICcuL2VhY2guanMnO1xuXG4vLyBSZXR1cm4gdGhlIG1pbmltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaW4ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICB2YXIgcmVzdWx0ID0gSW5maW5pdHksIGxhc3RDb21wdXRlZCA9IEluZmluaXR5LFxuICAgICAgdmFsdWUsIGNvbXB1dGVkO1xuICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCB8fCAodHlwZW9mIGl0ZXJhdGVlID09ICdudW1iZXInICYmIHR5cGVvZiBvYmpbMF0gIT0gJ29iamVjdCcgJiYgb2JqICE9IG51bGwpKSB7XG4gICAgb2JqID0gaXNBcnJheUxpa2Uob2JqKSA/IG9iaiA6IHZhbHVlcyhvYmopO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlID0gb2JqW2ldO1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiYgdmFsdWUgPCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIGVhY2gob2JqLCBmdW5jdGlvbih2LCBpbmRleCwgbGlzdCkge1xuICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2LCBpbmRleCwgbGlzdCk7XG4gICAgICBpZiAoY29tcHV0ZWQgPCBsYXN0Q29tcHV0ZWQgfHwgKGNvbXB1dGVkID09PSBJbmZpbml0eSAmJiByZXN1bHQgPT09IEluZmluaXR5KSkge1xuICAgICAgICByZXN1bHQgPSB2O1xuICAgICAgICBsYXN0Q29tcHV0ZWQgPSBjb21wdXRlZDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiaW1wb3J0IF8gZnJvbSAnLi91bmRlcnNjb3JlLmpzJztcbmltcG9ydCBlYWNoIGZyb20gJy4vZWFjaC5qcyc7XG5pbXBvcnQgZnVuY3Rpb25zIGZyb20gJy4vZnVuY3Rpb25zLmpzJztcbmltcG9ydCB7IHB1c2ggfSBmcm9tICcuL19zZXR1cC5qcyc7XG5pbXBvcnQgY2hhaW5SZXN1bHQgZnJvbSAnLi9fY2hhaW5SZXN1bHQuanMnO1xuXG4vLyBBZGQgeW91ciBvd24gY3VzdG9tIGZ1bmN0aW9ucyB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaXhpbihvYmopIHtcbiAgZWFjaChmdW5jdGlvbnMob2JqKSwgZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBmdW5jID0gX1tuYW1lXSA9IG9ialtuYW1lXTtcbiAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbdGhpcy5fd3JhcHBlZF07XG4gICAgICBwdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gY2hhaW5SZXN1bHQodGhpcywgZnVuYy5hcHBseShfLCBhcmdzKSk7XG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiBfO1xufVxuIiwiLy8gUmV0dXJucyBhIG5lZ2F0ZWQgdmVyc2lvbiBvZiB0aGUgcGFzc2VkLWluIHByZWRpY2F0ZS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5lZ2F0ZShwcmVkaWNhdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG4iLCIvLyBQcmVkaWNhdGUtZ2VuZXJhdGluZyBmdW5jdGlvbi4gT2Z0ZW4gdXNlZnVsIG91dHNpZGUgb2YgVW5kZXJzY29yZS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vb3AoKXt9XG4iLCIvLyBBIChwb3NzaWJseSBmYXN0ZXIpIHdheSB0byBnZXQgdGhlIGN1cnJlbnQgdGltZXN0YW1wIGFzIGFuIGludGVnZXIuXG5leHBvcnQgZGVmYXVsdCBEYXRlLm5vdyB8fCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xufTtcbiIsImltcG9ydCBnZXRMZW5ndGggIGZyb20gJy4vX2dldExlbmd0aC5qcyc7XG5cbi8vIENvbnZlcnRzIGxpc3RzIGludG8gb2JqZWN0cy4gUGFzcyBlaXRoZXIgYSBzaW5nbGUgYXJyYXkgb2YgYFtrZXksIHZhbHVlXWBcbi8vIHBhaXJzLCBvciB0d28gcGFyYWxsZWwgYXJyYXlzIG9mIHRoZSBzYW1lIGxlbmd0aCAtLSBvbmUgb2Yga2V5cywgYW5kIG9uZSBvZlxuLy8gdGhlIGNvcnJlc3BvbmRpbmcgdmFsdWVzLiBQYXNzaW5nIGJ5IHBhaXJzIGlzIHRoZSByZXZlcnNlIG9mIGBfLnBhaXJzYC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9iamVjdChsaXN0LCB2YWx1ZXMpIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gZ2V0TGVuZ3RoKGxpc3QpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodmFsdWVzKSB7XG4gICAgICByZXN1bHRbbGlzdFtpXV0gPSB2YWx1ZXNbaV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtsaXN0W2ldWzBdXSA9IGxpc3RbaV1bMV07XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCJpbXBvcnQgcmVzdEFyZ3VtZW50cyBmcm9tICcuL3Jlc3RBcmd1bWVudHMuanMnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBuZWdhdGUgZnJvbSAnLi9uZWdhdGUuanMnO1xuaW1wb3J0IG1hcCBmcm9tICcuL21hcC5qcyc7XG5pbXBvcnQgZmxhdHRlbiBmcm9tICcuL19mbGF0dGVuLmpzJztcbmltcG9ydCBjb250YWlucyBmcm9tICcuL2NvbnRhaW5zLmpzJztcbmltcG9ydCBwaWNrIGZyb20gJy4vcGljay5qcyc7XG5cbi8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCB3aXRob3V0IHRoZSBkaXNhbGxvd2VkIHByb3BlcnRpZXMuXG5leHBvcnQgZGVmYXVsdCByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKG9iaiwga2V5cykge1xuICB2YXIgaXRlcmF0ZWUgPSBrZXlzWzBdLCBjb250ZXh0O1xuICBpZiAoaXNGdW5jdGlvbihpdGVyYXRlZSkpIHtcbiAgICBpdGVyYXRlZSA9IG5lZ2F0ZShpdGVyYXRlZSk7XG4gICAgaWYgKGtleXMubGVuZ3RoID4gMSkgY29udGV4dCA9IGtleXNbMV07XG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IG1hcChmbGF0dGVuKGtleXMsIGZhbHNlLCBmYWxzZSksIFN0cmluZyk7XG4gICAgaXRlcmF0ZWUgPSBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICByZXR1cm4gIWNvbnRhaW5zKGtleXMsIGtleSk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gcGljayhvYmosIGl0ZXJhdGVlLCBjb250ZXh0KTtcbn0pO1xuIiwiaW1wb3J0IHBhcnRpYWwgZnJvbSAnLi9wYXJ0aWFsLmpzJztcbmltcG9ydCBiZWZvcmUgZnJvbSAnLi9iZWZvcmUuanMnO1xuXG4vLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIGF0IG1vc3Qgb25lIHRpbWUsIG5vIG1hdHRlciBob3dcbi8vIG9mdGVuIHlvdSBjYWxsIGl0LiBVc2VmdWwgZm9yIGxhenkgaW5pdGlhbGl6YXRpb24uXG5leHBvcnQgZGVmYXVsdCBwYXJ0aWFsKGJlZm9yZSwgMik7XG4iLCJpbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vLyBDb252ZXJ0IGFuIG9iamVjdCBpbnRvIGEgbGlzdCBvZiBgW2tleSwgdmFsdWVdYCBwYWlycy5cbi8vIFRoZSBvcHBvc2l0ZSBvZiBgXy5vYmplY3RgIHdpdGggb25lIGFyZ3VtZW50LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFpcnMob2JqKSB7XG4gIHZhciBfa2V5cyA9IGtleXMob2JqKTtcbiAgdmFyIGxlbmd0aCA9IF9rZXlzLmxlbmd0aDtcbiAgdmFyIHBhaXJzID0gQXJyYXkobGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHBhaXJzW2ldID0gW19rZXlzW2ldLCBvYmpbX2tleXNbaV1dXTtcbiAgfVxuICByZXR1cm4gcGFpcnM7XG59XG4iLCJpbXBvcnQgcmVzdEFyZ3VtZW50cyBmcm9tICcuL3Jlc3RBcmd1bWVudHMuanMnO1xuaW1wb3J0IGV4ZWN1dGVCb3VuZCBmcm9tICcuL19leGVjdXRlQm91bmQuanMnO1xuaW1wb3J0IF8gZnJvbSAnLi91bmRlcnNjb3JlLmpzJztcblxuLy8gUGFydGlhbGx5IGFwcGx5IGEgZnVuY3Rpb24gYnkgY3JlYXRpbmcgYSB2ZXJzaW9uIHRoYXQgaGFzIGhhZCBzb21lIG9mIGl0c1xuLy8gYXJndW1lbnRzIHByZS1maWxsZWQsIHdpdGhvdXQgY2hhbmdpbmcgaXRzIGR5bmFtaWMgYHRoaXNgIGNvbnRleHQuIGBfYCBhY3RzXG4vLyBhcyBhIHBsYWNlaG9sZGVyIGJ5IGRlZmF1bHQsIGFsbG93aW5nIGFueSBjb21iaW5hdGlvbiBvZiBhcmd1bWVudHMgdG8gYmVcbi8vIHByZS1maWxsZWQuIFNldCBgXy5wYXJ0aWFsLnBsYWNlaG9sZGVyYCBmb3IgYSBjdXN0b20gcGxhY2Vob2xkZXIgYXJndW1lbnQuXG52YXIgcGFydGlhbCA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oZnVuYywgYm91bmRBcmdzKSB7XG4gIHZhciBwbGFjZWhvbGRlciA9IHBhcnRpYWwucGxhY2Vob2xkZXI7XG4gIHZhciBib3VuZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwb3NpdGlvbiA9IDAsIGxlbmd0aCA9IGJvdW5kQXJncy5sZW5ndGg7XG4gICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBib3VuZEFyZ3NbaV0gPT09IHBsYWNlaG9sZGVyID8gYXJndW1lbnRzW3Bvc2l0aW9uKytdIDogYm91bmRBcmdzW2ldO1xuICAgIH1cbiAgICB3aGlsZSAocG9zaXRpb24gPCBhcmd1bWVudHMubGVuZ3RoKSBhcmdzLnB1c2goYXJndW1lbnRzW3Bvc2l0aW9uKytdKTtcbiAgICByZXR1cm4gZXhlY3V0ZUJvdW5kKGZ1bmMsIGJvdW5kLCB0aGlzLCB0aGlzLCBhcmdzKTtcbiAgfTtcbiAgcmV0dXJuIGJvdW5kO1xufSk7XG5cbnBhcnRpYWwucGxhY2Vob2xkZXIgPSBfO1xuZXhwb3J0IGRlZmF1bHQgcGFydGlhbDtcbiIsImltcG9ydCBncm91cCBmcm9tICcuL19ncm91cC5qcyc7XG5cbi8vIFNwbGl0IGEgY29sbGVjdGlvbiBpbnRvIHR3byBhcnJheXM6IG9uZSB3aG9zZSBlbGVtZW50cyBhbGwgcGFzcyB0aGUgZ2l2ZW5cbi8vIHRydXRoIHRlc3QsIGFuZCBvbmUgd2hvc2UgZWxlbWVudHMgYWxsIGRvIG5vdCBwYXNzIHRoZSB0cnV0aCB0ZXN0LlxuZXhwb3J0IGRlZmF1bHQgZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwgcGFzcykge1xuICByZXN1bHRbcGFzcyA/IDAgOiAxXS5wdXNoKHZhbHVlKTtcbn0sIHRydWUpO1xuIiwiaW1wb3J0IHJlc3RBcmd1bWVudHMgZnJvbSAnLi9yZXN0QXJndW1lbnRzLmpzJztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgb3B0aW1pemVDYiBmcm9tICcuL19vcHRpbWl6ZUNiLmpzJztcbmltcG9ydCBhbGxLZXlzIGZyb20gJy4vYWxsS2V5cy5qcyc7XG5pbXBvcnQga2V5SW5PYmogZnJvbSAnLi9fa2V5SW5PYmouanMnO1xuaW1wb3J0IGZsYXR0ZW4gZnJvbSAnLi9fZmxhdHRlbi5qcyc7XG5cbi8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCBvbmx5IGNvbnRhaW5pbmcgdGhlIGFsbG93ZWQgcHJvcGVydGllcy5cbmV4cG9ydCBkZWZhdWx0IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gIHZhciByZXN1bHQgPSB7fSwgaXRlcmF0ZWUgPSBrZXlzWzBdO1xuICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHQ7XG4gIGlmIChpc0Z1bmN0aW9uKGl0ZXJhdGVlKSkge1xuICAgIGlmIChrZXlzLmxlbmd0aCA+IDEpIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwga2V5c1sxXSk7XG4gICAga2V5cyA9IGFsbEtleXMob2JqKTtcbiAgfSBlbHNlIHtcbiAgICBpdGVyYXRlZSA9IGtleUluT2JqO1xuICAgIGtleXMgPSBmbGF0dGVuKGtleXMsIGZhbHNlLCBmYWxzZSk7XG4gICAgb2JqID0gT2JqZWN0KG9iaik7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICB2YXIgdmFsdWUgPSBvYmpba2V5XTtcbiAgICBpZiAoaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqKSkgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufSk7XG4iLCJpbXBvcnQgbWFwIGZyb20gJy4vbWFwLmpzJztcbmltcG9ydCBwcm9wZXJ0eSBmcm9tICcuL3Byb3BlcnR5LmpzJztcblxuLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgXy5tYXBgOiBmZXRjaGluZyBhIHByb3BlcnR5LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGx1Y2sob2JqLCBrZXkpIHtcbiAgcmV0dXJuIG1hcChvYmosIHByb3BlcnR5KGtleSkpO1xufVxuIiwiaW1wb3J0IGRlZXBHZXQgZnJvbSAnLi9fZGVlcEdldC5qcyc7XG5pbXBvcnQgdG9QYXRoIGZyb20gJy4vX3RvUGF0aC5qcyc7XG5cbi8vIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIHBhc3NlZCBhbiBvYmplY3QsIHdpbGwgdHJhdmVyc2UgdGhhdCBvYmplY3TigJlzXG4vLyBwcm9wZXJ0aWVzIGRvd24gdGhlIGdpdmVuIGBwYXRoYCwgc3BlY2lmaWVkIGFzIGFuIGFycmF5IG9mIGtleXMgb3IgaW5kaWNlcy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgcGF0aCA9IHRvUGF0aChwYXRoKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBkZWVwR2V0KG9iaiwgcGF0aCk7XG4gIH07XG59XG4iLCJpbXBvcnQgbm9vcCBmcm9tICcuL25vb3AuanMnO1xuaW1wb3J0IGdldCBmcm9tICcuL2dldC5qcyc7XG5cbi8vIEdlbmVyYXRlcyBhIGZ1bmN0aW9uIGZvciBhIGdpdmVuIG9iamVjdCB0aGF0IHJldHVybnMgYSBnaXZlbiBwcm9wZXJ0eS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByb3BlcnR5T2Yob2JqKSB7XG4gIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIG5vb3A7XG4gIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgcmV0dXJuIGdldChvYmosIHBhdGgpO1xuICB9O1xufVxuIiwiLy8gUmV0dXJuIGEgcmFuZG9tIGludGVnZXIgYmV0d2VlbiBgbWluYCBhbmQgYG1heGAgKGluY2x1c2l2ZSkuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByYW5kb20obWluLCBtYXgpIHtcbiAgaWYgKG1heCA9PSBudWxsKSB7XG4gICAgbWF4ID0gbWluO1xuICAgIG1pbiA9IDA7XG4gIH1cbiAgcmV0dXJuIG1pbiArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSk7XG59XG4iLCIvLyBHZW5lcmF0ZSBhbiBpbnRlZ2VyIEFycmF5IGNvbnRhaW5pbmcgYW4gYXJpdGhtZXRpYyBwcm9ncmVzc2lvbi4gQSBwb3J0IG9mXG4vLyB0aGUgbmF0aXZlIFB5dGhvbiBgcmFuZ2UoKWAgZnVuY3Rpb24uIFNlZVxuLy8gW3RoZSBQeXRob24gZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS9mdW5jdGlvbnMuaHRtbCNyYW5nZSkuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByYW5nZShzdGFydCwgc3RvcCwgc3RlcCkge1xuICBpZiAoc3RvcCA9PSBudWxsKSB7XG4gICAgc3RvcCA9IHN0YXJ0IHx8IDA7XG4gICAgc3RhcnQgPSAwO1xuICB9XG4gIGlmICghc3RlcCkge1xuICAgIHN0ZXAgPSBzdG9wIDwgc3RhcnQgPyAtMSA6IDE7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gTWF0aC5tYXgoTWF0aC5jZWlsKChzdG9wIC0gc3RhcnQpIC8gc3RlcCksIDApO1xuICB2YXIgcmFuZ2UgPSBBcnJheShsZW5ndGgpO1xuXG4gIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGxlbmd0aDsgaWR4KyssIHN0YXJ0ICs9IHN0ZXApIHtcbiAgICByYW5nZVtpZHhdID0gc3RhcnQ7XG4gIH1cblxuICByZXR1cm4gcmFuZ2U7XG59XG4iLCJpbXBvcnQgY3JlYXRlUmVkdWNlIGZyb20gJy4vX2NyZWF0ZVJlZHVjZS5qcyc7XG5cbi8vICoqUmVkdWNlKiogYnVpbGRzIHVwIGEgc2luZ2xlIHJlc3VsdCBmcm9tIGEgbGlzdCBvZiB2YWx1ZXMsIGFrYSBgaW5qZWN0YCxcbi8vIG9yIGBmb2xkbGAuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVSZWR1Y2UoMSk7XG4iLCJpbXBvcnQgY3JlYXRlUmVkdWNlIGZyb20gJy4vX2NyZWF0ZVJlZHVjZS5qcyc7XG5cbi8vIFRoZSByaWdodC1hc3NvY2lhdGl2ZSB2ZXJzaW9uIG9mIHJlZHVjZSwgYWxzbyBrbm93biBhcyBgZm9sZHJgLlxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUmVkdWNlKC0xKTtcbiIsImltcG9ydCBmaWx0ZXIgZnJvbSAnLi9maWx0ZXIuanMnO1xuaW1wb3J0IG5lZ2F0ZSBmcm9tICcuL25lZ2F0ZS5qcyc7XG5pbXBvcnQgY2IgZnJvbSAnLi9fY2IuanMnO1xuXG4vLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBmb3Igd2hpY2ggYSB0cnV0aCB0ZXN0IGZhaWxzLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVqZWN0KG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gIHJldHVybiBmaWx0ZXIob2JqLCBuZWdhdGUoY2IocHJlZGljYXRlKSksIGNvbnRleHQpO1xufVxuIiwiaW1wb3J0IHsgc2xpY2UgfSBmcm9tICcuL19zZXR1cC5qcyc7XG5cbi8vIFJldHVybnMgZXZlcnl0aGluZyBidXQgdGhlIGZpcnN0IGVudHJ5IG9mIHRoZSBgYXJyYXlgLiBFc3BlY2lhbGx5IHVzZWZ1bCBvblxuLy8gdGhlIGBhcmd1bWVudHNgIG9iamVjdC4gUGFzc2luZyBhbiAqKm4qKiB3aWxsIHJldHVybiB0aGUgcmVzdCBOIHZhbHVlcyBpbiB0aGVcbi8vIGBhcnJheWAuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXN0KGFycmF5LCBuLCBndWFyZCkge1xuICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgbiA9PSBudWxsIHx8IGd1YXJkID8gMSA6IG4pO1xufVxuIiwiLy8gU29tZSBmdW5jdGlvbnMgdGFrZSBhIHZhcmlhYmxlIG51bWJlciBvZiBhcmd1bWVudHMsIG9yIGEgZmV3IGV4cGVjdGVkXG4vLyBhcmd1bWVudHMgYXQgdGhlIGJlZ2lubmluZyBhbmQgdGhlbiBhIHZhcmlhYmxlIG51bWJlciBvZiB2YWx1ZXMgdG8gb3BlcmF0ZVxuLy8gb24uIFRoaXMgaGVscGVyIGFjY3VtdWxhdGVzIGFsbCByZW1haW5pbmcgYXJndW1lbnRzIHBhc3QgdGhlIGZ1bmN0aW9u4oCZc1xuLy8gYXJndW1lbnQgbGVuZ3RoIChvciBhbiBleHBsaWNpdCBgc3RhcnRJbmRleGApLCBpbnRvIGFuIGFycmF5IHRoYXQgYmVjb21lc1xuLy8gdGhlIGxhc3QgYXJndW1lbnQuIFNpbWlsYXIgdG8gRVM24oCZcyBcInJlc3QgcGFyYW1ldGVyXCIuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXN0QXJndW1lbnRzKGZ1bmMsIHN0YXJ0SW5kZXgpIHtcbiAgc3RhcnRJbmRleCA9IHN0YXJ0SW5kZXggPT0gbnVsbCA/IGZ1bmMubGVuZ3RoIC0gMSA6ICtzdGFydEluZGV4O1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlbmd0aCA9IE1hdGgubWF4KGFyZ3VtZW50cy5sZW5ndGggLSBzdGFydEluZGV4LCAwKSxcbiAgICAgICAgcmVzdCA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgIGluZGV4ID0gMDtcbiAgICBmb3IgKDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHJlc3RbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4ICsgc3RhcnRJbmRleF07XG4gICAgfVxuICAgIHN3aXRjaCAoc3RhcnRJbmRleCkge1xuICAgICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXMsIHJlc3QpO1xuICAgICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXMsIGFyZ3VtZW50c1swXSwgcmVzdCk7XG4gICAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpcywgYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0sIHJlc3QpO1xuICAgIH1cbiAgICB2YXIgYXJncyA9IEFycmF5KHN0YXJ0SW5kZXggKyAxKTtcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBzdGFydEluZGV4OyBpbmRleCsrKSB7XG4gICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgfVxuICAgIGFyZ3Nbc3RhcnRJbmRleF0gPSByZXN0O1xuICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9O1xufVxuIiwiaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCB0b1BhdGggZnJvbSAnLi9fdG9QYXRoLmpzJztcblxuLy8gVHJhdmVyc2VzIHRoZSBjaGlsZHJlbiBvZiBgb2JqYCBhbG9uZyBgcGF0aGAuIElmIGEgY2hpbGQgaXMgYSBmdW5jdGlvbiwgaXRcbi8vIGlzIGludm9rZWQgd2l0aCBpdHMgcGFyZW50IGFzIGNvbnRleHQuIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBmaW5hbFxuLy8gY2hpbGQsIG9yIGBmYWxsYmFja2AgaWYgYW55IGNoaWxkIGlzIHVuZGVmaW5lZC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc3VsdChvYmosIHBhdGgsIGZhbGxiYWNrKSB7XG4gIHBhdGggPSB0b1BhdGgocGF0aCk7XG4gIHZhciBsZW5ndGggPSBwYXRoLmxlbmd0aDtcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihmYWxsYmFjaykgPyBmYWxsYmFjay5jYWxsKG9iaikgOiBmYWxsYmFjaztcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHByb3AgPSBvYmogPT0gbnVsbCA/IHZvaWQgMCA6IG9ialtwYXRoW2ldXTtcbiAgICBpZiAocHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9wID0gZmFsbGJhY2s7XG4gICAgICBpID0gbGVuZ3RoOyAvLyBFbnN1cmUgd2UgZG9uJ3QgY29udGludWUgaXRlcmF0aW5nLlxuICAgIH1cbiAgICBvYmogPSBpc0Z1bmN0aW9uKHByb3ApID8gcHJvcC5jYWxsKG9iaikgOiBwcm9wO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG4iLCJpbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9faXNBcnJheUxpa2UuanMnO1xuaW1wb3J0IHZhbHVlcyBmcm9tICcuL3ZhbHVlcy5qcyc7XG5pbXBvcnQgZ2V0TGVuZ3RoIGZyb20gJy4vX2dldExlbmd0aC5qcyc7XG5pbXBvcnQgcmFuZG9tIGZyb20gJy4vcmFuZG9tLmpzJztcbmltcG9ydCB0b0FycmF5IGZyb20gJy4vdG9BcnJheS5qcyc7XG5cbi8vIFNhbXBsZSAqKm4qKiByYW5kb20gdmFsdWVzIGZyb20gYSBjb2xsZWN0aW9uIHVzaW5nIHRoZSBtb2Rlcm4gdmVyc2lvbiBvZiB0aGVcbi8vIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVy4oCTWWF0ZXNfc2h1ZmZsZSkuXG4vLyBJZiAqKm4qKiBpcyBub3Qgc3BlY2lmaWVkLCByZXR1cm5zIGEgc2luZ2xlIHJhbmRvbSBlbGVtZW50LlxuLy8gVGhlIGludGVybmFsIGBndWFyZGAgYXJndW1lbnQgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgXy5tYXBgLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2FtcGxlKG9iaiwgbiwgZ3VhcmQpIHtcbiAgaWYgKG4gPT0gbnVsbCB8fCBndWFyZCkge1xuICAgIGlmICghaXNBcnJheUxpa2Uob2JqKSkgb2JqID0gdmFsdWVzKG9iaik7XG4gICAgcmV0dXJuIG9ialtyYW5kb20ob2JqLmxlbmd0aCAtIDEpXTtcbiAgfVxuICB2YXIgc2FtcGxlID0gdG9BcnJheShvYmopO1xuICB2YXIgbGVuZ3RoID0gZ2V0TGVuZ3RoKHNhbXBsZSk7XG4gIG4gPSBNYXRoLm1heChNYXRoLm1pbihuLCBsZW5ndGgpLCAwKTtcbiAgdmFyIGxhc3QgPSBsZW5ndGggLSAxO1xuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbjsgaW5kZXgrKykge1xuICAgIHZhciByYW5kID0gcmFuZG9tKGluZGV4LCBsYXN0KTtcbiAgICB2YXIgdGVtcCA9IHNhbXBsZVtpbmRleF07XG4gICAgc2FtcGxlW2luZGV4XSA9IHNhbXBsZVtyYW5kXTtcbiAgICBzYW1wbGVbcmFuZF0gPSB0ZW1wO1xuICB9XG4gIHJldHVybiBzYW1wbGUuc2xpY2UoMCwgbik7XG59XG4iLCJpbXBvcnQgc2FtcGxlIGZyb20gJy4vc2FtcGxlLmpzJztcblxuLy8gU2h1ZmZsZSBhIGNvbGxlY3Rpb24uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaHVmZmxlKG9iaikge1xuICByZXR1cm4gc2FtcGxlKG9iaiwgSW5maW5pdHkpO1xufVxuIiwiaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vX2lzQXJyYXlMaWtlLmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5cbi8vIFJldHVybiB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIGEgY29sbGVjdGlvbi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNpemUob2JqKSB7XG4gIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIDA7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmopID8gb2JqLmxlbmd0aCA6IGtleXMob2JqKS5sZW5ndGg7XG59XG4iLCJpbXBvcnQgY2IgZnJvbSAnLi9fY2IuanMnO1xuaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vX2lzQXJyYXlMaWtlLmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5cbi8vIERldGVybWluZSBpZiBhdCBsZWFzdCBvbmUgZWxlbWVudCBpbiB0aGUgb2JqZWN0IHBhc3NlcyBhIHRydXRoIHRlc3QuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzb21lKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gIHZhciBfa2V5cyA9ICFpc0FycmF5TGlrZShvYmopICYmIGtleXMob2JqKSxcbiAgICAgIGxlbmd0aCA9IChfa2V5cyB8fCBvYmopLmxlbmd0aDtcbiAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgIHZhciBjdXJyZW50S2V5ID0gX2tleXMgPyBfa2V5c1tpbmRleF0gOiBpbmRleDtcbiAgICBpZiAocHJlZGljYXRlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKSkgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuIiwiaW1wb3J0IGNiIGZyb20gJy4vX2NiLmpzJztcbmltcG9ydCBwbHVjayBmcm9tICcuL3BsdWNrLmpzJztcbmltcG9ydCBtYXAgZnJvbSAnLi9tYXAuanMnO1xuXG4vLyBTb3J0IHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24gcHJvZHVjZWQgYnkgYW4gaXRlcmF0ZWUuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzb3J0Qnkob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICB2YXIgaW5kZXggPSAwO1xuICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgcmV0dXJuIHBsdWNrKG1hcChvYmosIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGxpc3QpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgaW5kZXg6IGluZGV4KyssXG4gICAgICBjcml0ZXJpYTogaXRlcmF0ZWUodmFsdWUsIGtleSwgbGlzdClcbiAgICB9O1xuICB9KS5zb3J0KGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gICAgdmFyIGEgPSBsZWZ0LmNyaXRlcmlhO1xuICAgIHZhciBiID0gcmlnaHQuY3JpdGVyaWE7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIGlmIChhID4gYiB8fCBhID09PSB2b2lkIDApIHJldHVybiAxO1xuICAgICAgaWYgKGEgPCBiIHx8IGIgPT09IHZvaWQgMCkgcmV0dXJuIC0xO1xuICAgIH1cbiAgICByZXR1cm4gbGVmdC5pbmRleCAtIHJpZ2h0LmluZGV4O1xuICB9KSwgJ3ZhbHVlJyk7XG59XG4iLCJpbXBvcnQgY2IgZnJvbSAnLi9fY2IuanMnO1xuaW1wb3J0IGdldExlbmd0aCBmcm9tICcuL19nZXRMZW5ndGguanMnO1xuXG4vLyBVc2UgYSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgdGhlIHNtYWxsZXN0IGluZGV4IGF0IHdoaWNoXG4vLyBhbiBvYmplY3Qgc2hvdWxkIGJlIGluc2VydGVkIHNvIGFzIHRvIG1haW50YWluIG9yZGVyLiBVc2VzIGJpbmFyeSBzZWFyY2guXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzb3J0ZWRJbmRleChhcnJheSwgb2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0LCAxKTtcbiAgdmFyIHZhbHVlID0gaXRlcmF0ZWUob2JqKTtcbiAgdmFyIGxvdyA9IDAsIGhpZ2ggPSBnZXRMZW5ndGgoYXJyYXkpO1xuICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgIHZhciBtaWQgPSBNYXRoLmZsb29yKChsb3cgKyBoaWdoKSAvIDIpO1xuICAgIGlmIChpdGVyYXRlZShhcnJheVttaWRdKSA8IHZhbHVlKSBsb3cgPSBtaWQgKyAxOyBlbHNlIGhpZ2ggPSBtaWQ7XG4gIH1cbiAgcmV0dXJuIGxvdztcbn1cbiIsIi8vIEludm9rZXMgYGludGVyY2VwdG9yYCB3aXRoIHRoZSBgb2JqYCBhbmQgdGhlbiByZXR1cm5zIGBvYmpgLlxuLy8gVGhlIHByaW1hcnkgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4sIGluXG4vLyBvcmRlciB0byBwZXJmb3JtIG9wZXJhdGlvbnMgb24gaW50ZXJtZWRpYXRlIHJlc3VsdHMgd2l0aGluIHRoZSBjaGFpbi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRhcChvYmosIGludGVyY2VwdG9yKSB7XG4gIGludGVyY2VwdG9yKG9iaik7XG4gIHJldHVybiBvYmo7XG59XG4iLCJpbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi9kZWZhdWx0cy5qcyc7XG5pbXBvcnQgXyBmcm9tICcuL3VuZGVyc2NvcmUuanMnO1xuaW1wb3J0ICcuL3RlbXBsYXRlU2V0dGluZ3MuanMnO1xuXG4vLyBXaGVuIGN1c3RvbWl6aW5nIGBfLnRlbXBsYXRlU2V0dGluZ3NgLCBpZiB5b3UgZG9uJ3Qgd2FudCB0byBkZWZpbmUgYW5cbi8vIGludGVycG9sYXRpb24sIGV2YWx1YXRpb24gb3IgZXNjYXBpbmcgcmVnZXgsIHdlIG5lZWQgb25lIHRoYXQgaXNcbi8vIGd1YXJhbnRlZWQgbm90IHRvIG1hdGNoLlxudmFyIG5vTWF0Y2ggPSAvKC4pXi87XG5cbi8vIENlcnRhaW4gY2hhcmFjdGVycyBuZWVkIHRvIGJlIGVzY2FwZWQgc28gdGhhdCB0aGV5IGNhbiBiZSBwdXQgaW50byBhXG4vLyBzdHJpbmcgbGl0ZXJhbC5cbnZhciBlc2NhcGVzID0ge1xuICBcIidcIjogXCInXCIsXG4gICdcXFxcJzogJ1xcXFwnLFxuICAnXFxyJzogJ3InLFxuICAnXFxuJzogJ24nLFxuICAnXFx1MjAyOCc6ICd1MjAyOCcsXG4gICdcXHUyMDI5JzogJ3UyMDI5J1xufTtcblxudmFyIGVzY2FwZVJlZ0V4cCA9IC9cXFxcfCd8XFxyfFxcbnxcXHUyMDI4fFxcdTIwMjkvZztcblxuZnVuY3Rpb24gZXNjYXBlQ2hhcihtYXRjaCkge1xuICByZXR1cm4gJ1xcXFwnICsgZXNjYXBlc1ttYXRjaF07XG59XG5cbi8vIEluIG9yZGVyIHRvIHByZXZlbnQgdGhpcmQtcGFydHkgY29kZSBpbmplY3Rpb24gdGhyb3VnaFxuLy8gYF8udGVtcGxhdGVTZXR0aW5ncy52YXJpYWJsZWAsIHdlIHRlc3QgaXQgYWdhaW5zdCB0aGUgZm9sbG93aW5nIHJlZ3VsYXJcbi8vIGV4cHJlc3Npb24uIEl0IGlzIGludGVudGlvbmFsbHkgYSBiaXQgbW9yZSBsaWJlcmFsIHRoYW4ganVzdCBtYXRjaGluZyB2YWxpZFxuLy8gaWRlbnRpZmllcnMsIGJ1dCBzdGlsbCBwcmV2ZW50cyBwb3NzaWJsZSBsb29waG9sZXMgdGhyb3VnaCBkZWZhdWx0cyBvclxuLy8gZGVzdHJ1Y3R1cmluZyBhc3NpZ25tZW50LlxudmFyIGJhcmVJZGVudGlmaWVyID0gL15cXHMqKFxcd3xcXCQpK1xccyokLztcblxuLy8gSmF2YVNjcmlwdCBtaWNyby10ZW1wbGF0aW5nLCBzaW1pbGFyIHRvIEpvaG4gUmVzaWcncyBpbXBsZW1lbnRhdGlvbi5cbi8vIFVuZGVyc2NvcmUgdGVtcGxhdGluZyBoYW5kbGVzIGFyYml0cmFyeSBkZWxpbWl0ZXJzLCBwcmVzZXJ2ZXMgd2hpdGVzcGFjZSxcbi8vIGFuZCBjb3JyZWN0bHkgZXNjYXBlcyBxdW90ZXMgd2l0aGluIGludGVycG9sYXRlZCBjb2RlLlxuLy8gTkI6IGBvbGRTZXR0aW5nc2Agb25seSBleGlzdHMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGVtcGxhdGUodGV4dCwgc2V0dGluZ3MsIG9sZFNldHRpbmdzKSB7XG4gIGlmICghc2V0dGluZ3MgJiYgb2xkU2V0dGluZ3MpIHNldHRpbmdzID0gb2xkU2V0dGluZ3M7XG4gIHNldHRpbmdzID0gZGVmYXVsdHMoe30sIHNldHRpbmdzLCBfLnRlbXBsYXRlU2V0dGluZ3MpO1xuXG4gIC8vIENvbWJpbmUgZGVsaW1pdGVycyBpbnRvIG9uZSByZWd1bGFyIGV4cHJlc3Npb24gdmlhIGFsdGVybmF0aW9uLlxuICB2YXIgbWF0Y2hlciA9IFJlZ0V4cChbXG4gICAgKHNldHRpbmdzLmVzY2FwZSB8fCBub01hdGNoKS5zb3VyY2UsXG4gICAgKHNldHRpbmdzLmludGVycG9sYXRlIHx8IG5vTWF0Y2gpLnNvdXJjZSxcbiAgICAoc2V0dGluZ3MuZXZhbHVhdGUgfHwgbm9NYXRjaCkuc291cmNlXG4gIF0uam9pbignfCcpICsgJ3wkJywgJ2cnKTtcblxuICAvLyBDb21waWxlIHRoZSB0ZW1wbGF0ZSBzb3VyY2UsIGVzY2FwaW5nIHN0cmluZyBsaXRlcmFscyBhcHByb3ByaWF0ZWx5LlxuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgc291cmNlID0gXCJfX3ArPSdcIjtcbiAgdGV4dC5yZXBsYWNlKG1hdGNoZXIsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGUsIGludGVycG9sYXRlLCBldmFsdWF0ZSwgb2Zmc2V0KSB7XG4gICAgc291cmNlICs9IHRleHQuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShlc2NhcGVSZWdFeHAsIGVzY2FwZUNoYXIpO1xuICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuXG4gICAgaWYgKGVzY2FwZSkge1xuICAgICAgc291cmNlICs9IFwiJytcXG4oKF9fdD0oXCIgKyBlc2NhcGUgKyBcIikpPT1udWxsPycnOl8uZXNjYXBlKF9fdCkpK1xcbidcIjtcbiAgICB9IGVsc2UgaWYgKGludGVycG9sYXRlKSB7XG4gICAgICBzb3VyY2UgKz0gXCInK1xcbigoX190PShcIiArIGludGVycG9sYXRlICsgXCIpKT09bnVsbD8nJzpfX3QpK1xcbidcIjtcbiAgICB9IGVsc2UgaWYgKGV2YWx1YXRlKSB7XG4gICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGUgKyBcIlxcbl9fcCs9J1wiO1xuICAgIH1cblxuICAgIC8vIEFkb2JlIFZNcyBuZWVkIHRoZSBtYXRjaCByZXR1cm5lZCB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IG9mZnNldC5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH0pO1xuICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gIHZhciBhcmd1bWVudCA9IHNldHRpbmdzLnZhcmlhYmxlO1xuICBpZiAoYXJndW1lbnQpIHtcbiAgICAvLyBJbnN1cmUgYWdhaW5zdCB0aGlyZC1wYXJ0eSBjb2RlIGluamVjdGlvbi4gKENWRS0yMDIxLTIzMzU4KVxuICAgIGlmICghYmFyZUlkZW50aWZpZXIudGVzdChhcmd1bWVudCkpIHRocm93IG5ldyBFcnJvcihcbiAgICAgICd2YXJpYWJsZSBpcyBub3QgYSBiYXJlIGlkZW50aWZpZXI6ICcgKyBhcmd1bWVudFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgYSB2YXJpYWJsZSBpcyBub3Qgc3BlY2lmaWVkLCBwbGFjZSBkYXRhIHZhbHVlcyBpbiBsb2NhbCBzY29wZS5cbiAgICBzb3VyY2UgPSAnd2l0aChvYmp8fHt9KXtcXG4nICsgc291cmNlICsgJ31cXG4nO1xuICAgIGFyZ3VtZW50ID0gJ29iaic7XG4gIH1cblxuICBzb3VyY2UgPSBcInZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixcIiArXG4gICAgXCJwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9O1xcblwiICtcbiAgICBzb3VyY2UgKyAncmV0dXJuIF9fcDtcXG4nO1xuXG4gIHZhciByZW5kZXI7XG4gIHRyeSB7XG4gICAgcmVuZGVyID0gbmV3IEZ1bmN0aW9uKGFyZ3VtZW50LCAnXycsIHNvdXJjZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB0aHJvdyBlO1xuICB9XG5cbiAgdmFyIHRlbXBsYXRlID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIHJldHVybiByZW5kZXIuY2FsbCh0aGlzLCBkYXRhLCBfKTtcbiAgfTtcblxuICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBzb3VyY2UgYXMgYSBjb252ZW5pZW5jZSBmb3IgcHJlY29tcGlsYXRpb24uXG4gIHRlbXBsYXRlLnNvdXJjZSA9ICdmdW5jdGlvbignICsgYXJndW1lbnQgKyAnKXtcXG4nICsgc291cmNlICsgJ30nO1xuXG4gIHJldHVybiB0ZW1wbGF0ZTtcbn1cbiIsImltcG9ydCBfIGZyb20gJy4vdW5kZXJzY29yZS5qcyc7XG5cbi8vIEJ5IGRlZmF1bHQsIFVuZGVyc2NvcmUgdXNlcyBFUkItc3R5bGUgdGVtcGxhdGUgZGVsaW1pdGVycy4gQ2hhbmdlIHRoZVxuLy8gZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuZXhwb3J0IGRlZmF1bHQgXy50ZW1wbGF0ZVNldHRpbmdzID0ge1xuICBldmFsdWF0ZTogLzwlKFtcXHNcXFNdKz8pJT4vZyxcbiAgaW50ZXJwb2xhdGU6IC88JT0oW1xcc1xcU10rPyklPi9nLFxuICBlc2NhcGU6IC88JS0oW1xcc1xcU10rPyklPi9nXG59O1xuIiwiaW1wb3J0IG5vdyBmcm9tICcuL25vdy5qcyc7XG5cbi8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgd2hlbiBpbnZva2VkLCB3aWxsIG9ubHkgYmUgdHJpZ2dlcmVkIGF0IG1vc3Qgb25jZVxuLy8gZHVyaW5nIGEgZ2l2ZW4gd2luZG93IG9mIHRpbWUuIE5vcm1hbGx5LCB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHdpbGwgcnVuXG4vLyBhcyBtdWNoIGFzIGl0IGNhbiwgd2l0aG91dCBldmVyIGdvaW5nIG1vcmUgdGhhbiBvbmNlIHBlciBgd2FpdGAgZHVyYXRpb247XG4vLyBidXQgaWYgeW91J2QgbGlrZSB0byBkaXNhYmxlIHRoZSBleGVjdXRpb24gb24gdGhlIGxlYWRpbmcgZWRnZSwgcGFzc1xuLy8gYHtsZWFkaW5nOiBmYWxzZX1gLiBUbyBkaXNhYmxlIGV4ZWN1dGlvbiBvbiB0aGUgdHJhaWxpbmcgZWRnZSwgZGl0dG8uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciB0aW1lb3V0LCBjb250ZXh0LCBhcmdzLCByZXN1bHQ7XG4gIHZhciBwcmV2aW91cyA9IDA7XG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuXG4gIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHByZXZpb3VzID0gb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSA/IDAgOiBub3coKTtcbiAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICB9O1xuXG4gIHZhciB0aHJvdHRsZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgX25vdyA9IG5vdygpO1xuICAgIGlmICghcHJldmlvdXMgJiYgb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSkgcHJldmlvdXMgPSBfbm93O1xuICAgIHZhciByZW1haW5pbmcgPSB3YWl0IC0gKF9ub3cgLSBwcmV2aW91cyk7XG4gICAgY29udGV4dCA9IHRoaXM7XG4gICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICBpZiAocmVtYWluaW5nIDw9IDAgfHwgcmVtYWluaW5nID4gd2FpdCkge1xuICAgICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzID0gX25vdztcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICB9IGVsc2UgaWYgKCF0aW1lb3V0ICYmIG9wdGlvbnMudHJhaWxpbmcgIT09IGZhbHNlKSB7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgcmVtYWluaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB0aHJvdHRsZWQuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHByZXZpb3VzID0gMDtcbiAgICB0aW1lb3V0ID0gY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICB9O1xuXG4gIHJldHVybiB0aHJvdHRsZWQ7XG59XG4iLCJpbXBvcnQgb3B0aW1pemVDYiBmcm9tICcuL19vcHRpbWl6ZUNiLmpzJztcblxuLy8gUnVuIGEgZnVuY3Rpb24gKipuKiogdGltZXMuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aW1lcyhuLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICB2YXIgYWNjdW0gPSBBcnJheShNYXRoLm1heCgwLCBuKSk7XG4gIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCwgMSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSBhY2N1bVtpXSA9IGl0ZXJhdGVlKGkpO1xuICByZXR1cm4gYWNjdW07XG59XG4iLCJpbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IHsgc2xpY2UgfSBmcm9tICcuL19zZXR1cC5qcyc7XG5pbXBvcnQgaXNTdHJpbmcgZnJvbSAnLi9pc1N0cmluZy5qcyc7XG5pbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9faXNBcnJheUxpa2UuanMnO1xuaW1wb3J0IG1hcCBmcm9tICcuL21hcC5qcyc7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgdmFsdWVzIGZyb20gJy4vdmFsdWVzLmpzJztcblxuLy8gU2FmZWx5IGNyZWF0ZSBhIHJlYWwsIGxpdmUgYXJyYXkgZnJvbSBhbnl0aGluZyBpdGVyYWJsZS5cbnZhciByZVN0clN5bWJvbCA9IC9bXlxcdWQ4MDAtXFx1ZGZmZl18W1xcdWQ4MDAtXFx1ZGJmZl1bXFx1ZGMwMC1cXHVkZmZmXXxbXFx1ZDgwMC1cXHVkZmZmXS9nO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9BcnJheShvYmopIHtcbiAgaWYgKCFvYmopIHJldHVybiBbXTtcbiAgaWYgKGlzQXJyYXkob2JqKSkgcmV0dXJuIHNsaWNlLmNhbGwob2JqKTtcbiAgaWYgKGlzU3RyaW5nKG9iaikpIHtcbiAgICAvLyBLZWVwIHN1cnJvZ2F0ZSBwYWlyIGNoYXJhY3RlcnMgdG9nZXRoZXIuXG4gICAgcmV0dXJuIG9iai5tYXRjaChyZVN0clN5bWJvbCk7XG4gIH1cbiAgaWYgKGlzQXJyYXlMaWtlKG9iaikpIHJldHVybiBtYXAob2JqLCBpZGVudGl0eSk7XG4gIHJldHVybiB2YWx1ZXMob2JqKTtcbn1cbiIsImltcG9ydCBfIGZyb20gJy4vdW5kZXJzY29yZS5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuXG4vLyBOb3JtYWxpemUgYSAoZGVlcCkgcHJvcGVydHkgYHBhdGhgIHRvIGFycmF5LlxuLy8gTGlrZSBgXy5pdGVyYXRlZWAsIHRoaXMgZnVuY3Rpb24gY2FuIGJlIGN1c3RvbWl6ZWQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b1BhdGgocGF0aCkge1xuICByZXR1cm4gaXNBcnJheShwYXRoKSA/IHBhdGggOiBbcGF0aF07XG59XG5fLnRvUGF0aCA9IHRvUGF0aDtcbiIsImltcG9ydCBfIGZyb20gJy4vdW5kZXJzY29yZS5qcyc7XG5pbXBvcnQgZWFjaCBmcm9tICcuL2VhY2guanMnO1xuaW1wb3J0IHsgQXJyYXlQcm90byB9IGZyb20gJy4vX3NldHVwLmpzJztcbmltcG9ydCBjaGFpblJlc3VsdCBmcm9tICcuL19jaGFpblJlc3VsdC5qcyc7XG5cbi8vIEFkZCBhbGwgbXV0YXRvciBgQXJyYXlgIGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlci5cbmVhY2goWydwb3AnLCAncHVzaCcsICdyZXZlcnNlJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgbWV0aG9kID0gQXJyYXlQcm90b1tuYW1lXTtcbiAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgb2JqID0gdGhpcy5fd3JhcHBlZDtcbiAgICBpZiAob2JqICE9IG51bGwpIHtcbiAgICAgIG1ldGhvZC5hcHBseShvYmosIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoKG5hbWUgPT09ICdzaGlmdCcgfHwgbmFtZSA9PT0gJ3NwbGljZScpICYmIG9iai5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZGVsZXRlIG9ialswXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNoYWluUmVzdWx0KHRoaXMsIG9iaik7XG4gIH07XG59KTtcblxuLy8gQWRkIGFsbCBhY2Nlc3NvciBgQXJyYXlgIGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlci5cbmVhY2goWydjb25jYXQnLCAnam9pbicsICdzbGljZSddLCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdO1xuICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBvYmogPSB0aGlzLl93cmFwcGVkO1xuICAgIGlmIChvYmogIT0gbnVsbCkgb2JqID0gbWV0aG9kLmFwcGx5KG9iaiwgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gY2hhaW5SZXN1bHQodGhpcywgb2JqKTtcbiAgfTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBfO1xuIiwiaW1wb3J0IHsgVkVSU0lPTiB9IGZyb20gJy4vX3NldHVwLmpzJztcblxuLy8gSWYgVW5kZXJzY29yZSBpcyBjYWxsZWQgYXMgYSBmdW5jdGlvbiwgaXQgcmV0dXJucyBhIHdyYXBwZWQgb2JqZWN0IHRoYXQgY2FuXG4vLyBiZSB1c2VkIE9PLXN0eWxlLiBUaGlzIHdyYXBwZXIgaG9sZHMgYWx0ZXJlZCB2ZXJzaW9ucyBvZiBhbGwgZnVuY3Rpb25zIGFkZGVkXG4vLyB0aHJvdWdoIGBfLm1peGluYC4gV3JhcHBlZCBvYmplY3RzIG1heSBiZSBjaGFpbmVkLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gXyhvYmopIHtcbiAgaWYgKG9iaiBpbnN0YW5jZW9mIF8pIHJldHVybiBvYmo7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBfKSkgcmV0dXJuIG5ldyBfKG9iaik7XG4gIHRoaXMuX3dyYXBwZWQgPSBvYmo7XG59XG5cbl8uVkVSU0lPTiA9IFZFUlNJT047XG5cbi8vIEV4dHJhY3RzIHRoZSByZXN1bHQgZnJvbSBhIHdyYXBwZWQgYW5kIGNoYWluZWQgb2JqZWN0LlxuXy5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX3dyYXBwZWQ7XG59O1xuXG4vLyBQcm92aWRlIHVud3JhcHBpbmcgcHJveGllcyBmb3Igc29tZSBtZXRob2RzIHVzZWQgaW4gZW5naW5lIG9wZXJhdGlvbnNcbi8vIHN1Y2ggYXMgYXJpdGhtZXRpYyBhbmQgSlNPTiBzdHJpbmdpZmljYXRpb24uXG5fLnByb3RvdHlwZS52YWx1ZU9mID0gXy5wcm90b3R5cGUudG9KU09OID0gXy5wcm90b3R5cGUudmFsdWU7XG5cbl8ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBTdHJpbmcodGhpcy5fd3JhcHBlZCk7XG59O1xuIiwiaW1wb3J0IGNyZWF0ZUVzY2FwZXIgZnJvbSAnLi9fY3JlYXRlRXNjYXBlci5qcyc7XG5pbXBvcnQgdW5lc2NhcGVNYXAgZnJvbSAnLi9fdW5lc2NhcGVNYXAuanMnO1xuXG4vLyBGdW5jdGlvbiBmb3IgdW5lc2NhcGluZyBzdHJpbmdzIGZyb20gSFRNTCBpbnRlcnBvbGF0aW9uLlxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRXNjYXBlcih1bmVzY2FwZU1hcCk7XG4iLCJpbXBvcnQgcmVzdEFyZ3VtZW50cyBmcm9tICcuL3Jlc3RBcmd1bWVudHMuanMnO1xuaW1wb3J0IHVuaXEgZnJvbSAnLi91bmlxLmpzJztcbmltcG9ydCBmbGF0dGVuIGZyb20gJy4vX2ZsYXR0ZW4uanMnO1xuXG4vLyBQcm9kdWNlIGFuIGFycmF5IHRoYXQgY29udGFpbnMgdGhlIHVuaW9uOiBlYWNoIGRpc3RpbmN0IGVsZW1lbnQgZnJvbSBhbGwgb2Zcbi8vIHRoZSBwYXNzZWQtaW4gYXJyYXlzLlxuZXhwb3J0IGRlZmF1bHQgcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihhcnJheXMpIHtcbiAgcmV0dXJuIHVuaXEoZmxhdHRlbihhcnJheXMsIHRydWUsIHRydWUpKTtcbn0pO1xuIiwiaW1wb3J0IGlzQm9vbGVhbiBmcm9tICcuL2lzQm9vbGVhbi5qcyc7XG5pbXBvcnQgY2IgZnJvbSAnLi9fY2IuanMnO1xuaW1wb3J0IGdldExlbmd0aCBmcm9tICcuL19nZXRMZW5ndGguanMnO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gJy4vY29udGFpbnMuanMnO1xuXG4vLyBQcm9kdWNlIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiB0aGUgYXJyYXkuIElmIHRoZSBhcnJheSBoYXMgYWxyZWFkeVxuLy8gYmVlbiBzb3J0ZWQsIHlvdSBoYXZlIHRoZSBvcHRpb24gb2YgdXNpbmcgYSBmYXN0ZXIgYWxnb3JpdGhtLlxuLy8gVGhlIGZhc3RlciBhbGdvcml0aG0gd2lsbCBub3Qgd29yayB3aXRoIGFuIGl0ZXJhdGVlIGlmIHRoZSBpdGVyYXRlZVxuLy8gaXMgbm90IGEgb25lLXRvLW9uZSBmdW5jdGlvbiwgc28gcHJvdmlkaW5nIGFuIGl0ZXJhdGVlIHdpbGwgZGlzYWJsZVxuLy8gdGhlIGZhc3RlciBhbGdvcml0aG0uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1bmlxKGFycmF5LCBpc1NvcnRlZCwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgaWYgKCFpc0Jvb2xlYW4oaXNTb3J0ZWQpKSB7XG4gICAgY29udGV4dCA9IGl0ZXJhdGVlO1xuICAgIGl0ZXJhdGVlID0gaXNTb3J0ZWQ7XG4gICAgaXNTb3J0ZWQgPSBmYWxzZTtcbiAgfVxuICBpZiAoaXRlcmF0ZWUgIT0gbnVsbCkgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIHNlZW4gPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGdldExlbmd0aChhcnJheSk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2ldLFxuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUsIGksIGFycmF5KSA6IHZhbHVlO1xuICAgIGlmIChpc1NvcnRlZCAmJiAhaXRlcmF0ZWUpIHtcbiAgICAgIGlmICghaSB8fCBzZWVuICE9PSBjb21wdXRlZCkgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgc2VlbiA9IGNvbXB1dGVkO1xuICAgIH0gZWxzZSBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgIGlmICghY29udGFpbnMoc2VlbiwgY29tcHV0ZWQpKSB7XG4gICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFjb250YWlucyhyZXN1bHQsIHZhbHVlKSkge1xuICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiLy8gR2VuZXJhdGUgYSB1bmlxdWUgaW50ZWdlciBpZCAodW5pcXVlIHdpdGhpbiB0aGUgZW50aXJlIGNsaWVudCBzZXNzaW9uKS5cbi8vIFVzZWZ1bCBmb3IgdGVtcG9yYXJ5IERPTSBpZHMuXG52YXIgaWRDb3VudGVyID0gMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVuaXF1ZUlkKHByZWZpeCkge1xuICB2YXIgaWQgPSArK2lkQ291bnRlciArICcnO1xuICByZXR1cm4gcHJlZml4ID8gcHJlZml4ICsgaWQgOiBpZDtcbn1cbiIsImltcG9ydCBtYXggZnJvbSAnLi9tYXguanMnO1xuaW1wb3J0IGdldExlbmd0aCBmcm9tICcuL19nZXRMZW5ndGguanMnO1xuaW1wb3J0IHBsdWNrIGZyb20gJy4vcGx1Y2suanMnO1xuXG4vLyBDb21wbGVtZW50IG9mIHppcC4gVW56aXAgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgYW5kIGdyb3Vwc1xuLy8gZWFjaCBhcnJheSdzIGVsZW1lbnRzIG9uIHNoYXJlZCBpbmRpY2VzLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW56aXAoYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IChhcnJheSAmJiBtYXgoYXJyYXksIGdldExlbmd0aCkubGVuZ3RoKSB8fCAwO1xuICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IHBsdWNrKGFycmF5LCBpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5cbi8vIFJldHJpZXZlIHRoZSB2YWx1ZXMgb2YgYW4gb2JqZWN0J3MgcHJvcGVydGllcy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZhbHVlcyhvYmopIHtcbiAgdmFyIF9rZXlzID0ga2V5cyhvYmopO1xuICB2YXIgbGVuZ3RoID0gX2tleXMubGVuZ3RoO1xuICB2YXIgdmFsdWVzID0gQXJyYXkobGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHZhbHVlc1tpXSA9IG9ialtfa2V5c1tpXV07XG4gIH1cbiAgcmV0dXJuIHZhbHVlcztcbn1cbiIsImltcG9ydCBmaWx0ZXIgZnJvbSAnLi9maWx0ZXIuanMnO1xuaW1wb3J0IG1hdGNoZXIgZnJvbSAnLi9tYXRjaGVyLmpzJztcblxuLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgXy5maWx0ZXJgOiBzZWxlY3Rpbmcgb25seVxuLy8gb2JqZWN0cyBjb250YWluaW5nIHNwZWNpZmljIGBrZXk6dmFsdWVgIHBhaXJzLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd2hlcmUob2JqLCBhdHRycykge1xuICByZXR1cm4gZmlsdGVyKG9iaiwgbWF0Y2hlcihhdHRycykpO1xufVxuIiwiaW1wb3J0IHJlc3RBcmd1bWVudHMgZnJvbSAnLi9yZXN0QXJndW1lbnRzLmpzJztcbmltcG9ydCBkaWZmZXJlbmNlIGZyb20gJy4vZGlmZmVyZW5jZS5qcyc7XG5cbi8vIFJldHVybiBhIHZlcnNpb24gb2YgdGhlIGFycmF5IHRoYXQgZG9lcyBub3QgY29udGFpbiB0aGUgc3BlY2lmaWVkIHZhbHVlKHMpLlxuZXhwb3J0IGRlZmF1bHQgcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihhcnJheSwgb3RoZXJBcnJheXMpIHtcbiAgcmV0dXJuIGRpZmZlcmVuY2UoYXJyYXksIG90aGVyQXJyYXlzKTtcbn0pO1xuIiwiaW1wb3J0IHBhcnRpYWwgZnJvbSAnLi9wYXJ0aWFsLmpzJztcblxuLy8gUmV0dXJucyB0aGUgZmlyc3QgZnVuY3Rpb24gcGFzc2VkIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSBzZWNvbmQsXG4vLyBhbGxvd2luZyB5b3UgdG8gYWRqdXN0IGFyZ3VtZW50cywgcnVuIGNvZGUgYmVmb3JlIGFuZCBhZnRlciwgYW5kXG4vLyBjb25kaXRpb25hbGx5IGV4ZWN1dGUgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd3JhcChmdW5jLCB3cmFwcGVyKSB7XG4gIHJldHVybiBwYXJ0aWFsKHdyYXBwZXIsIGZ1bmMpO1xufVxuIiwiaW1wb3J0IHJlc3RBcmd1bWVudHMgZnJvbSAnLi9yZXN0QXJndW1lbnRzLmpzJztcbmltcG9ydCB1bnppcCBmcm9tICcuL3VuemlwLmpzJztcblxuLy8gWmlwIHRvZ2V0aGVyIG11bHRpcGxlIGxpc3RzIGludG8gYSBzaW5nbGUgYXJyYXkgLS0gZWxlbWVudHMgdGhhdCBzaGFyZVxuLy8gYW4gaW5kZXggZ28gdG9nZXRoZXIuXG5leHBvcnQgZGVmYXVsdCByZXN0QXJndW1lbnRzKHVuemlwKTtcbiIsIi8vIHVzZSAubWpzIGV4dGVuc2lvbiB0byBmb3JjZSBOb2RlIHRvIHVzZSBFU00gc3l0bmF4OlxyXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTc0OTI2MDYvMzYzMzEwOVxyXG5cclxuaW1wb3J0IGxhenlMb2FkIGZyb20gXCIuL2xhenlsb2FkL2xhenlsb2FkLmpzXCI7XHJcblxyXG5mdW5jdGlvbiBnbG9iYWwoKSB7XHJcblx0bGF6eUxvYWQoKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZ2xvYmFsO1xyXG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgZ2xvYmFsIGZyb20gXCIuL2dsb2JhbC9nbG9iYWwubWpzXCI7XHJcbmltcG9ydCBBdWRpb1BsYXllciBmcm9tIFwiLi9jb21wb25lbnRzL2F1ZGlvLXBsYXllci9hdWRpby1wbGF5ZXIuanNcIjtcclxuaW1wb3J0IGNhcm91c2VsIGZyb20gXCIuL2NvbXBvbmVudHMvY2Fyb3VzZWwvY2Fyb3VzZWwuanNcIjtcclxuaW1wb3J0IGluaXRpYWxpemVBbGVydCBmcm9tIFwiLi9jb21wb25lbnRzL2FsZXJ0L2luZGV4LmpzXCI7XHJcbmltcG9ydCBqdW1wTGlua0Jhbm5lciBmcm9tIFwiLi9jb21wb25lbnRzL2p1bXBsaW5rLWJhbm5lci9qdW1wbGluay1iYW5uZXIuanNcIjtcclxuaW1wb3J0IE11c2V0dGUgZnJvbSBcIi4vY29tcG9uZW50cy9tdXNldHRlL211c2V0dGUuanNcIjtcclxuaW1wb3J0IHZpZGVvU2xpZGUgZnJvbSBcIi4vY29tcG9uZW50cy9jYXJvdXNlbC9zbGlkZS92aWRlby1zbGlkZS5qc1wiO1xyXG5pbXBvcnQgdmltZW9QbGF5VG9nZ2xlIGZyb20gXCIuL2NvbXBvbmVudHMvdmltZW8tcGxheWVyL3ZpbWVvLWNvbnRyb2xzLmpzXCI7XHJcblxyXG5cclxuY29uc3QgbWFyYmxlID0ge1xyXG5cdGdsb2JhbCxcclxuXHRBdWRpb1BsYXllcixcclxuXHRjYXJvdXNlbCxcclxuXHRpbml0aWFsaXplQWxlcnQsXHJcblx0anVtcExpbmtCYW5uZXIsXHJcblx0TXVzZXR0ZSxcclxuXHR2aWRlb1NsaWRlLFxyXG5cdHZpbWVvUGxheVRvZ2dsZSxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IG1hcmJsZTtcclxuXHJcbmV4cG9ydCB7XHJcblx0Z2xvYmFsLFxyXG5cdEF1ZGlvUGxheWVyLFxyXG5cdGNhcm91c2VsLFxyXG5cdGluaXRpYWxpemVBbGVydCxcclxuXHRqdW1wTGlua0Jhbm5lcixcclxuXHRNdXNldHRlLFxyXG5cdHZpZGVvU2xpZGUsXHJcblx0dmltZW9QbGF5VG9nZ2xlLFxyXG59O1xyXG4iXSwibmFtZXMiOlsiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwiaXNOb2RlIiwiZyIsInRvU3RyaW5nIiwiY2FsbCIsImdldE1ldGhvZE5hbWUiLCJwcm9wIiwidHlwZSIsImluZGV4T2YiLCJ0b0xvd2VyQ2FzZSIsImNvbmNhdCIsInN1YnN0ciIsInRvVXBwZXJDYXNlIiwiaXNEb21FbGVtZW50IiwiZWxlbWVudCIsIkJvb2xlYW4iLCJub2RlVHlwZSIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsImlzSW50ZWdlciIsInZhbHVlIiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwiaXNGaW5pdGUiLCJNYXRoIiwiZmxvb3IiLCJpc1ZpbWVvVXJsIiwidXJsIiwidGVzdCIsImdldFZpbWVvVXJsIiwib0VtYmVkUGFyYW1ldGVycyIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsImlkIiwiaWRPclVybCIsIkVycm9yIiwicmVwbGFjZSIsImFycmF5SW5kZXhPZlN1cHBvcnQiLCJBcnJheSIsInByb3RvdHlwZSIsInBvc3RNZXNzYWdlU3VwcG9ydCIsIndpbmRvdyIsInBvc3RNZXNzYWdlIiwiY29tbW9uanNHbG9iYWwiLCJnbG9iYWxUaGlzIiwic2VsZiIsIldlYWtNYXAiLCJoYXNPd25Qcm9wZXJ0eSIsIm9iamVjdCIsIm5hbWUiLCJ0aGlzIiwiZ2VuSWQiLCJjaGVja0luc3RhbmNlIiwieCIsIm1ldGhvZE5hbWUiLCJpc09iamVjdCIsInByZWZpeCIsInJhbmQiLCJyYW5kb20iLCJzdWJzdHJpbmciLCJlbnRyeSIsIl9pZCIsImZuIiwibW9kdWxlIiwibnBvX3NyYyIsImNvbnRleHQiLCJkZWZpbml0aW9uIiwiYnVpbHRJblByb3AiLCJjeWNsZSIsInNjaGVkdWxpbmdfcXVldWUiLCJUb1N0cmluZyIsInRpbWVyIiwic2V0SW1tZWRpYXRlIiwic2V0VGltZW91dCIsIm9iaiIsInZhbCIsImNvbmZpZyIsImVyciIsInNjaGVkdWxlIiwiYWRkIiwiZHJhaW4iLCJpc1RoZW5hYmxlIiwibyIsIl90aGVuIiwib190eXBlIiwidGhlbiIsIm5vdGlmeSIsImNoYWluIiwibm90aWZ5SXNvbGF0ZWQiLCJzdGF0ZSIsInN1Y2Nlc3MiLCJmYWlsdXJlIiwiY2IiLCJyZXQiLCJyZWplY3QiLCJtc2ciLCJwcm9taXNlIiwicmVzb2x2ZSIsInRyaWdnZXJlZCIsImRlZiIsImRlZl93cmFwcGVyIiwiTWFrZURlZldyYXBwZXIiLCJhcHBseSIsIml0ZXJhdGVQcm9taXNlcyIsImFyciIsInJlc29sdmVyIiwicmVqZWN0ZXIiLCJpZHgiLCJNYWtlRGVmIiwiUHJvbWlzZSIsImV4ZWN1dG9yIiwiX19OUE9fXyIsImNvbnN0cnVjdG9yIiwicHVzaCIsImZpcnN0IiwibGFzdCIsIml0ZW0iLCJJdGVtIiwibmV4dCIsImYiLCJQcm9taXNlUHJvdG90eXBlIiwibGVuIiwibXNncyIsImNvdW50IiwiZXhwb3J0cyIsImNhbGxiYWNrTWFwIiwic3RvcmVDYWxsYmFjayIsInBsYXllciIsImNhbGxiYWNrIiwicGxheWVyQ2FsbGJhY2tzIiwiZ2V0Iiwic2V0IiwiZ2V0Q2FsbGJhY2tzIiwicmVtb3ZlQ2FsbGJhY2siLCJpbmRleCIsInNwbGljZSIsInN3YXBDYWxsYmFja3MiLCJvbGRFbGVtZW50IiwibmV3RWxlbWVudCIsImRlbGV0ZSIsImdldE9FbWJlZFBhcmFtZXRlcnMiLCJkZWZhdWx0cyIsInJlZHVjZSIsInBhcmFtcyIsInBhcmFtIiwiZ2V0QXR0cmlidXRlIiwiY3JlYXRlRW1iZWQiLCJfcmVmIiwiaHRtbCIsInF1ZXJ5U2VsZWN0b3IiLCJkaXYiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJhcHBlbmRDaGlsZCIsImZpcnN0Q2hpbGQiLCJzZXRBdHRyaWJ1dGUiLCJnZXRPRW1iZWREYXRhIiwidmlkZW9VcmwiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ4aHIiLCJYRG9tYWluUmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsIm9ubG9hZCIsInN0YXR1cyIsImpzb24iLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJkb21haW5fc3RhdHVzX2NvZGUiLCJlcnJvciIsIm9uZXJyb3IiLCJzZW5kIiwicGFyc2VNZXNzYWdlRGF0YSIsImRhdGEiLCJjb25zb2xlIiwid2FybiIsIm1ldGhvZCIsImNvbnRlbnRXaW5kb3ciLCJtZXNzYWdlIiwiaWVWZXJzaW9uIiwibmF2aWdhdG9yIiwidXNlckFnZW50Iiwic3RyaW5naWZ5Iiwib3JpZ2luIiwicHJvY2Vzc0RhdGEiLCJjYWxsYmFja3MiLCJldmVudCIsImZvckVhY2giLCJzaGlmdCIsInNoaWZ0Q2FsbGJhY2tzIiwiZSIsInBsYXllck1hcCIsInJlYWR5TWFwIiwic2NyZWVuZnVsbCIsIlBsYXllciIsIl90aGlzIiwib3B0aW9ucyIsImpRdWVyeSIsImdldEVsZW1lbnRCeUlkIiwibm9kZU5hbWUiLCJpZnJhbWUiLCJoYXMiLCJfd2luZG93IiwicmVhZHlQcm9taXNlIiwiX29uTWVzc2FnZSIsInNvdXJjZSIsImlzUmVhZHlFdmVudCIsImlzUGluZ1Jlc3BvbnNlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9vcmlnaW5hbEVsZW1lbnQiLCJjYXRjaCIsImlzRW5hYmxlZCIsImV4aXRGdWxsc2NyZWVuIiwiZXhpdCIsImZ1bGxzY3JlZW5jaGFuZ2VIYW5kbGVyIiwiaXNGdWxsc2NyZWVuIiwicmVhZHkiLCJvbiIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl90aGlzMiIsImFyZ3MiLCJfdGhpczMiLCJfdGhpczQiLCJldmVudE5hbWUiLCJjYWxsTWV0aG9kIiwidGltZSIsImxhbmd1YWdlIiwia2luZCIsInJlcXVlc3QiLCJfdGhpczUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib2ZmIiwiYXV0b3BhdXNlIiwiY2FtZXJhIiwiY29sb3IiLCJjdXJyZW50VGltZSIsImxvb3AiLCJtdXRlZCIsInBsYXliYWNrUmF0ZSIsInF1YWxpdHkiLCJ2b2x1bWUiLCJmbk1hcCIsImwiLCJldmVudE5hbWVNYXAiLCJmdWxsc2NyZWVuY2hhbmdlIiwiZnVsbHNjcmVlbmVycm9yIiwib25GdWxsU2NyZWVuRW50ZXJlZCIsInJldHVyblByb21pc2UiLCJkb2N1bWVudEVsZW1lbnQiLCJyZXF1ZXN0RnVsbHNjcmVlbiIsIm9uRnVsbFNjcmVlbkV4aXQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJmdWxsc2NyZWVuRW5hYmxlZCIsImluaXRpYWxpemVTY3JlZW5mdWxsIiwicGFyZW50IiwiZWxlbWVudHMiLCJzbGljZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJoYW5kbGVFcnJvciIsImluaXRpYWxpemVFbWJlZHMiLCJWaW1lb1BsYXllclJlc2l6ZUVtYmVkc18iLCJvbk1lc3NhZ2UiLCJpZnJhbWVzIiwicGFyZW50RWxlbWVudCIsInN0eWxlIiwicGFkZGluZ0JvdHRvbSIsImJvdHRvbSIsInJlc2l6ZUVtYmVkcyIsImNsb3Nlc3QiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJBbmFseXRpY3NMb2dnZXIiLCJ0cmFjZSIsInNlbmRDdXN0b21FdmVudCIsImxvZyIsImRlZmF1bHRPcHRpb25zIiwiZGFya01vZGUiLCJzZWVrSGVscGVyRHVyYXRpb24iLCJ3cmFwcGVyRWwiLCJhdWRpb0VsIiwiY292ZXJJbWFnZVdyYXBwZXJFbCIsImRhcmtNb2RlUXVlcnkiLCJtYXRjaE1lZGlhIiwicHJvZ3Jlc3NCYXJDYW52YXNFbCIsInByb2dyZXNzQmFyQ2FudmFzIiwiZ2V0Q29udGV4dCIsInBsYXlCdXR0b25FbCIsInBsYXlsaXN0VHJhY2tzIiwiY3VycmVudFRpbWVFbCIsInRpbWVSZW1haW5pbmdFbCIsInNlZWtCYWNrSGVscGVyRWwiLCJzZWVrRm9yd2FyZEhlbHBlckVsIiwic2NydWJTdGFydEFyZWFFbCIsInNjcnViYmFibGVBcmVhRWwiLCJzdWJ0aXRsZUVsIiwidGl0bGVFbCIsInRyYW5zY3JpcHRFbCIsInRyYW5zY3JpcHRTZWN0aW9uIiwidHJhbnNjcmlwdFRvZ2dsZSIsInRyYW5zY3JpcHRUb2dnbGVUZXh0IiwidHJhbnNjcmlwdFdyYXBwZXIiLCJxdW90ZUV4cGFuZGVyRGVmYXVsdFRleHQiLCJpc0RhcmtNb2RlIiwiY29udGFpbnMiLCJtYXRjaGVzIiwiYW5hbHl0aWNzU2VuZGVyIiwiaXNTY3J1YmJpbmciLCJjdXJyZW50VHJhY2siLCJkYXRhc2V0IiwidHJhY2siLCJhbW91bnRQbGF5ZWQiLCJiZWZvcmVUcmFja0NoYW5nZSIsIkV2ZW50IiwiYWZ0ZXJUcmFja0NoYW5nZSIsImxpc3RlbmVyIiwiYmluZCIsImFwcGx5TGlzdGVuZXJzIiwic2V0VHJhbnNjcmlwdCIsInBsYXllcklkIiwic2V0TWV0YURhdGEiLCJ0b2dnbGVQbGF5aW5nIiwicGFzc2l2ZSIsImhhbmRsZVRpbWVDaGFuZ2UiLCJoYW5kbGVFbmQiLCJoYW5kbGVQbGF5IiwiaGFuZGxlUGF1c2UiLCJ0cmFja0VsIiwiaGFuZGxlVHJhY2tDaGFuZ2UiLCJxdWlja1NlZWtCYWNrIiwicXVpY2tTZWVrRm9yd2FyZCIsImJlZ2luU2NydWJiaW5nIiwiaGFuZGxlVHJhbnNjcmlwdFRvZ2dsZSIsInF1ZXJ5IiwibmV3VHJhY2tFbCIsImN1cnJlbnRUYXJnZXQiLCJkaXNwYXRjaEV2ZW50IiwibmV3VHJhY2siLCJzZXRUcmFjayIsInBsYXkiLCJzcmMiLCJhdWRpbyIsImVzY2FwZSIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJjb3ZlckltYWdlVGVtcGxhdGUiLCJpbWFnZSIsImxvYWQiLCJoYXNUcmFuc2NyaXB0IiwidHJhbnNjcmlwdCIsImZvcm1hdFRyYW5zY3JpcHQiLCJ0ZXh0IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiX2hhbmRsZVRpbWVDaGFuZ2UiLCJkdXJhdGlvbiIsImVsYXBzZWQiLCJzZXREaXNwbGF5VGltZSIsImRyYXdQcm9ncmVzcyIsImNhbGN1bGF0ZVBsYXlBbmFseXRpY3MiLCJjdXJyZW50VGVudGgiLCJyb3VuZCIsInRyYWNrSWQiLCJ0cmFja1RpdGxlIiwicHJvZ3Jlc3MiLCJwYXVzZSIsInRpbWVGb3JtYXR0ZXIiLCJjYW5VcGRhdGVBdW90bWF0aWNhbGx5Iiwid2lkdGgiLCJzYXZlIiwiY2xlYXJSZWN0IiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJyZXN0b3JlIiwicHJldmVudERlZmF1bHQiLCJpbml0aWFsaXplU2NydWJiaW5nTGlzdGVuZXJzIiwic2NydWIiLCJlbmRTY3J1YmJpbmciLCJvZmZzZXRYIiwiY2FudmFzUmVjdGFuZ2xlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiaW5jbHVkZXMiLCJ0b3VjaGVzIiwiY2xpZW50WCIsImxlZnQiLCJjdXJyZW50U2Vjb25kIiwiY2xlYW5VcFNjcnViTGlzdGVuZXJzIiwiYXJ0d29yayIsInc1NjAiLCJtZWRpYVNlc3Npb24iLCJtZXRhZGF0YSIsIk1lZGlhTWV0YWRhdGEiLCJhcnRpc3QiLCJwYXVzZWQiLCJuZXdQb3NpdGlvbiIsIm1heCIsIm1pbiIsIlN0cmluZyIsInJhdyIsImFsdCIsImhlaWdodCIsIncyNDAwIiwidzE2MDAiLCJ3MTIwMCIsInc4NDAiLCJ3MjgwIiwic2Vjb25kcyIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsIngwIiwieDEiLCJ5MSIsIngyIiwieTIiLCJ4MyIsImZsaWNraXR5RGVmYXVsdHMiLCJhY2Nlc3NpYmlsaXR5IiwiYXV0b1BsYXkiLCJjZWxsQWxpZ24iLCJwcmV2TmV4dEJ1dHRvbnMiLCJwYWdlRG90cyIsImZyaWN0aW9uIiwiY29udGFpbiIsInJlc2l6ZSIsIndyYXBBcm91bmQiLCJpbWFnZXNMb2FkZWQiLCJhcnJvd1NoYXBlIiwic2VsZWN0b3JTdHJpbmciLCJTRVRUSU5HUyIsImZpbmFsT3B0aW9ucyIsImNhcm91c2VscyIsImNhcm91c2VsIiwiZmxpY2tpdHlJbnN0YW5jZSIsIkZsaWNraXR5IiwiY2VsbHMiLCJjZWxsIiwiZmlyc3RWaWRlbyIsInNlbGVjdGVkRWxlbWVudHMiLCJoYW5kbGVyIiwidmlkZW9TbGlkZSIsInZpZGVvc0luQ2Fyb3VzZWxTbGlkZXMiLCJtYXAiLCJ2aWRlb0VsZW1lbnQiLCJvbnBsYXkiLCJ2aWRlb1RvUGxheSIsIkN1c3RvbUV2ZW50IiwiYnViYmxlcyIsInZpZGVvIiwic21vb3Roc2Nyb2xsIiwibGluayIsInNjcm9sbEludG9WaWV3IiwiYmVoYXZpb3IiLCJNdXNldHRlIiwibXVzZXR0ZUVsIiwibXVzZXR0ZVdyYXBwZXIiLCJjcmVhdGVXcmFwcGVyIiwibW91c2VJc0JlaW5nRHJhZ2dlZCIsInBvcyIsInRvcCIsInkiLCJvYnNlcnZlciIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiaGFuZGxlSW50ZXJzZWN0aW9ucyIsInJvb3QiLCJyb290TWFyZ2luIiwidGhyZXNob2xkIiwiZnJvbSIsImNoaWxkcmVuIiwiY2hpbGQiLCJvYnNlcnZlIiwibW91c2VEb3duSGFuZGxlciIsIm1vdXNlTW92ZUhhbmRsZXIiLCJtb3VzZVVwSGFuZGxlciIsImVudHJpZXMiLCJpc0ludGVyc2VjdGluZyIsInNob3dGb2N1c2FibGVzIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJsYXN0RWxlbWVudENoaWxkIiwiaGlkZUZvY3VzYWJsZXMiLCJzY3JvbGxMZWZ0IiwieE1vdmVtZW50IiwiYWRkT3JSZW1vdmUiLCJtdXNldHRlTGluayIsInByZXZlbnRDbGljayIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIndyYXBwZXIiLCJsZWZ0QnV0dG9uIiwiYXJpYUxhYmVsIiwiaGFuZGxlQnV0dG9uU2Nyb2xsTGVmdCIsInJpZ2h0QnV0dG9uIiwiaGFuZGxlQnV0dG9uU2Nyb2xsUmlnaHQiLCJpbnNlcnRCZWZvcmUiLCJzY3JvbGxUbyIsIm9mZnNldFdpZHRoIiwiYXJpYUhpZGRlbiIsImZvY3VzYWJsZUVsIiwiaW5pdGlhbGl6ZSIsImxlc011c2V0dGVzIiwibGFNdXNldHRlRWwiLCJjb250YWluZXIiLCJWaW1lb1BsYXllciIsInBsYXlCdXR0b24iLCJzdG9wUHJvcGFnYXRpb24iLCJnZXRQYXVzZWQiLCJidXR0b24iLCJwbGF5VmlkZW8iLCJwYXVzZVZpZGVvIiwiaW1hZ2VMb2FkZWRFdmVudCIsImltYWdlRXJyb3JFdmVudCIsImNhbGxMb2FkQWxsIiwibWFyYmxlTGF6eUxvYWRPYmoiLCJsb2FkQWxsIiwidXBkYXRlIiwiTGF6eUxvYWQiLCJlbGVtZW50c19zZWxlY3RvciIsImNhbGxiYWNrX2xvYWRlZCIsImVsIiwiY2FsbGJhY2tfZXJyb3IiLCJvbmNlIiwiY2FwdHVyZSIsImRlZXBGcmVlemUiLCJwcm9wTmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZnJlZXplIiwiaW5pdGlhbGl6ZWRDbGFzc05hbWUiLCJGT0NVU0FCTEVTX1NFTEVDVE9SIiwiaXNDYWxsYWJsZSIsInRyeVRvU3RyaW5nIiwiJFR5cGVFcnJvciIsImFyZ3VtZW50Iiwid2VsbEtub3duU3ltYm9sIiwiY3JlYXRlIiwiVU5TQ09QQUJMRVMiLCJBcnJheVByb3RvdHlwZSIsIiRTdHJpbmciLCJ0b0luZGV4ZWRPYmplY3QiLCJ0b0Fic29sdXRlSW5kZXgiLCJsZW5ndGhPZkFycmF5TGlrZSIsImNyZWF0ZU1ldGhvZCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJmcm9tSW5kZXgiLCJPIiwidW5jdXJyeVRoaXMiLCJzdHJpbmdTbGljZSIsIml0IiwiaGFzT3duIiwib3duS2V5cyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSIsImRlZmluZVByb3BlcnR5TW9kdWxlIiwiZXhjZXB0aW9ucyIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJERVNDUklQVE9SUyIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsImJpdG1hcCIsImNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSIsIm1ha2VCdWlsdEluIiwiZGVmaW5lR2xvYmFsUHJvcGVydHkiLCJzaW1wbGUiLCJnbG9iYWwiLCJ1bnNhZmUiLCJmYWlscyIsIkVYSVNUUyIsImdldEJ1aWx0SW4iLCJtYXRjaCIsInZlcnNpb24iLCJwcm9jZXNzIiwiRGVubyIsInZlcnNpb25zIiwidjgiLCJzcGxpdCIsImRlZmluZUJ1aWx0SW4iLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwiaXNGb3JjZWQiLCJ0YXJnZXRQcm9wZXJ0eSIsInNvdXJjZVByb3BlcnR5IiwiVEFSR0VUIiwiR0xPQkFMIiwiU1RBVElDIiwic3RhdCIsImRvbnRDYWxsR2V0U2V0IiwiZm9yY2VkIiwic2hhbSIsImV4ZWMiLCJOQVRJVkVfQklORCIsIkZ1bmN0aW9uIiwiRnVuY3Rpb25Qcm90b3R5cGUiLCJnZXREZXNjcmlwdG9yIiwiUFJPUEVSIiwiQ09ORklHVVJBQkxFIiwiYUZ1bmN0aW9uIiwibmFtZXNwYWNlIiwiYUNhbGxhYmxlIiwiViIsIlAiLCJmdW5jIiwiY2hlY2siLCJ0b09iamVjdCIsImEiLCJjbGFzc29mIiwiJE9iamVjdCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic3RvcmUiLCJmdW5jdGlvblRvU3RyaW5nIiwiaW5zcGVjdFNvdXJjZSIsIk5BVElWRV9XRUFLX01BUCIsInNoYXJlZCIsInNoYXJlZEtleSIsImhpZGRlbktleXMiLCJPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCIsIndtZ2V0Iiwid21oYXMiLCJ3bXNldCIsImZhY2FkZSIsIlNUQVRFIiwiZW5mb3JjZSIsImdldHRlckZvciIsIlRZUEUiLCJyZXBsYWNlbWVudCIsImZlYXR1cmUiLCJkZXRlY3Rpb24iLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInN0cmluZyIsImlzUHJvdG90eXBlT2YiLCJVU0VfU1lNQk9MX0FTX1VJRCIsIiRTeW1ib2wiLCJ0b0xlbmd0aCIsIkNPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FIiwiSW50ZXJuYWxTdGF0ZU1vZHVsZSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsIkNPTkZJR1VSQUJMRV9MRU5HVEgiLCJURU1QTEFURSIsImdldHRlciIsInNldHRlciIsImFyaXR5Iiwiam9pbiIsImNlaWwiLCJ0cnVuYyIsIm4iLCJWOF9WRVJTSU9OIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9sIiwiU3ltYm9sIiwiYWN0aXZlWERvY3VtZW50IiwiYW5PYmplY3QiLCJkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlIiwiZW51bUJ1Z0tleXMiLCJkb2N1bWVudENyZWF0ZUVsZW1lbnQiLCJJRV9QUk9UTyIsIkVtcHR5Q29uc3RydWN0b3IiLCJzY3JpcHRUYWciLCJjb250ZW50IiwiTFQiLCJOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYIiwid3JpdGUiLCJjbG9zZSIsInRlbXAiLCJwYXJlbnRXaW5kb3ciLCJOdWxsUHJvdG9PYmplY3QiLCJBY3RpdmVYT2JqZWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJkb21haW4iLCJkaXNwbGF5IiwiRiIsIlByb3BlcnRpZXMiLCJyZXN1bHQiLCJWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyIsIm9iamVjdEtleXMiLCJJRThfRE9NX0RFRklORSIsInRvUHJvcGVydHlLZXkiLCIkZGVmaW5lUHJvcGVydHkiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiRU5VTUVSQUJMRSIsIldSSVRBQkxFIiwiQXR0cmlidXRlcyIsImN1cnJlbnQiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSIsImludGVybmFsT2JqZWN0S2V5cyIsIm5hbWVzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiTkFTSE9STl9CVUciLCJpbnB1dCIsInByZWYiLCJ2YWx1ZU9mIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSIsInVpZCIsIlNIQVJFRCIsIklTX1BVUkUiLCJtb2RlIiwiY29weXJpZ2h0IiwibGljZW5zZSIsInRvSW50ZWdlck9ySW5maW5pdHkiLCJpbnRlZ2VyIiwiSW5kZXhlZE9iamVjdCIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJudW1iZXIiLCJpc1N5bWJvbCIsImdldE1ldGhvZCIsIm9yZGluYXJ5VG9QcmltaXRpdmUiLCJUT19QUklNSVRJVkUiLCJleG90aWNUb1ByaW0iLCJ0b1ByaW1pdGl2ZSIsInBvc3RmaXgiLCJOQVRJVkVfU1lNQk9MIiwiaXRlcmF0b3IiLCJXZWxsS25vd25TeW1ib2xzU3RvcmUiLCJzeW1ib2xGb3IiLCJjcmVhdGVXZWxsS25vd25TeW1ib2wiLCJ3aXRob3V0U2V0dGVyIiwiJCIsIiRpbmNsdWRlcyIsImFkZFRvVW5zY29wYWJsZXMiLCJwcm90byIsImZhY3RvcnkiLCJtYXRjaGVzTWV0aG9kIiwiRWxlbVByb3RvIiwiRWxlbWVudCIsIm1hdGNoZXNTZWxlY3RvciIsInByZWZpeGVzIiwiZWxlbSIsInNlbGVjdG9yIiwiRXZFbWl0dGVyIiwiZXZlbnRzIiwiX2V2ZW50cyIsImxpc3RlbmVycyIsIm9uY2VFdmVudHMiLCJfb25jZUV2ZW50cyIsImVtaXRFdmVudCIsIm9uY2VMaXN0ZW5lcnMiLCJhbGxPZmYiLCJ1dGlscyIsImIiLCJudW0iLCJhcnJheVNsaWNlIiwibWFrZUFycmF5IiwiaXNBcnJheSIsInJlbW92ZUZyb20iLCJhcnkiLCJnZXRQYXJlbnQiLCJib2R5IiwiZ2V0UXVlcnlFbGVtZW50IiwiaGFuZGxlRXZlbnQiLCJmaWx0ZXJGaW5kRWxlbWVudHMiLCJlbGVtcyIsImZmRWxlbXMiLCJIVE1MRWxlbWVudCIsImNoaWxkRWxlbXMiLCJkZWJvdW5jZU1ldGhvZCIsIl9jbGFzcyIsInRpbWVvdXROYW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImRvY1JlYWR5IiwicmVhZHlTdGF0ZSIsInRvRGFzaGVkIiwic3RyIiwiJDEiLCIkMiIsImh0bWxJbml0IiwiV2lkZ2V0Q2xhc3MiLCJkYXNoZWROYW1lc3BhY2UiLCJkYXRhQXR0ciIsImRhdGFBdHRyRWxlbXMiLCJqc0Rhc2hFbGVtcyIsImRhdGFPcHRpb25zQXR0ciIsImF0dHIiLCJjbGFzc05hbWUiLCJjcmVhdGVNZXRob2RzIiwiX2NyZWF0ZUltYWdlc0xvYWRlZCIsInNsaWRlciIsIm9uSW1hZ2VzTG9hZGVkUHJvZ3Jlc3MiLCJnZXRQYXJlbnRDZWxsIiwiaW1nIiwiY2VsbFNpemVDaGFuZ2UiLCJmcmVlU2Nyb2xsIiwicG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkIiwiZ2V0Q2VsbHNGcmFnbWVudCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImluc2VydCIsIl9tYWtlQ2VsbHMiLCJpc0FwcGVuZCIsImluc2VydENlbGxFbGVtZW50IiwiZW5kQ2VsbHMiLCJfc2l6ZUNlbGxzIiwiY2VsbENoYW5nZSIsImFwcGVuZCIsInByZXBlbmQiLCJnZXRDZWxscyIsIm1pbkNlbGxJbmRleCIsImdldENlbGwiLCJnZXRTaXplIiwiY2hhbmdlZENlbGxJbmRleCIsImlzUG9zaXRpb25pbmdTbGlkZXIiLCJwcmV2U2VsZWN0ZWRFbGVtIiwic2VsZWN0ZWRFbGVtZW50IiwiX3Bvc2l0aW9uQ2VsbHMiLCJfZ2V0V3JhcFNoaWZ0Q2VsbHMiLCJzZXRHYWxsZXJ5U2l6ZSIsInNlbGVjdGVkSW5kZXgiLCJnZXRDZWxsU2xpZGVJbmRleCIsInNsaWRlcyIsInNlbGVjdCIsImlzQW5pbWF0aW5nIiwicmVzdGluZ0ZyYW1lcyIsImFuaW1hdGUiLCJhcHBseURyYWdGb3JjZSIsImFwcGx5U2VsZWN0ZWRBdHRyYWN0aW9uIiwicHJldmlvdXNYIiwiaW50ZWdyYXRlUGh5c2ljcyIsInBvc2l0aW9uU2xpZGVyIiwic2V0dGxlIiwibW9kdWxvIiwic2xpZGVhYmxlV2lkdGgiLCJzaGlmdFdyYXBDZWxscyIsInNldFRyYW5zbGF0ZVgiLCJkaXNwYXRjaFNjcm9sbEV2ZW50IiwiaXMzZCIsImN1cnNvclBvc2l0aW9uIiwicmlnaHRUb0xlZnQiLCJ0cmFuc2xhdGVYIiwiZ2V0UG9zaXRpb25WYWx1ZSIsInRyYW5zZm9ybSIsImZpcnN0U2xpZGUiLCJwb3NpdGlvblgiLCJzbGlkZXNXaWR0aCIsInNlbGVjdGVkU2xpZGUiLCJ2ZWxvY2l0eSIsInBvc2l0aW9uIiwicGVyY2VudFBvc2l0aW9uIiwic2l6ZSIsImlubmVyV2lkdGgiLCJpc1BvaW50ZXJEb3duIiwiaXNGcmVlU2Nyb2xsaW5nIiwiYmVmb3JlR2FwIiwiX3NoaWZ0Q2VsbHMiLCJiZWZvcmVTaGlmdENlbGxzIiwiYWZ0ZXJHYXAiLCJhZnRlclNoaWZ0Q2VsbHMiLCJnYXAiLCJjZWxsU2hpZnQiLCJ3cmFwU2hpZnQiLCJvdXRlcldpZHRoIiwiZ2V0RnJpY3Rpb25GYWN0b3IiLCJmb3JjZSIsImlzRHJhZ2dhYmxlIiwiZHJhZ0ZvcmNlIiwiZHJhZ1giLCJhcHBseUZvcmNlIiwic2VsZWN0ZWRBdHRyYWN0aW9uIiwiQ2VsbCIsIm9yaWdpblNpZGUiLCJkZXN0cm95IiwidW5zZWxlY3QiLCJzaWRlIiwic2V0UG9zaXRpb24iLCJ1cGRhdGVUYXJnZXQiLCJyZW5kZXJQb3NpdGlvbiIsInNldERlZmF1bHRUYXJnZXQiLCJtYXJnaW5Qcm9wZXJ0eSIsInNpZGVPZmZzZXQiLCJhZGp1c3RlZFgiLCJVbmlkcmFnZ2VyIiwiZXh0ZW5kIiwiZHJhZ2dhYmxlIiwiZHJhZ1RocmVzaG9sZCIsIl90b3VjaEFjdGlvblZhbHVlIiwiX2NyZWF0ZURyYWciLCJvbkFjdGl2YXRlRHJhZyIsIl91aUNoYW5nZURyYWciLCJvbkRlYWN0aXZhdGVEcmFnIiwidXBkYXRlRHJhZ2dhYmxlIiwiaGFuZGxlcyIsInZpZXdwb3J0IiwiYmluZEhhbmRsZXMiLCJ1bmJpbmRIYW5kbGVzIiwiYmluZERyYWciLCJ1bmJpbmREcmFnIiwicG9pbnRlckRvd24iLCJwb2ludGVyIiwib2theVBvaW50ZXJEb3duIiwiX3BvaW50ZXJEb3duUHJldmVudERlZmF1bHQiLCJwb2ludGVyRG93bkZvY3VzIiwiYWN0aXZlRWxlbWVudCIsInBvaW50ZXJEb3duQmx1ciIsInBvaW50ZXJEb3duU2Nyb2xsIiwiZ2V0U2Nyb2xsUG9zaXRpb24iLCJfcG9pbnRlckRvd25EZWZhdWx0IiwicG9pbnRlckRvd25Qb2ludGVyIiwicGFnZVgiLCJwYWdlWSIsIl9iaW5kUG9zdFN0YXJ0RXZlbnRzIiwiZm9jdXNOb2RlcyIsIklOUFVUIiwiVEVYVEFSRUEiLCJTRUxFQ1QiLCJwYWdlWE9mZnNldCIsInBhZ2VZT2Zmc2V0IiwiZm9jdXMiLCJpc1RvdWNoU3RhcnQiLCJpc1RvdWNoUG9pbnRlciIsInBvaW50ZXJUeXBlIiwiaXNGb2N1c05vZGUiLCJoYXNEcmFnU3RhcnRlZCIsIm1vdmVWZWN0b3IiLCJhYnMiLCJwb2ludGVyVXAiLCJpc1RvdWNoU2Nyb2xsaW5nIiwiX2RyYWdQb2ludGVyVXAiLCJwb2ludGVyRG9uZSIsImRyYWdTdGFydCIsImRyYWdTdGFydFBvc2l0aW9uIiwic3RhcnRBbmltYXRpb24iLCJwb2ludGVyTW92ZSIsIl9kcmFnUG9pbnRlck1vdmUiLCJfZHJhZ01vdmUiLCJkcmFnTW92ZSIsInByZXZpb3VzRHJhZ1giLCJkaXJlY3Rpb24iLCJvcmlnaW5Cb3VuZCIsImVuZEJvdW5kIiwiZ2V0TGFzdFNsaWRlIiwiZHJhZ01vdmVUaW1lIiwiZHJhZ0VuZCIsImRyYWdFbmRSZXN0aW5nU2VsZWN0IiwicmVzdGluZ1giLCJnZXRSZXN0aW5nUG9zaXRpb24iLCJkcmFnRW5kQm9vc3RTZWxlY3QiLCJpc0RyYWdTZWxlY3QiLCJkaXN0YW5jZSIsImdldFNsaWRlRGlzdGFuY2UiLCJwb3NpdGl2ZVJlc3RpbmciLCJfZ2V0Q2xvc2VzdFJlc3RpbmciLCJuZWdhdGl2ZVJlc3RpbmciLCJpbmNyZW1lbnQiLCJtaW5EaXN0YW5jZSIsIkluZmluaXR5IiwiY29uZGl0aW9uIiwiZGlzdCIsIm1pbkRpc3QiLCJpc1dyYXBBcm91bmQiLCJzbGlkZUluZGV4Iiwic2xpZGUiLCJ3cmFwIiwiZGVsdGEiLCJzdGF0aWNDbGljayIsImNsaWNrZWRDZWxsIiwiY2VsbEVsZW0iLCJjZWxsSW5kZXgiLCJvbnNjcm9sbCIsInNjcm9sbCIsInNjcm9sbE1vdmVYIiwic2Nyb2xsTW92ZVkiLCJfcG9pbnRlckRvbmUiLCJTbGlkZSIsImFuaW1hdGVQcm90b3R5cGUiLCJnZXRDb21wdXRlZFN0eWxlIiwibW92ZUVsZW1lbnRzIiwidG9FbGVtIiwiR1VJRCIsImluc3RhbmNlcyIsInF1ZXJ5RWxlbWVudCIsImZsaWNraXR5R1VJRCIsIm9wdGlvbiIsIiRlbGVtZW50IiwiX2NyZWF0ZSIsImZyZWVTY3JvbGxGcmljdGlvbiIsIm5hbWVzcGFjZUpRdWVyeUV2ZW50cyIsImd1aWQiLCJfY3JlYXRlU2xpZGVyIiwid2F0Y2hDU1MiLCJhY3RpdmF0ZSIsIm9wdHMiLCJpc0FjdGl2ZSIsIl9maWx0ZXJGaW5kQ2VsbEVsZW1lbnRzIiwicmVsb2FkQ2VsbHMiLCJ0YWJJbmRleCIsInNlbGVjdEluaXRpYWxJbmRleCIsImlzSW5pdEFjdGl2YXRlZCIsImNlbGxTZWxlY3RvciIsInBvc2l0aW9uQ2VsbHMiLCJnZXRMYXN0Q2VsbCIsIm1heENlbGxIZWlnaHQiLCJjZWxsWCIsInN0YXJ0Q2VsbCIsIm91dGVySGVpZ2h0IiwidXBkYXRlU2xpZGVzIiwiX2NvbnRhaW5TbGlkZXMiLCJuZXh0TWFyZ2luIiwiY2FuQ2VsbEZpdCIsIl9nZXRDYW5DZWxsRml0Iiwic2xpZGVXaWR0aCIsImZpcnN0TWFyZ2luIiwiYWRkQ2VsbCIsInVwZGF0ZVNlbGVjdGVkU2xpZGUiLCJncm91cENlbGxzIiwicGFyc2VJbnQiLCJwZXJjZW50TWF0Y2giLCJwZXJjZW50IiwiX2luaXQiLCJyZXBvc2l0aW9uIiwic2V0Q2VsbEFsaWduIiwiY2VsbEFsaWduU2hvcnRoYW5kcyIsImNlbnRlciIsInJpZ2h0Iiwic2hvcnRoYW5kIiwiYWRhcHRpdmVIZWlnaHQiLCJfdW5zaGlmdENlbGxzIiwiZ2FwWCIsIl9nZXRHYXBDZWxscyIsImlzUmlnaHRUb0xlZnQiLCJiZWdpbk1hcmdpbiIsImVuZE1hcmdpbiIsImNvbnRlbnRXaWR0aCIsImlzQ29udGVudFNtYWxsZXIiLCJiZWdpbkJvdW5kIiwiZW1pdEFyZ3MiLCIkZXZlbnQiLCJqUUV2ZW50IiwidHJpZ2dlciIsImlzV3JhcCIsImlzSW5zdGFudCIsIl93cmFwU2VsZWN0IiwicHJldkluZGV4Iiwid3JhcEluZGV4IiwiYmFja1dyYXBEZWx0YSIsImZvcmV3YXJkV3JhcERlbHRhIiwicHJldmlvdXMiLCJ1bnNlbGVjdFNlbGVjdGVkU2xpZGUiLCJzZWxlY3RlZENlbGxzIiwiZ2V0Q2VsbEVsZW1lbnRzIiwic2VsZWN0ZWRDZWxsIiwiaW5pdGlhbEluZGV4IiwicXVlcnlDZWxsIiwic2VsZWN0Q2VsbCIsImdldEFkamFjZW50Q2VsbEVsZW1lbnRzIiwiYWRqQ291bnQiLCJjZWxsRWxlbXMiLCJ1aUNoYW5nZSIsImNoaWxkVUlQb2ludGVyRG93biIsIm9ucmVzaXplIiwiaXNEcmFnZ2luZyIsImRlYWN0aXZhdGUiLCJvbmtleWRvd24iLCJpc05vdEZvY3VzZWQiLCJrZXlib2FyZEhhbmRsZXJzIiwia2V5Q29kZSIsImxlZnRNZXRob2QiLCJyaWdodE1ldGhvZCIsInByZXZTY3JvbGxZIiwicHJldmVudFNjcm9sbCIsInJlbW92ZURhdGEiLCJicmlkZ2V0Iiwic2V0SlF1ZXJ5IiwianEiLCJnZXRDZWxsTGF6eUltYWdlcyIsImxhenlsb2FkQXR0ciIsInNyY0F0dHIiLCJzcmNzZXRBdHRyIiwibGF6eVNlbGVjdG9yIiwiaW1ncyIsIkxhenlMb2FkZXIiLCJmbGlja2l0eSIsIl9jcmVhdGVMYXp5bG9hZCIsImxhenlMb2FkIiwibGF6eUltYWdlcyIsImxhenlDZWxsSW1hZ2VzIiwic3Jjc2V0IiwiY29tcGxldGUiLCJVbmlwb2ludGVyIiwiUGFnZURvdHMiLCJob2xkZXIiLCJkb3RzIiwiaGFuZGxlQ2xpY2siLCJvbkNsaWNrIiwic2V0RG90cyIsImJpbmRTdGFydEV2ZW50IiwidW5iaW5kU3RhcnRFdmVudCIsImFkZERvdHMiLCJyZW1vdmVEb3RzIiwibmV3RG90cyIsImRvdCIsInVwZGF0ZVNlbGVjdGVkIiwic2VsZWN0ZWREb3QiLCJvblRhcCIsIl9jcmVhdGVQYWdlRG90cyIsImFjdGl2YXRlUGFnZURvdHMiLCJ1cGRhdGVTZWxlY3RlZFBhZ2VEb3RzIiwidXBkYXRlUGFnZURvdHMiLCJkZWFjdGl2YXRlUGFnZURvdHMiLCJvblZpc2liaWxpdHlDaGFuZ2UiLCJ2aXNpYmlsaXR5Q2hhbmdlIiwib25WaXNpYmlsaXR5UGxheSIsInZpc2liaWxpdHlQbGF5IiwiaGlkZGVuIiwidGljayIsImNsZWFyIiwic3RvcCIsInVucGF1c2UiLCJwYXVzZUF1dG9QbGF5T25Ib3ZlciIsIl9jcmVhdGVQbGF5ZXIiLCJhY3RpdmF0ZVBsYXllciIsInN0b3BQbGF5ZXIiLCJkZWFjdGl2YXRlUGxheWVyIiwicGxheVBsYXllciIsInBhdXNlUGxheWVyIiwidW5wYXVzZVBsYXllciIsIm9ubW91c2VlbnRlciIsIm9ubW91c2VsZWF2ZSIsInN2Z1VSSSIsIlByZXZOZXh0QnV0dG9uIiwiZ2V0QXJyb3dNb3ZlbWVudHMiLCJzaGFwZSIsImlzUHJldmlvdXMiLCJsZWZ0RGlyZWN0aW9uIiwiaXNMZWZ0IiwiZGlzYWJsZSIsInN2ZyIsImNyZWF0ZVNWRyIsImNyZWF0ZUVsZW1lbnROUyIsInBhdGgiLCJwYXRoTW92ZW1lbnRzIiwib25jbGljayIsImVuYWJsZSIsImRpc2FibGVkIiwibGFzdEluZGV4IiwiYm91bmRJbmRleCIsIl9jcmVhdGVQcmV2TmV4dEJ1dHRvbnMiLCJwcmV2QnV0dG9uIiwibmV4dEJ1dHRvbiIsImFjdGl2YXRlUHJldk5leHRCdXR0b25zIiwiZGVhY3RpdmF0ZVByZXZOZXh0QnV0dG9ucyIsImlzT3JpZ2luTGVmdCIsImxhc3RDZWxsIiwibGFzdE1hcmdpbiIsImdldFN0eWxlU2l6ZSIsIm5vb3AiLCJsb2dFcnJvciIsIm1lYXN1cmVtZW50cyIsIm1lYXN1cmVtZW50c0xlbmd0aCIsImdldFplcm9TaXplIiwiaW5uZXJIZWlnaHQiLCJnZXRTdHlsZSIsImlzQm94U2l6ZU91dGVyIiwiaXNTZXR1cCIsInNldHVwIiwicGFkZGluZyIsImJvcmRlclN0eWxlIiwiYm9yZGVyV2lkdGgiLCJib3hTaXppbmciLCJvZmZzZXRIZWlnaHQiLCJpc0JvcmRlckJveCIsIm1lYXN1cmVtZW50IiwicGFkZGluZ1dpZHRoIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nSGVpZ2h0IiwicGFkZGluZ1RvcCIsIm1hcmdpbldpZHRoIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luSGVpZ2h0IiwibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyUmlnaHRXaWR0aCIsImJvcmRlckhlaWdodCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJpc0JvcmRlckJveFNpemVPdXRlciIsInN0eWxlV2lkdGgiLCJzdHlsZUhlaWdodCIsIkltYWdlc0xvYWRlZCIsIm9uQWx3YXlzIiwicXVlcnlFbGVtIiwiZ2V0SW1hZ2VzIiwianFEZWZlcnJlZCIsIkRlZmVycmVkIiwiaW1hZ2VzIiwiYWRkRWxlbWVudEltYWdlcyIsImFkZEltYWdlIiwiYmFja2dyb3VuZCIsImFkZEVsZW1lbnRCYWNrZ3JvdW5kSW1hZ2VzIiwiZWxlbWVudE5vZGVUeXBlcyIsImNoaWxkSW1ncyIsIkxvYWRpbmdJbWFnZSIsIkJhY2tncm91bmQiLCJJbWFnZSIsInJlVVJMIiwiYmFja2dyb3VuZEltYWdlIiwiYWRkQmFja2dyb3VuZCIsImxvYWRpbmdJbWFnZSIsIm9uUHJvZ3Jlc3MiLCJwcm9ncmVzc2VkQ291bnQiLCJoYXNBbnlCcm9rZW4iLCJpc0xvYWRlZCIsImRlYnVnIiwiaXNDb21wbGV0ZSIsImpxTWV0aG9kIiwiZ2V0SXNJbWFnZUNvbXBsZXRlIiwiY29uZmlybSIsIm5hdHVyYWxXaWR0aCIsInByb3h5SW1hZ2UiLCJ1bmJpbmRFdmVudHMiLCJtYWtlSlF1ZXJ5UGx1Z2luIiwicG9seWZpbGwiLCJ3IiwiZCIsIl9fZm9yY2VTbW9vdGhTY3JvbGxQb2x5ZmlsbF9fIiwib3JpZ2luYWwiLCJzY3JvbGxCeSIsImVsZW1lbnRTY3JvbGwiLCJzY3JvbGxFbGVtZW50Iiwibm93IiwicGVyZm9ybWFuY2UiLCJST1VORElOR19UT0xFUkFOQ0UiLCJSZWdFeHAiLCJzaG91bGRCYWlsT3V0Iiwic21vb3RoU2Nyb2xsIiwic2Nyb2xsWCIsInNjcm9sbFkiLCJzY3JvbGxUb3AiLCJTeW50YXhFcnJvciIsInNjcm9sbGFibGVQYXJlbnQiLCJmaW5kU2Nyb2xsYWJsZVBhcmVudCIsInBhcmVudFJlY3RzIiwiY2xpZW50UmVjdHMiLCJmaXJzdEFyZyIsImhhc1Njcm9sbGFibGVTcGFjZSIsImF4aXMiLCJjbGllbnRIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRXaWR0aCIsInNjcm9sbFdpZHRoIiwiY2FuT3ZlcmZsb3ciLCJvdmVyZmxvd1ZhbHVlIiwiaXNTY3JvbGxhYmxlIiwiaXNTY3JvbGxhYmxlWSIsImlzU2Nyb2xsYWJsZVgiLCJob3N0Iiwic3RlcCIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJrIiwic3RhcnRUaW1lIiwiY29zIiwiUEkiLCJzdGFydFgiLCJzdGFydFkiLCJzY3JvbGxhYmxlIiwiX2JpbmRIYW5kbGVzIiwiaXNBZGQiLCJiaW5kTWV0aG9kIiwidG91Y2hBY3Rpb24iLCJoYW5kbGUiLCJfYmluZFN0YXJ0RXZlbnQiLCJQb2ludGVyRXZlbnQiLCJjdXJzb3JOb2RlcyIsIk9QVElPTiIsImNsaWNrVHlwZXMiLCJyYWRpbyIsImNoZWNrYm94Iiwic3VibWl0IiwiZmlsZSIsImlzQ3Vyc29yTm9kZSIsImlzQ2xpY2tUeXBlIiwiaXNPa2F5IiwiX3BvaW50ZXJSZXNldCIsImZvY3VzZWQiLCJibHVyIiwiX2RyYWdTdGFydCIsIl9kcmFnRW5kIiwiX3N0YXRpY0NsaWNrIiwiaXNQcmV2ZW50aW5nQ2xpY2tzIiwiaXNJZ25vcmluZ01vdXNlVXAiLCJnZXRQb2ludGVyUG9pbnQiLCJzdGFydEV2ZW50IiwiZ2V0VG91Y2giLCJ0b3VjaCIsImlkZW50aWZpZXIiLCJwb2ludGVySWRlbnRpZmllciIsIm9ubW91c2Vkb3duIiwiX3BvaW50ZXJEb3duIiwib250b3VjaHN0YXJ0IiwiY2hhbmdlZFRvdWNoZXMiLCJvbnBvaW50ZXJkb3duIiwicG9pbnRlcklkIiwicG9zdFN0YXJ0RXZlbnRzIiwibW91c2Vkb3duIiwidG91Y2hzdGFydCIsInBvaW50ZXJkb3duIiwiX2JvdW5kUG9pbnRlckV2ZW50cyIsIl91bmJpbmRQb3N0U3RhcnRFdmVudHMiLCJvbm1vdXNlbW92ZSIsIl9wb2ludGVyTW92ZSIsIm9ucG9pbnRlcm1vdmUiLCJvbnRvdWNobW92ZSIsIm9ubW91c2V1cCIsIl9wb2ludGVyVXAiLCJvbnBvaW50ZXJ1cCIsIm9udG91Y2hlbmQiLCJvbnBvaW50ZXJjYW5jZWwiLCJfcG9pbnRlckNhbmNlbCIsIm9udG91Y2hjYW5jZWwiLCJwb2ludGVyQ2FuY2VsIiwiYXNzaWduIiwidCIsImRldmljZVBpeGVsUmF0aW8iLCJyIiwidGhyZXNob2xkcyIsImRhdGFfc3JjIiwiZGF0YV9zcmNzZXQiLCJkYXRhX3NpemVzIiwiZGF0YV9iZyIsImRhdGFfYmdfaGlkcGkiLCJkYXRhX2JnX211bHRpIiwiZGF0YV9iZ19tdWx0aV9oaWRwaSIsImRhdGFfYmdfc2V0IiwiZGF0YV9wb3N0ZXIiLCJjbGFzc19hcHBsaWVkIiwiY2xhc3NfbG9hZGluZyIsImNsYXNzX2xvYWRlZCIsImNsYXNzX2Vycm9yIiwiY2xhc3NfZW50ZXJlZCIsImNsYXNzX2V4aXRlZCIsInVub2JzZXJ2ZV9jb21wbGV0ZWQiLCJ1bm9ic2VydmVfZW50ZXJlZCIsImNhbmNlbF9vbl9leGl0IiwiY2FsbGJhY2tfZW50ZXIiLCJjYWxsYmFja19leGl0IiwiY2FsbGJhY2tfYXBwbGllZCIsImNhbGxiYWNrX2xvYWRpbmciLCJjYWxsYmFja19maW5pc2giLCJjYWxsYmFja19jYW5jZWwiLCJ1c2VfbmF0aXZlIiwicmVzdG9yZV9vbl9lcnJvciIsImMiLCJkZXRhaWwiLCJjcmVhdGVFdmVudCIsImluaXRDdXN0b21FdmVudCIsInUiLCJzIiwiXyIsInYiLCJtIiwicCIsImgiLCJFIiwiSSIsIkEiLCJMIiwiQyIsIk4iLCJNIiwieiIsImxsVGVtcEltYWdlIiwiVCIsIl9vYnNlcnZlciIsInVub2JzZXJ2ZSIsIlIiLCJsb2FkaW5nQ291bnQiLCJHIiwidG9Mb2FkQ291bnQiLCJqIiwidGFnTmFtZSIsIkQiLCJIIiwiQiIsIkoiLCJTIiwiVSIsInEiLCJLIiwiUSIsIlciLCJYIiwiWSIsIklNRyIsIklGUkFNRSIsIlZJREVPIiwiT0JKRUNUIiwiWiIsIm5uIiwidG4iLCJsbEV2TGlzbnJzIiwiZW4iLCJhbiIsInJuIiwiY24iLCJsbiIsInVuIiwic24iLCJkbiIsIl9uIiwiZ24iLCJIVE1MSW1hZ2VFbGVtZW50Iiwidm4iLCJpbnRlcnNlY3Rpb25SYXRpbyIsImJuIiwibW4iLCJwbiIsImhuIiwiZmlsdGVyIiwiRW4iLCJfc2V0dGluZ3MiLCJfb25saW5lSGFuZGxlciIsImRpc2Nvbm5lY3QiLCJyZXN0b3JlQWxsIiwicmVzZXRTdGF0dXMiLCJsYXp5TG9hZE9wdGlvbnMiLCJiYXNlQ3JlYXRlIiwibmF0aXZlQ3JlYXRlIiwiQ3RvciIsImJhc2VJdGVyYXRlZSIsImFyZ0NvdW50IiwiY2hhaW5SZXN1bHQiLCJfY2hhaW4iLCJjb2xsZWN0Tm9uRW51bVByb3BzIiwiaGFzaCIsImVtdWxhdGVkU2V0Iiwibm9uRW51bUlkeCIsIm5vbkVudW1lcmFibGVQcm9wcyIsIk9ialByb3RvIiwiY3JlYXRlQXNzaWduZXIiLCJrZXlzRnVuYyIsImNyZWF0ZUVzY2FwZXIiLCJlc2NhcGVyIiwidGVzdFJlZ2V4cCIsInJlcGxhY2VSZWdleHAiLCJjcmVhdGVJbmRleEZpbmRlciIsImRpciIsInByZWRpY2F0ZUZpbmQiLCJzb3J0ZWRJbmRleCIsImFycmF5IiwiY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIiLCJwcmVkaWNhdGUiLCJjcmVhdGVSZWR1Y2UiLCJyZWR1Y2VyIiwiaXRlcmF0ZWUiLCJtZW1vIiwiaW5pdGlhbCIsIl9rZXlzIiwiY3VycmVudEtleSIsImNyZWF0ZVNpemVQcm9wZXJ0eUNoZWNrIiwiZ2V0U2l6ZVByb3BlcnR5IiwiY29sbGVjdGlvbiIsInNpemVQcm9wZXJ0eSIsIk1BWF9BUlJBWV9JTkRFWCIsImRlZXBHZXQiLCJleGVjdXRlQm91bmQiLCJzb3VyY2VGdW5jIiwiYm91bmRGdW5jIiwiY2FsbGluZ0NvbnRleHQiLCJmbGF0dGVuIiwiZGVwdGgiLCJzdHJpY3QiLCJvdXRwdXQiLCJncm91cCIsInBhcnRpdGlvbiIsImtleUluT2JqIiwiaWUxMWZpbmdlcnByaW50IiwibWV0aG9kcyIsIndlYWtNYXBNZXRob2RzIiwiZm9yRWFjaE5hbWUiLCJjb21tb25Jbml0IiwibWFwVGFpbCIsIm1hcE1ldGhvZHMiLCJzZXRNZXRob2RzIiwib3B0aW1pemVDYiIsImFjY3VtdWxhdG9yIiwiVkVSU0lPTiIsIkFycmF5UHJvdG8iLCJTeW1ib2xQcm90byIsInN1cHBvcnRzQXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsInN1cHBvcnRzRGF0YVZpZXciLCJEYXRhVmlldyIsIm5hdGl2ZUlzQXJyYXkiLCJuYXRpdmVLZXlzIiwibmF0aXZlSXNWaWV3IiwiaXNWaWV3IiwiX2lzTmFOIiwiX2lzRmluaXRlIiwiaGFzRW51bUJ1ZyIsInBvdyIsInNoYWxsb3dQcm9wZXJ0eSIsImhhc1N0cmluZ1RhZ0J1ZyIsImlzSUUxMSIsIk1hcCIsInRhZ1Rlc3RlciIsInRhZyIsInRvQnVmZmVyVmlldyIsImJ1ZmZlclNvdXJjZSIsIlVpbnQ4QXJyYXkiLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwidG9QYXRoIiwiYWZ0ZXIiLCJ0aW1lcyIsImFsbEtleXMiLCJiZWZvcmUiLCJib3VuZCIsImNhbGxBcmdzIiwiY2h1bmsiLCJjbG9uZSIsImNvbXBhY3QiLCJjb21wb3NlIiwic3RhcnQiLCJjb25zdGFudCIsImd1YXJkIiwiZGVib3VuY2UiLCJ3YWl0IiwiaW1tZWRpYXRlIiwibGF0ZXIiLCJwYXNzZWQiLCJkZWJvdW5jZWQiLCJfYXJncyIsImNhbmNlbCIsInJlc3QiLCJlYWNoIiwiZXZlcnkiLCJyZXN1bHRzIiwibGlzdCIsImZpbmQiLCJmaW5kS2V5IiwiZmluZFdoZXJlIiwiYXR0cnMiLCJmdW5jdGlvbnMiLCJzb3J0IiwiZGVmYXVsdFZhbHVlIiwiaWRlbnRpdHkiLCJtaXhpbiIsImludGVyc2VjdGlvbiIsImFyZ3NMZW5ndGgiLCJpbnZlcnQiLCJjb250ZXh0UGF0aCIsImlzQXJndW1lbnRzIiwiaXNCb29sZWFuIiwiaXNEYXRhVmlldyIsImdldEludDgiLCJpc0VsZW1lbnQiLCJpc0VtcHR5IiwidGFnRGF0YVZpZXciLCJlcSIsImFTdGFjayIsImJTdGFjayIsImRlZXBFcSIsIl93cmFwcGVkIiwiYXJlQXJyYXlzIiwiYUN0b3IiLCJiQ3RvciIsInBvcCIsImlzRXF1YWwiLCJpc0Z1bmN0aW9uIiwibm9kZWxpc3QiLCJJbnQ4QXJyYXkiLCJpc01hdGNoIiwiaXNOdWxsIiwidHlwZWRBcnJheVBhdHRlcm4iLCJpc1VuZGVmaW5lZCIsIm1hcE9iamVjdCIsIm1hdGNoZXIiLCJjb21wdXRlZCIsImxhc3RDb21wdXRlZCIsIm1lbW9pemUiLCJoYXNoZXIiLCJjYWNoZSIsImFkZHJlc3MiLCJuZWdhdGUiLCJnZXRUaW1lIiwidmFsdWVzIiwicGFpcnMiLCJwYXJ0aWFsIiwiYm91bmRBcmdzIiwicGxhY2Vob2xkZXIiLCJwYXNzIiwicGx1Y2siLCJwcm9wZXJ0eSIsInByb3BlcnR5T2YiLCJyYW5nZSIsInJlc3RBcmd1bWVudHMiLCJzdGFydEluZGV4IiwiZmFsbGJhY2siLCJzYW1wbGUiLCJzaHVmZmxlIiwic29tZSIsInNvcnRCeSIsImNyaXRlcmlhIiwibG93IiwiaGlnaCIsIm1pZCIsInRhcCIsImludGVyY2VwdG9yIiwibm9NYXRjaCIsImVzY2FwZXMiLCJlc2NhcGVSZWdFeHAiLCJlc2NhcGVDaGFyIiwiYmFyZUlkZW50aWZpZXIiLCJ0ZW1wbGF0ZSIsInNldHRpbmdzIiwib2xkU2V0dGluZ3MiLCJpbnRlcnBvbGF0ZSIsImV2YWx1YXRlIiwib2Zmc2V0IiwicmVuZGVyIiwidmFyaWFibGUiLCJ0aHJvdHRsZSIsImxlYWRpbmciLCJ0aHJvdHRsZWQiLCJfbm93IiwicmVtYWluaW5nIiwidHJhaWxpbmciLCJhY2N1bSIsInJlU3RyU3ltYm9sIiwidG9BcnJheSIsInRvSlNPTiIsImFycmF5cyIsInVuaXEiLCJpc1NvcnRlZCIsInNlZW4iLCJpZENvdW50ZXIiLCJ1bmlxdWVJZCIsInVuemlwIiwid2hlcmUiLCJvdGhlckFycmF5cyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJfX2VzTW9kdWxlIiwidG9TdHJpbmdUYWciLCJBdWRpb1BsYXllciIsImluaXRpYWxpemVBbGVydCIsImp1bXBMaW5rQmFubmVyIiwidmltZW9QbGF5VG9nZ2xlIl0sInNvdXJjZVJvb3QiOiIifQ==